{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\n\nconst Denque = require(\"denque\");\n\nconst collection_1 = require(\"./collection\");\n\nconst constants_1 = require(\"./constants\");\n\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\n\nconst db_1 = require(\"./db\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst aggregate_1 = require(\"./operations/aggregate\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference', 'comment', ...CHANGE_STREAM_OPTIONS];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst SELECTION_TIMEOUT = 30000;\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n\n  hasNext(callback) {\n    this._setIsIterator();\n\n    return (0, utils_1.maybePromise)(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  next(callback) {\n    this._setIsIterator();\n\n    return (0, utils_1.maybePromise)(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n\n            this._processError(error, cb);\n\n            return;\n          }\n\n          this._processNewChange(change !== null && change !== void 0 ? change : null, cb);\n        });\n      });\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    var _a, _b;\n\n    return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n  }\n  /** Close the Change Stream */\n\n\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n\n\n  stream(options) {\n    this.streamOptions = options;\n    if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  tryNext(callback) {\n    this._setIsIterator();\n\n    return (0, utils_1.maybePromise)(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n  /** @internal */\n\n\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n\n\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n\n    this[kMode] = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n\n\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const cursorOptions = (0, utils_1.filterOptions)(options, CURSOR_OPTIONS);\n    const changeStreamCursor = new ChangeStreamCursor((0, utils_1.getTopology)(this.parent), this.namespace, pipeline, cursorOptions);\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n  /**\n   * This method performs a basic server selection loop, satisfying the requirements of\n   * ChangeStream resumability until the new SDAM layer can be used.\n   * @internal\n   */\n\n\n  _waitForTopologyConnected(topology, options, callback) {\n    setTimeout(() => {\n      if (options && options.start == null) {\n        options.start = (0, utils_1.now)();\n      }\n\n      const start = options.start || (0, utils_1.now)();\n      const timeout = options.timeout || SELECTION_TIMEOUT;\n\n      if (topology.isConnected()) {\n        return callback();\n      }\n\n      if ((0, utils_1.calculateDurationInMs)(start) > timeout) {\n        // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n        return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n      }\n\n      this._waitForTopologyConnected(topology, options, callback);\n    }, 500); // this is an arbitrary wait time to allow SDAM to transition\n  }\n  /** @internal */\n\n\n  _closeWithError(error, callback) {\n    if (!callback) {\n      this.emit(ChangeStream.ERROR, error);\n    }\n\n    this.close(() => callback && callback(error));\n  }\n  /** @internal */\n\n\n  _streamEvents(cursor) {\n    var _a;\n\n    this._setIsEmitter();\n\n    const stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => this._processNewChange(change));\n    stream.on('error', error => this._processError(error));\n  }\n  /** @internal */\n\n\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n\n\n  _processNewChange(change, callback) {\n    var _a;\n\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return this._closeWithError(new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n    }\n\n    if (change && !change._id) {\n      return this._closeWithError(new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n    } // cache the resume token\n\n\n    (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n    this.options.startAtOperationTime = undefined; // Return the change\n\n    if (!callback) return this.emit(ChangeStream.CHANGE, change);\n    return callback(undefined, change);\n  }\n  /** @internal */\n\n\n  _processError(error, callback) {\n    const cursor = this.cursor; // If the change stream has been closed explicitly, do not process error.\n\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    } // if the resume succeeds, continue with the new cursor\n\n\n    const resumeWithCursor = newCursor => {\n      this.cursor = newCursor;\n\n      this._processResumeQueue();\n    }; // otherwise, raise an error and close the change stream\n\n\n    const unresumableError = err => {\n      if (!callback) {\n        this.emit(ChangeStream.ERROR, err);\n      }\n\n      this.close(() => this._processResumeQueue(err));\n    };\n\n    if (cursor && (0, error_1.isResumableError)(error, (0, utils_1.maxWireVersion)(cursor.server))) {\n      this.cursor = undefined; // stop listening to all events from old cursor\n\n      this._endStream(); // close internal cursor, ignore errors\n\n\n      cursor.close();\n      const topology = (0, utils_1.getTopology)(this.parent);\n\n      this._waitForTopologyConnected(topology, {\n        readPreference: cursor.readPreference\n      }, err => {\n        // if the topology can't reconnect, close the stream\n        if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n        const newCursor = this._createChangeStreamCursor(cursor.resumeOptions); // attempt to continue in emitter mode\n\n\n        if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n        newCursor.hasNext(err => {\n          // if there's an error immediately after resuming, close the stream\n          if (err) return unresumableError(err);\n          resumeWithCursor(newCursor);\n        });\n      });\n\n      return;\n    } // if initial error wasn't resumable, raise an error and close the change stream\n\n\n    return this._closeWithError(error, callback);\n  }\n  /** @internal */\n\n\n  _getCursor(callback) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    } // if a cursor exists and it is open, return it\n\n\n    if (this.cursor) {\n      callback(undefined, this.cursor);\n      return;\n    } // no cursor, queue callback until topology reconnects\n\n\n    this[kResumeQueue].push(callback);\n  }\n  /**\n   * Drain the resume queue when a new has become available\n   * @internal\n   *\n   * @param err - error getting a new cursor\n   */\n\n\n  _processResumeQueue(error) {\n    var _a;\n\n    while (this[kResumeQueue].length) {\n      const request = this[kResumeQueue].pop();\n      if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n      if (!error) {\n        if (this[kClosed]) {\n          // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n          request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n          return;\n        }\n\n        if (!this.cursor) {\n          request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n          return;\n        }\n      }\n\n      request(error, (_a = this.cursor) !== null && _a !== void 0 ? _a : undefined);\n    }\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\n\nChangeStream.MORE = constants_1.MORE;\n/** @event */\n\nChangeStream.INIT = constants_1.INIT;\n/** @event */\n\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\n\nChangeStream.END = constants_1.END;\n/** @event */\n\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n/** @internal */\n\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(topology, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(topology, namespace, options);\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = (0, utils_1.filterOptions)(this.options, CURSOR_OPTIONS);\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n        Reflect.deleteProperty(result, key);\n      }\n\n      if (this.resumeToken) {\n        const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        result[resumeKey] = this.resumeToken;\n      } else if (this.startAtOperationTime && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n\n    this.hasReceived = true;\n  }\n\n  _processBatch(response) {\n    const cursor = response.cursor;\n\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n      const batch = 'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n\n      if (batch.length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone() {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, { ...this.cursorOptions\n    });\n  }\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(session, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && (0, utils_1.maxWireVersion)(server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch(response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE); // TODO: NODE-2882\n\n      callback(undefined, {\n        server,\n        session,\n        response\n      });\n    });\n  }\n\n  _getMore(batchSize, callback) {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch(response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n\n}\n\nexports.ChangeStreamCursor = ChangeStreamCursor;","map":{"version":3,"mappings":"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","names":["kResumeQueue","Symbol","kCursorStream","kClosed","kMode","CHANGE_STREAM_OPTIONS","CURSOR_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","SELECTION_TIMEOUT","CHANGE_STREAM_EVENTS","constants_1","NO_RESUME_TOKEN_ERROR","NO_CURSOR_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","Denque","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","_a","removeAllListeners","cursorStream","resumeToken","hasNext","callback","_setIsIterator","cb","_getCursor","err","next","error","change","push","_processError","_processNewChange","closed","_b","close","_endStream","undefined","stream","streamOptions","tryNext","_setIsEmitter","changeStreamStageOptions","allChangesForCluster","$changeStream","cursorOptions","changeStreamCursor","ChangeStreamCursor","event","e","emit","CHANGE","_waitForTopologyConnected","topology","setTimeout","start","timeout","isConnected","_closeWithError","ERROR","forEach","destroy","_id","cacheResumeToken","startAtOperationTime","resumeWithCursor","newCursor","_processResumeQueue","unresumableError","server","resumeOptions","length","request","pop","exports","abstract_cursor_1","_resumeToken","startAfter","resumeAfter","token","RESUME_TOKEN_CHANGED","result","key","Reflect","deleteProperty","resumeKey","hasReceived","bufferedCount","postBatchResumeToken","_processBatch","response","batch","firstBatch","nextBatch","clone","_initialize","session","aggregateOperation","aggregate_1","operationTime","INIT","RESPONSE","_getMore","batchSize","MORE"],"sources":["C:\\Users\\Administrator\\Desktop\\webAPI work\\web\\dog-website\\node_modules\\mongodb\\src\\change_stream.ts"],"sourcesContent":["import Denque = require('denque');\nimport type { Readable } from 'stream';\n\nimport type { Document, Long, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport { CHANGE, CLOSE, END, ERROR, INIT, MORE, RESPONSE, RESUME_TOKEN_CHANGED } from './constants';\nimport {\n  AbstractCursor,\n  AbstractCursorEvents,\n  AbstractCursorOptions,\n  CursorStreamOptions\n} from './cursor/abstract_cursor';\nimport { Db } from './db';\nimport {\n  AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { InferIdType, TODO_NODE_3286, TypedEventEmitter } from './mongo_types';\nimport { AggregateOperation, AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport { executeOperation, ExecutionResult } from './operations/execute_operation';\nimport type { ReadPreference } from './read_preference';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession, ServerSessionId } from './sessions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  filterOptions,\n  getTopology,\n  maxWireVersion,\n  maybePromise,\n  MongoDBNamespace,\n  now\n} from './utils';\n\n/** @internal */\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\n\nconst CHANGE_STREAM_OPTIONS = [\n  'resumeAfter',\n  'startAfter',\n  'startAtOperationTime',\n  'fullDocument'\n] as const;\n\nconst CURSOR_OPTIONS = [\n  'batchSize',\n  'maxAwaitTimeMS',\n  'collation',\n  'readPreference',\n  'comment',\n  ...CHANGE_STREAM_OPTIONS\n] as const;\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\ninterface TopologyWaitOptions {\n  start?: number;\n  timeout?: number;\n  readPreference?: ReadPreference;\n}\n\nconst SELECTION_TIMEOUT = 30000;\n\nconst CHANGE_STREAM_EVENTS = [RESUME_TOKEN_CHANGED, END, CLOSE];\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/** @public */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\nexport type OperationTime = Timestamp;\n\n/** @public */\nexport interface PipeOptions {\n  end?: boolean;\n}\n\n/** @internal */\nexport type ChangeStreamAggregateRawResult<TChange> = {\n  $clusterTime: { clusterTime: Timestamp };\n  cursor: {\n    postBatchResumeToken: ResumeToken;\n    ns: string;\n    id: number | Long;\n  } & ({ firstBatch: TChange[] } | { nextBatch: TChange[] });\n  ok: 1;\n  operationTime: Timestamp;\n};\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends AggregateOptions {\n  /**\n   * Allowed values: 'updateLookup'. When set to 'updateLookup',\n   * the change stream will include both a delta describing the changes to the document,\n   * as well as a copy of the entire document that was changed from some time after the change occurred.\n   */\n  fullDocument?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /**\n   * Allows you to start a changeStream after a specified event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams\n   */\n  resumeAfter?: ResumeToken;\n  /**\n   * Similar to resumeAfter, but will allow you to start after an invalidated event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams\n   */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /**\n   * The number of documents to return per batch.\n   * @see https://docs.mongodb.com/manual/reference/command/aggregate\n   */\n  batchSize?: number;\n}\n\n/** @public */\nexport interface ChangeStreamNameSpace {\n  db: string;\n  coll: string;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\n  /**\n   * For unsharded collections this contains a single field `_id`.\n   * For sharded collections, this will contain all the components of the shard key\n   */\n  documentKey: { _id: InferIdType<TSchema>; [shardKey: string]: any };\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCommon {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: ResumeToken;\n  /**\n   * The timestamp from the oplog entry associated with the event.\n   * For events that happened as part of a multi-document transaction, the associated change stream\n   * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n   * associated with different transactions or even not be associated with any transaction.\n   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n   */\n  clusterTime?: Timestamp;\n\n  /**\n   * The transaction number.\n   * Only present if the operation is part of a multi-document transaction.\n   *\n   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n   */\n  txnNumber?: number;\n\n  /**\n   * The identifier for the session associated with the transaction.\n   * Only present if the operation is part of a multi-document transaction.\n   */\n  lsid?: ServerSessionId;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport interface ChangeStreamInsertDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'insert';\n  /** This key will contain the document being inserted */\n  fullDocument: TSchema;\n  /** Namespace the insert event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport interface ChangeStreamUpdateDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'update';\n  /**\n   * This is only set if `fullDocument` is set to `'updateLookup'`\n   * The fullDocument document represents the most current majority-committed version of the updated document.\n   * The fullDocument document may vary from the document at the time of the update operation depending on the\n   * number of interleaving majority-committed operations that occur between the update operation and the document lookup.\n   */\n  fullDocument?: TSchema;\n  /** Contains a description of updated and removed fields in this operation */\n  updateDescription: UpdateDescription<TSchema>;\n  /** Namespace the update event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport interface ChangeStreamReplaceDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'replace';\n  /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n  fullDocument: TSchema;\n  /** Namespace the replace event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport interface ChangeStreamDeleteDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'delete';\n  /** Namespace the delete event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport interface ChangeStreamDropDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'drop';\n  /** Namespace the drop event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport interface ChangeStreamRenameDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'rename';\n  /** The new name for the `ns.coll` collection */\n  to: { db: string; coll: string };\n  /** The \"from\" namespace that the rename occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropDatabase';\n  /** The database dropped */\n  ns: { db: string };\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'invalidate';\n}\n\n/** @public */\nexport type ChangeStreamDocument<TSchema extends Document = Document> =\n  | ChangeStreamInsertDocument<TSchema>\n  | ChangeStreamUpdateDocument<TSchema>\n  | ChangeStreamReplaceDocument<TSchema>\n  | ChangeStreamDeleteDocument<TSchema>\n  | ChangeStreamDropDocument\n  | ChangeStreamRenameDocument\n  | ChangeStreamDropDatabaseDocument\n  | ChangeStreamInvalidateDocument;\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields?: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields?: string[];\n\n  /**\n   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n   * - $addFields\n   * - $set\n   * - $replaceRoot\n   * - $replaceWith\n   */\n  truncatedArrays?: Array<{\n    /** The name of the truncated field. */\n    field: string;\n    /** The number of elements in the truncated array. */\n    newSize: number;\n  }>;\n}\n\n/** @public */\nexport type ChangeStreamEvents<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: any): void;\n  more(response?: any): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: TChange): void;\n} & AbstractCursorEvents;\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> {\n  pipeline: Document[];\n  options: ChangeStreamOptions;\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  cursor: ChangeStreamCursor<TSchema, TChange> | undefined;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  [kResumeQueue]: Denque<Callback<ChangeStreamCursor<TSchema, TChange>>>;\n  /** @internal */\n  [kCursorStream]?: Readable & AsyncIterable<TChange>;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kMode]: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = RESPONSE;\n  /** @event */\n  static readonly MORE = MORE;\n  /** @event */\n  static readonly INIT = INIT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = CHANGE;\n  /** @event */\n  static readonly END = END;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = RESUME_TOKEN_CHANGED;\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque();\n\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n\n    this[kClosed] = false;\n    this[kMode] = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n\n  /** @internal */\n  get cursorStream(): (Readable & AsyncIterable<TChange>) | undefined {\n    return this[kCursorStream];\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback): Promise<boolean> | void {\n    this._setIsIterator();\n    return maybePromise(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  /** Get the next available document from the Change Stream. */\n  next(): Promise<TChange>;\n  next(callback: Callback<TChange>): void;\n  next(callback?: Callback<TChange>): Promise<TChange> | void {\n    this._setIsIterator();\n    return maybePromise(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            this._processError(error, cb);\n            return;\n          }\n          this._processNewChange(change ?? null, cb);\n        });\n      });\n    });\n  }\n\n  /** Is the cursor closed */\n  get closed(): boolean {\n    return this[kClosed] || (this.cursor?.closed ?? false);\n  }\n\n  /** Close the Change Stream */\n  close(callback?: Callback): Promise<void> | void {\n    this[kClosed] = true;\n\n    return maybePromise(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange> {\n    this.streamOptions = options;\n    if (!this.cursor) throw new MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<Document | null>;\n  tryNext(callback: Callback<Document | null>): void;\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\n    this._setIsIterator();\n    return maybePromise(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n\n  /** @internal */\n  private _setIsEmitter(): void {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n      );\n    }\n    this[kMode] = 'emitter';\n  }\n\n  /** @internal */\n  private _setIsIterator(): void {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n      );\n    }\n    this[kMode] = 'iterator';\n  }\n\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  private _createChangeStreamCursor(\n    options: ChangeStreamOptions | ResumeOptions\n  ): ChangeStreamCursor<TSchema, TChange> {\n    const changeStreamStageOptions = filterOptions(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n\n    const cursorOptions: ChangeStreamCursorOptions = filterOptions(options, CURSOR_OPTIONS);\n\n    const changeStreamCursor = new ChangeStreamCursor<TSchema, TChange>(\n      getTopology(this.parent),\n      this.namespace,\n      pipeline,\n      cursorOptions\n    );\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n\n  /**\n   * This method performs a basic server selection loop, satisfying the requirements of\n   * ChangeStream resumability until the new SDAM layer can be used.\n   * @internal\n   */\n  private _waitForTopologyConnected(\n    topology: Topology,\n    options: TopologyWaitOptions,\n    callback: Callback\n  ) {\n    setTimeout(() => {\n      if (options && options.start == null) {\n        options.start = now();\n      }\n\n      const start = options.start || now();\n      const timeout = options.timeout || SELECTION_TIMEOUT;\n      if (topology.isConnected()) {\n        return callback();\n      }\n\n      if (calculateDurationInMs(start) > timeout) {\n        // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n        return callback(new MongoRuntimeError('Timed out waiting for connection'));\n      }\n\n      this._waitForTopologyConnected(topology, options, callback);\n    }, 500); // this is an arbitrary wait time to allow SDAM to transition\n  }\n\n  /** @internal */\n  private _closeWithError(error: AnyError, callback?: Callback): void {\n    if (!callback) {\n      this.emit(ChangeStream.ERROR, error);\n    }\n\n    this.close(() => callback && callback(error));\n  }\n\n  /** @internal */\n  private _streamEvents(cursor: ChangeStreamCursor<TSchema, TChange>): void {\n    this._setIsEmitter();\n    const stream = this[kCursorStream] ?? cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => this._processNewChange(change));\n    stream.on('error', error => this._processError(error));\n  }\n\n  /** @internal */\n  private _endStream(): void {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n\n  /** @internal */\n  private _processNewChange(change: TChange | null, callback?: Callback<TChange>) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return this._closeWithError(new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n    }\n\n    if (change && !change._id) {\n      return this._closeWithError(new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n    }\n\n    // cache the resume token\n    this.cursor?.cacheResumeToken(change._id);\n\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n\n    // Return the change\n    if (!callback) return this.emit(ChangeStream.CHANGE, change);\n    return callback(undefined, change);\n  }\n\n  /** @internal */\n  private _processError(error: AnyError, callback?: Callback) {\n    const cursor = this.cursor;\n\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n\n    // if the resume succeeds, continue with the new cursor\n    const resumeWithCursor = (newCursor: ChangeStreamCursor<TSchema, TChange>) => {\n      this.cursor = newCursor;\n      this._processResumeQueue();\n    };\n\n    // otherwise, raise an error and close the change stream\n    const unresumableError = (err: AnyError) => {\n      if (!callback) {\n        this.emit(ChangeStream.ERROR, err);\n      }\n\n      this.close(() => this._processResumeQueue(err));\n    };\n\n    if (cursor && isResumableError(error, maxWireVersion(cursor.server))) {\n      this.cursor = undefined;\n\n      // stop listening to all events from old cursor\n      this._endStream();\n\n      // close internal cursor, ignore errors\n      cursor.close();\n\n      const topology = getTopology(this.parent);\n      this._waitForTopologyConnected(topology, { readPreference: cursor.readPreference }, err => {\n        // if the topology can't reconnect, close the stream\n        if (err) return unresumableError(err);\n\n        // create a new cursor, preserving the old cursor's options\n        const newCursor = this._createChangeStreamCursor(cursor.resumeOptions);\n\n        // attempt to continue in emitter mode\n        if (!callback) return resumeWithCursor(newCursor);\n\n        // attempt to continue in iterator mode\n        newCursor.hasNext(err => {\n          // if there's an error immediately after resuming, close the stream\n          if (err) return unresumableError(err);\n          resumeWithCursor(newCursor);\n        });\n      });\n      return;\n    }\n\n    // if initial error wasn't resumable, raise an error and close the change stream\n    return this._closeWithError(error, callback);\n  }\n\n  /** @internal */\n  private _getCursor(callback: Callback<ChangeStreamCursor<TSchema, TChange>>) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n\n    // if a cursor exists and it is open, return it\n    if (this.cursor) {\n      callback(undefined, this.cursor);\n      return;\n    }\n\n    // no cursor, queue callback until topology reconnects\n    this[kResumeQueue].push(callback);\n  }\n\n  /**\n   * Drain the resume queue when a new has become available\n   * @internal\n   *\n   * @param err - error getting a new cursor\n   */\n  private _processResumeQueue(error?: Error) {\n    while (this[kResumeQueue].length) {\n      const request = this[kResumeQueue].pop();\n      if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n      if (!error) {\n        if (this[kClosed]) {\n          // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n          request(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n          return;\n        }\n        if (!this.cursor) {\n          request(new MongoChangeStreamError(NO_CURSOR_ERROR));\n          return;\n        }\n      }\n      request(error, this.cursor ?? undefined);\n    }\n  }\n}\n\n/** @internal */\nexport interface ChangeStreamCursorOptions extends AbstractCursorOptions {\n  startAtOperationTime?: OperationTime;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n}\n\n/** @internal */\nexport class ChangeStreamCursor<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> extends AbstractCursor<TChange, ChangeStreamEvents> {\n  _resumeToken: ResumeToken;\n  startAtOperationTime?: OperationTime;\n  hasReceived?: boolean;\n  resumeAfter: ResumeToken;\n  startAfter: ResumeToken;\n  options: ChangeStreamCursorOptions;\n\n  postBatchResumeToken?: ResumeToken;\n  pipeline: Document[];\n\n  constructor(\n    topology: Topology,\n    namespace: MongoDBNamespace,\n    pipeline: Document[] = [],\n    options: ChangeStreamCursorOptions = {}\n  ) {\n    super(topology, namespace, options);\n\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token: ResumeToken) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken(): ResumeToken {\n    return this._resumeToken;\n  }\n\n  get resumeOptions(): ResumeOptions {\n    const result: ResumeOptions = filterOptions(this.options, CURSOR_OPTIONS);\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n        Reflect.deleteProperty(result, key);\n      }\n\n      if (this.resumeToken) {\n        const resumeKey =\n          this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n\n        result[resumeKey] = this.resumeToken;\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken: ResumeToken): void {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n    this.hasReceived = true;\n  }\n\n  _processBatch(response: ChangeStreamAggregateRawResult<TChange>): void {\n    const cursor = response.cursor;\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n\n      const batch =\n        'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n      if (batch.length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone(): AbstractCursor<TChange> {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, {\n      ...this.cursorOptions\n    });\n  }\n\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const aggregateOperation = new AggregateOperation(this.namespace, this.pipeline, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n\n    executeOperation<TODO_NODE_3286, ChangeStreamAggregateRawResult<TChange>>(\n      session,\n      aggregateOperation,\n      (err, response) => {\n        if (err || response == null) {\n          return callback(err);\n        }\n\n        const server = aggregateOperation.server;\n        if (\n          this.startAtOperationTime == null &&\n          this.resumeAfter == null &&\n          this.startAfter == null &&\n          maxWireVersion(server) >= 7\n        ) {\n          this.startAtOperationTime = response.operationTime;\n        }\n\n        this._processBatch(response);\n\n        this.emit(ChangeStream.INIT, response);\n        this.emit(ChangeStream.RESPONSE);\n\n        // TODO: NODE-2882\n        callback(undefined, { server, session, response });\n      }\n    );\n  }\n\n  override _getMore(batchSize: number, callback: Callback): void {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch(response as TODO_NODE_3286 as ChangeStreamAggregateRawResult<TChange>);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}