{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events'),\n      MongoError = require('../core').MongoError,\n      f = require('util').format,\n      ReadPreference = require('../core').ReadPreference,\n      ClientSession = require('../core').Sessions.ClientSession; // The store of ops\n\n\nvar Store = function (topology, storeOptions) {\n  var self = this;\n  var storedOps = [];\n  storeOptions = storeOptions || {\n    force: false,\n    bufferMaxEntries: -1\n  }; // Internal state\n\n  this.s = {\n    storedOps: storedOps,\n    storeOptions: storeOptions,\n    topology: topology\n  };\n  Object.defineProperty(this, 'length', {\n    enumerable: true,\n    get: function () {\n      return self.s.storedOps.length;\n    }\n  });\n};\n\nStore.prototype.add = function (opType, ns, ops, options, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({\n      message: 'db closed by application',\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(MongoError.create({\n      message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries > 0 && this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(MongoError.create({\n        message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n        driver: true\n      }));\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({\n    t: opType,\n    n: ns,\n    o: ops,\n    op: options,\n    c: callback\n  });\n};\n\nStore.prototype.addObjectAndMethod = function (opType, object, method, params, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({\n      message: 'db closed by application',\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(MongoError.create({\n      message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries > 0 && this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(MongoError.create({\n        message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n        driver: true\n      }));\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({\n    t: opType,\n    m: method,\n    o: object,\n    p: params,\n    c: callback\n  });\n};\n\nStore.prototype.flush = function (err) {\n  while (this.s.storedOps.length > 0) {\n    this.s.storedOps.shift().c(err || MongoError.create({\n      message: f('no connection available for operation'),\n      driver: true\n    }));\n  }\n};\n\nvar primaryOptions = ['primary', 'primaryPreferred', 'nearest', 'secondaryPreferred'];\nvar secondaryOptions = ['secondary', 'secondaryPreferred'];\n\nStore.prototype.execute = function (options) {\n  options = options || {}; // Get current ops\n\n  var ops = this.s.storedOps; // Reset the ops\n\n  this.s.storedOps = []; // Unpack options\n\n  var executePrimary = typeof options.executePrimary === 'boolean' ? options.executePrimary : true;\n  var executeSecondary = typeof options.executeSecondary === 'boolean' ? options.executeSecondary : true; // Execute all the stored ops\n\n  while (ops.length > 0) {\n    var op = ops.shift();\n\n    if (op.t === 'cursor') {\n      if (executePrimary && executeSecondary) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (executePrimary && op.o.options && op.o.options.readPreference && primaryOptions.indexOf(op.o.options.readPreference.mode) !== -1) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (!executePrimary && executeSecondary && op.o.options && op.o.options.readPreference && secondaryOptions.indexOf(op.o.options.readPreference.mode) !== -1) {\n        op.o[op.m].apply(op.o, op.p);\n      }\n    } else if (op.t === 'auth') {\n      this.s.topology[op.t].apply(this.s.topology, op.o);\n    } else {\n      if (executePrimary && executeSecondary) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (executePrimary && op.op && op.op.readPreference && primaryOptions.indexOf(op.op.readPreference.mode) !== -1) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (!executePrimary && executeSecondary && op.op && op.op.readPreference && secondaryOptions.indexOf(op.op.readPreference.mode) !== -1) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      }\n    }\n  }\n};\n\nStore.prototype.all = function () {\n  return this.s.storedOps;\n}; // Server capabilities\n\n\nvar ServerCapabilities = function (ismaster) {\n  var setup_get_property = function (object, name, value) {\n    Object.defineProperty(object, name, {\n      enumerable: true,\n      get: function () {\n        return value;\n      }\n    });\n  }; // Capabilities\n\n\n  var aggregationCursor = false;\n  var writeCommands = false;\n  var textSearch = false;\n  var authCommands = false;\n  var listCollections = false;\n  var listIndexes = false;\n  var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;\n  var commandsTakeWriteConcern = false;\n  var commandsTakeCollation = false;\n\n  if (ismaster.minWireVersion >= 0) {\n    textSearch = true;\n  }\n\n  if (ismaster.maxWireVersion >= 1) {\n    aggregationCursor = true;\n    authCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 2) {\n    writeCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 3) {\n    listCollections = true;\n    listIndexes = true;\n  }\n\n  if (ismaster.maxWireVersion >= 5) {\n    commandsTakeWriteConcern = true;\n    commandsTakeCollation = true;\n  } // If no min or max wire version set to 0\n\n\n  if (ismaster.minWireVersion == null) {\n    ismaster.minWireVersion = 0;\n  }\n\n  if (ismaster.maxWireVersion == null) {\n    ismaster.maxWireVersion = 0;\n  } // Map up read only parameters\n\n\n  setup_get_property(this, 'hasAggregationCursor', aggregationCursor);\n  setup_get_property(this, 'hasWriteCommands', writeCommands);\n  setup_get_property(this, 'hasTextSearch', textSearch);\n  setup_get_property(this, 'hasAuthCommands', authCommands);\n  setup_get_property(this, 'hasListCollectionsCommand', listCollections);\n  setup_get_property(this, 'hasListIndexesCommand', listIndexes);\n  setup_get_property(this, 'minWireVersion', ismaster.minWireVersion);\n  setup_get_property(this, 'maxWireVersion', ismaster.maxWireVersion);\n  setup_get_property(this, 'maxNumberOfDocsInBatch', maxNumberOfDocsInBatch);\n  setup_get_property(this, 'commandsTakeWriteConcern', commandsTakeWriteConcern);\n  setup_get_property(this, 'commandsTakeCollation', commandsTakeCollation);\n};\n\nclass TopologyBase extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n  } // Sessions related methods\n\n\n  hasSessionSupport() {\n    return this.logicalSessionTimeoutMinutes != null;\n  }\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  endSessions(sessions, callback) {\n    return this.s.coreTopology.endSessions(sessions, callback);\n  }\n\n  get clientMetadata() {\n    return this.s.coreTopology.s.options.metadata;\n  } // Server capabilities\n\n\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.s.coreTopology.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.s.coreTopology.lastIsMaster());\n    return this.s.sCapabilities;\n  } // Command\n\n\n  command(ns, cmd, options, callback) {\n    this.s.coreTopology.command(ns.toString(), cmd, ReadPreference.translate(options), callback);\n  } // Insert\n\n\n  insert(ns, ops, options, callback) {\n    this.s.coreTopology.insert(ns.toString(), ops, options, callback);\n  } // Update\n\n\n  update(ns, ops, options, callback) {\n    this.s.coreTopology.update(ns.toString(), ops, options, callback);\n  } // Remove\n\n\n  remove(ns, ops, options, callback) {\n    this.s.coreTopology.remove(ns.toString(), ops, options, callback);\n  } // IsConnected\n\n\n  isConnected(options) {\n    options = options || {};\n    options = ReadPreference.translate(options);\n    return this.s.coreTopology.isConnected(options);\n  } // IsDestroyed\n\n\n  isDestroyed() {\n    return this.s.coreTopology.isDestroyed();\n  } // Cursor\n\n\n  cursor(ns, cmd, options) {\n    options = options || {};\n    options = ReadPreference.translate(options);\n    options.disconnectHandler = this.s.store;\n    options.topology = this;\n    return this.s.coreTopology.cursor(ns, cmd, options);\n  }\n\n  lastIsMaster() {\n    return this.s.coreTopology.lastIsMaster();\n  }\n\n  selectServer(selector, options, callback) {\n    return this.s.coreTopology.selectServer(selector, options, callback);\n  }\n  /**\n   * Unref all sockets\n   * @method\n   */\n\n\n  unref() {\n    return this.s.coreTopology.unref();\n  }\n  /**\n   * All raw connections\n   * @method\n   * @return {array}\n   */\n\n\n  connections() {\n    return this.s.coreTopology.connections();\n  }\n\n  close(forceClosed, callback) {\n    // If we have sessions, we want to individually move them to the session pool,\n    // and then send a single endSessions call.\n    this.s.sessions.forEach(session => session.endSession());\n\n    if (this.s.sessionPool) {\n      this.s.sessionPool.endAllPooledSessions();\n    } // We need to wash out all stored processes\n\n\n    if (forceClosed === true) {\n      this.s.storeOptions.force = forceClosed;\n      this.s.store.flush();\n    }\n\n    this.s.coreTopology.destroy({\n      force: typeof forceClosed === 'boolean' ? forceClosed : false\n    }, callback);\n  }\n\n} // Properties\n\n\nObject.defineProperty(TopologyBase.prototype, 'bson', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.s.bson;\n  }\n});\nObject.defineProperty(TopologyBase.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.parserType;\n  }\n});\nObject.defineProperty(TopologyBase.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.logicalSessionTimeoutMinutes;\n  }\n});\nObject.defineProperty(TopologyBase.prototype, 'type', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.type;\n  }\n});\nexports.Store = Store;\nexports.ServerCapabilities = ServerCapabilities;\nexports.TopologyBase = TopologyBase;","map":{"version":3,"names":["EventEmitter","require","MongoError","f","format","ReadPreference","ClientSession","Sessions","Store","topology","storeOptions","self","storedOps","force","bufferMaxEntries","s","Object","defineProperty","enumerable","get","length","prototype","add","opType","ns","ops","options","callback","create","message","driver","op","shift","c","push","t","n","o","addObjectAndMethod","object","method","params","m","p","flush","err","primaryOptions","secondaryOptions","execute","executePrimary","executeSecondary","apply","readPreference","indexOf","mode","all","ServerCapabilities","ismaster","setup_get_property","name","value","aggregationCursor","writeCommands","textSearch","authCommands","listCollections","listIndexes","maxNumberOfDocsInBatch","maxWriteBatchSize","commandsTakeWriteConcern","commandsTakeCollation","minWireVersion","maxWireVersion","TopologyBase","constructor","setMaxListeners","Infinity","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","session","sessionPool","once","sessions","delete","endSessions","coreTopology","clientMetadata","metadata","capabilities","sCapabilities","lastIsMaster","command","cmd","toString","translate","insert","update","remove","isConnected","isDestroyed","cursor","disconnectHandler","store","selectServer","selector","unref","connections","close","forceClosed","forEach","endSession","endAllPooledSessions","destroy","bson","parserType","type","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/topologies/topology_base.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events'),\n  MongoError = require('../core').MongoError,\n  f = require('util').format,\n  ReadPreference = require('../core').ReadPreference,\n  ClientSession = require('../core').Sessions.ClientSession;\n\n// The store of ops\nvar Store = function(topology, storeOptions) {\n  var self = this;\n  var storedOps = [];\n  storeOptions = storeOptions || { force: false, bufferMaxEntries: -1 };\n\n  // Internal state\n  this.s = {\n    storedOps: storedOps,\n    storeOptions: storeOptions,\n    topology: topology\n  };\n\n  Object.defineProperty(this, 'length', {\n    enumerable: true,\n    get: function() {\n      return self.s.storedOps.length;\n    }\n  });\n};\n\nStore.prototype.add = function(opType, ns, ops, options, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(\n      MongoError.create({\n        message: f(\n          'no connection available for operation and number of stored operation > %s',\n          this.s.storeOptions.bufferMaxEntries\n        ),\n        driver: true\n      })\n    );\n  }\n\n  if (\n    this.s.storeOptions.bufferMaxEntries > 0 &&\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\n  ) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(\n        MongoError.create({\n          message: f(\n            'no connection available for operation and number of stored operation > %s',\n            this.s.storeOptions.bufferMaxEntries\n          ),\n          driver: true\n        })\n      );\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({ t: opType, n: ns, o: ops, op: options, c: callback });\n};\n\nStore.prototype.addObjectAndMethod = function(opType, object, method, params, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(\n      MongoError.create({\n        message: f(\n          'no connection available for operation and number of stored operation > %s',\n          this.s.storeOptions.bufferMaxEntries\n        ),\n        driver: true\n      })\n    );\n  }\n\n  if (\n    this.s.storeOptions.bufferMaxEntries > 0 &&\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\n  ) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(\n        MongoError.create({\n          message: f(\n            'no connection available for operation and number of stored operation > %s',\n            this.s.storeOptions.bufferMaxEntries\n          ),\n          driver: true\n        })\n      );\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({ t: opType, m: method, o: object, p: params, c: callback });\n};\n\nStore.prototype.flush = function(err) {\n  while (this.s.storedOps.length > 0) {\n    this.s.storedOps\n      .shift()\n      .c(\n        err ||\n          MongoError.create({ message: f('no connection available for operation'), driver: true })\n      );\n  }\n};\n\nvar primaryOptions = ['primary', 'primaryPreferred', 'nearest', 'secondaryPreferred'];\nvar secondaryOptions = ['secondary', 'secondaryPreferred'];\n\nStore.prototype.execute = function(options) {\n  options = options || {};\n  // Get current ops\n  var ops = this.s.storedOps;\n  // Reset the ops\n  this.s.storedOps = [];\n\n  // Unpack options\n  var executePrimary = typeof options.executePrimary === 'boolean' ? options.executePrimary : true;\n  var executeSecondary =\n    typeof options.executeSecondary === 'boolean' ? options.executeSecondary : true;\n\n  // Execute all the stored ops\n  while (ops.length > 0) {\n    var op = ops.shift();\n\n    if (op.t === 'cursor') {\n      if (executePrimary && executeSecondary) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (\n        executePrimary &&\n        op.o.options &&\n        op.o.options.readPreference &&\n        primaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\n      ) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (\n        !executePrimary &&\n        executeSecondary &&\n        op.o.options &&\n        op.o.options.readPreference &&\n        secondaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\n      ) {\n        op.o[op.m].apply(op.o, op.p);\n      }\n    } else if (op.t === 'auth') {\n      this.s.topology[op.t].apply(this.s.topology, op.o);\n    } else {\n      if (executePrimary && executeSecondary) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (\n        executePrimary &&\n        op.op &&\n        op.op.readPreference &&\n        primaryOptions.indexOf(op.op.readPreference.mode) !== -1\n      ) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (\n        !executePrimary &&\n        executeSecondary &&\n        op.op &&\n        op.op.readPreference &&\n        secondaryOptions.indexOf(op.op.readPreference.mode) !== -1\n      ) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      }\n    }\n  }\n};\n\nStore.prototype.all = function() {\n  return this.s.storedOps;\n};\n\n// Server capabilities\nvar ServerCapabilities = function(ismaster) {\n  var setup_get_property = function(object, name, value) {\n    Object.defineProperty(object, name, {\n      enumerable: true,\n      get: function() {\n        return value;\n      }\n    });\n  };\n\n  // Capabilities\n  var aggregationCursor = false;\n  var writeCommands = false;\n  var textSearch = false;\n  var authCommands = false;\n  var listCollections = false;\n  var listIndexes = false;\n  var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;\n  var commandsTakeWriteConcern = false;\n  var commandsTakeCollation = false;\n\n  if (ismaster.minWireVersion >= 0) {\n    textSearch = true;\n  }\n\n  if (ismaster.maxWireVersion >= 1) {\n    aggregationCursor = true;\n    authCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 2) {\n    writeCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 3) {\n    listCollections = true;\n    listIndexes = true;\n  }\n\n  if (ismaster.maxWireVersion >= 5) {\n    commandsTakeWriteConcern = true;\n    commandsTakeCollation = true;\n  }\n\n  // If no min or max wire version set to 0\n  if (ismaster.minWireVersion == null) {\n    ismaster.minWireVersion = 0;\n  }\n\n  if (ismaster.maxWireVersion == null) {\n    ismaster.maxWireVersion = 0;\n  }\n\n  // Map up read only parameters\n  setup_get_property(this, 'hasAggregationCursor', aggregationCursor);\n  setup_get_property(this, 'hasWriteCommands', writeCommands);\n  setup_get_property(this, 'hasTextSearch', textSearch);\n  setup_get_property(this, 'hasAuthCommands', authCommands);\n  setup_get_property(this, 'hasListCollectionsCommand', listCollections);\n  setup_get_property(this, 'hasListIndexesCommand', listIndexes);\n  setup_get_property(this, 'minWireVersion', ismaster.minWireVersion);\n  setup_get_property(this, 'maxWireVersion', ismaster.maxWireVersion);\n  setup_get_property(this, 'maxNumberOfDocsInBatch', maxNumberOfDocsInBatch);\n  setup_get_property(this, 'commandsTakeWriteConcern', commandsTakeWriteConcern);\n  setup_get_property(this, 'commandsTakeCollation', commandsTakeCollation);\n};\n\nclass TopologyBase extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n  }\n\n  // Sessions related methods\n  hasSessionSupport() {\n    return this.logicalSessionTimeoutMinutes != null;\n  }\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  endSessions(sessions, callback) {\n    return this.s.coreTopology.endSessions(sessions, callback);\n  }\n\n  get clientMetadata() {\n    return this.s.coreTopology.s.options.metadata;\n  }\n\n  // Server capabilities\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.s.coreTopology.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.s.coreTopology.lastIsMaster());\n    return this.s.sCapabilities;\n  }\n\n  // Command\n  command(ns, cmd, options, callback) {\n    this.s.coreTopology.command(ns.toString(), cmd, ReadPreference.translate(options), callback);\n  }\n\n  // Insert\n  insert(ns, ops, options, callback) {\n    this.s.coreTopology.insert(ns.toString(), ops, options, callback);\n  }\n\n  // Update\n  update(ns, ops, options, callback) {\n    this.s.coreTopology.update(ns.toString(), ops, options, callback);\n  }\n\n  // Remove\n  remove(ns, ops, options, callback) {\n    this.s.coreTopology.remove(ns.toString(), ops, options, callback);\n  }\n\n  // IsConnected\n  isConnected(options) {\n    options = options || {};\n    options = ReadPreference.translate(options);\n\n    return this.s.coreTopology.isConnected(options);\n  }\n\n  // IsDestroyed\n  isDestroyed() {\n    return this.s.coreTopology.isDestroyed();\n  }\n\n  // Cursor\n  cursor(ns, cmd, options) {\n    options = options || {};\n    options = ReadPreference.translate(options);\n    options.disconnectHandler = this.s.store;\n    options.topology = this;\n\n    return this.s.coreTopology.cursor(ns, cmd, options);\n  }\n\n  lastIsMaster() {\n    return this.s.coreTopology.lastIsMaster();\n  }\n\n  selectServer(selector, options, callback) {\n    return this.s.coreTopology.selectServer(selector, options, callback);\n  }\n\n  /**\n   * Unref all sockets\n   * @method\n   */\n  unref() {\n    return this.s.coreTopology.unref();\n  }\n\n  /**\n   * All raw connections\n   * @method\n   * @return {array}\n   */\n  connections() {\n    return this.s.coreTopology.connections();\n  }\n\n  close(forceClosed, callback) {\n    // If we have sessions, we want to individually move them to the session pool,\n    // and then send a single endSessions call.\n    this.s.sessions.forEach(session => session.endSession());\n\n    if (this.s.sessionPool) {\n      this.s.sessionPool.endAllPooledSessions();\n    }\n\n    // We need to wash out all stored processes\n    if (forceClosed === true) {\n      this.s.storeOptions.force = forceClosed;\n      this.s.store.flush();\n    }\n\n    this.s.coreTopology.destroy(\n      {\n        force: typeof forceClosed === 'boolean' ? forceClosed : false\n      },\n      callback\n    );\n  }\n}\n\n// Properties\nObject.defineProperty(TopologyBase.prototype, 'bson', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.bson;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.parserType;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.logicalSessionTimeoutMinutes;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.type;\n  }\n});\n\nexports.Store = Store;\nexports.ServerCapabilities = ServerCapabilities;\nexports.TopologyBase = TopologyBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}