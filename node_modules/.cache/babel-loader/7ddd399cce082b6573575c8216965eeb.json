{"ast":null,"code":"'use strict';\n\nconst parseServerType = require('../core/sdam/server_description').parseServerType;\n\nconst RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', '__nodejs_mock_server__'];\n\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = parseServerType(null);\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.compressors = options && options.compression && Array.isArray(options.compression.compressors) ? options.compression.compressors : [];\n  }\n\n  receiveResponse(response) {\n    this.type = parseServerType(response);\n    RESPONSE_FIELDS.forEach(field => {\n      if (typeof response[field] !== 'undefined') {\n        this[field] = response[field];\n      }\n    });\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression.indexOf(c) !== -1)[0];\n    }\n  }\n\n}\n\nmodule.exports = {\n  StreamDescription\n};","map":{"version":3,"names":["parseServerType","require","RESPONSE_FIELDS","StreamDescription","constructor","address","options","type","minWireVersion","undefined","maxWireVersion","maxBsonObjectSize","maxMessageSizeBytes","maxWriteBatchSize","compressors","compression","Array","isArray","receiveResponse","response","forEach","field","compressor","filter","c","indexOf","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/cmap/stream_description.js"],"sourcesContent":["'use strict';\nconst parseServerType = require('../core/sdam/server_description').parseServerType;\n\nconst RESPONSE_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  '__nodejs_mock_server__'\n];\n\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = parseServerType(null);\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.compressors =\n      options && options.compression && Array.isArray(options.compression.compressors)\n        ? options.compression.compressors\n        : [];\n  }\n\n  receiveResponse(response) {\n    this.type = parseServerType(response);\n\n    RESPONSE_FIELDS.forEach(field => {\n      if (typeof response[field] !== 'undefined') {\n        this[field] = response[field];\n      }\n    });\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression.indexOf(c) !== -1)[0];\n    }\n  }\n}\n\nmodule.exports = {\n  StreamDescription\n};\n"],"mappings":"AAAA;;AACA,MAAMA,eAAe,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CD,eAAnE;;AAEA,MAAME,eAAe,GAAG,CACtB,gBADsB,EAEtB,gBAFsB,EAGtB,mBAHsB,EAItB,qBAJsB,EAKtB,mBALsB,EAMtB,wBANsB,CAAxB;;AASA,MAAMC,iBAAN,CAAwB;EACtBC,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB;IAC5B,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,IAAL,GAAYP,eAAe,CAAC,IAAD,CAA3B;IACA,KAAKQ,cAAL,GAAsBC,SAAtB;IACA,KAAKC,cAAL,GAAsBD,SAAtB;IACA,KAAKE,iBAAL,GAAyB,QAAzB;IACA,KAAKC,mBAAL,GAA2B,QAA3B;IACA,KAAKC,iBAAL,GAAyB,MAAzB;IACA,KAAKC,WAAL,GACER,OAAO,IAAIA,OAAO,CAACS,WAAnB,IAAkCC,KAAK,CAACC,OAAN,CAAcX,OAAO,CAACS,WAAR,CAAoBD,WAAlC,CAAlC,GACIR,OAAO,CAACS,WAAR,CAAoBD,WADxB,GAEI,EAHN;EAID;;EAEDI,eAAe,CAACC,QAAD,EAAW;IACxB,KAAKZ,IAAL,GAAYP,eAAe,CAACmB,QAAD,CAA3B;IAEAjB,eAAe,CAACkB,OAAhB,CAAwBC,KAAK,IAAI;MAC/B,IAAI,OAAOF,QAAQ,CAACE,KAAD,CAAf,KAA2B,WAA/B,EAA4C;QAC1C,KAAKA,KAAL,IAAcF,QAAQ,CAACE,KAAD,CAAtB;MACD;IACF,CAJD;;IAMA,IAAIF,QAAQ,CAACJ,WAAb,EAA0B;MACxB,KAAKO,UAAL,GAAkB,KAAKR,WAAL,CAAiBS,MAAjB,CAAwBC,CAAC,IAAIL,QAAQ,CAACJ,WAAT,CAAqBU,OAArB,CAA6BD,CAA7B,MAAoC,CAAC,CAAlE,EAAqE,CAArE,CAAlB;IACD;EACF;;AA3BqB;;AA8BxBE,MAAM,CAACC,OAAP,GAAiB;EACfxB;AADe,CAAjB"},"metadata":{},"sourceType":"script"}