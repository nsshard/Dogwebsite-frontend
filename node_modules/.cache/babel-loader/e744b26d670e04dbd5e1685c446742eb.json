{"ast":null,"code":"'use strict';\n\nconst MongoDB = require('mongodb');\n\nconst MongoClient = MongoDB.MongoClient;\n\nconst debug = require('debug')('koa-mongo');\n\nconst genericPool = require('generic-pool');\n\nconst muri = require('muri');\n\nconst defaultOptions = {\n  host: 'localhost',\n  port: 27017,\n  db: 'test',\n  authSource: 'admin',\n  max: 100,\n  min: 1,\n  acquireTimeoutMillis: 100\n};\n\nfunction mongo(connOptions) {\n  let confOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  connOptions = Object.assign({}, defaultOptions, connOptions);\n  let mongoUrl = connOptions.uri || connOptions.url;\n  let dbName = connOptions.db;\n\n  if (!mongoUrl) {\n    if (connOptions.user && connOptions.pass) {\n      mongoUrl = `mongodb://${connOptions.user}:${connOptions.pass}@${connOptions.host}:${connOptions.port}/${connOptions.db}?authSource=${connOptions.authSource}`;\n    } else {\n      mongoUrl = `mongodb://${connOptions.host}:${connOptions.port}/${connOptions.db}`;\n    }\n  } else {\n    dbName = muri(mongoUrl.replace('+srv', '')).db;\n  }\n\n  const mongoPool = genericPool.createPool({\n    create: () => MongoClient.connect(mongoUrl, Object.assign({\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    }, confOptions)).then(client => {\n      debug('Successfully connected to: ' + mongoUrl);\n      return client;\n    }).catch(err => {\n      debug('Failed to connect to: ' + mongoUrl);\n      throw err;\n    }),\n    destroy: client => client.close()\n  }, connOptions);\n\n  async function acquire() {\n    const resource = await mongoPool.acquire();\n    debug('Acquire one connection (min: %s, max: %s, poolSize: %s)', connOptions.min, connOptions.max, mongoPool.size);\n    return resource;\n  }\n\n  async function release(resource) {\n    if (resource && !resource.isConnected()) {\n      await mongoPool.destroy(resource);\n    } else {\n      await mongoPool.release(resource);\n    }\n\n    debug('Release one connection (min: %s, max: %s, poolSize: %s)', connOptions.min, connOptions.max, mongoPool.size);\n  }\n\n  return async function koaMongo(ctx, next) {\n    ctx.mongo = await acquire();\n    ctx.db = ctx.mongo.db(dbName);\n\n    try {\n      await next();\n    } finally {\n      await release(ctx.mongo);\n    }\n  };\n}\n\nmodule.exports = mongo;\nObject.assign(module.exports, MongoDB);","map":{"version":3,"names":["MongoDB","require","MongoClient","debug","genericPool","muri","defaultOptions","host","port","db","authSource","max","min","acquireTimeoutMillis","mongo","connOptions","confOptions","Object","assign","mongoUrl","uri","url","dbName","user","pass","replace","mongoPool","createPool","create","connect","useNewUrlParser","useUnifiedTopology","then","client","catch","err","destroy","close","acquire","resource","size","release","isConnected","koaMongo","ctx","next","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/index.js"],"sourcesContent":["'use strict'\n\nconst MongoDB = require('mongodb')\nconst MongoClient = MongoDB.MongoClient\nconst debug = require('debug')('koa-mongo')\nconst genericPool = require('generic-pool')\nconst muri = require('muri')\n\nconst defaultOptions = {\n  host: 'localhost',\n  port: 27017,\n  db: 'test',\n  authSource: 'admin',\n  max: 100,\n  min: 1,\n  acquireTimeoutMillis: 100\n}\n\nfunction mongo (connOptions, confOptions = {}) {\n  connOptions = Object.assign({}, defaultOptions, connOptions)\n  let mongoUrl = connOptions.uri || connOptions.url\n  let dbName = connOptions.db\n  if (!mongoUrl) {\n    if (connOptions.user && connOptions.pass) {\n      mongoUrl = `mongodb://${connOptions.user}:${connOptions.pass}@${connOptions.host}:${connOptions.port}/${connOptions.db}?authSource=${connOptions.authSource}`\n    } else {\n      mongoUrl = `mongodb://${connOptions.host}:${connOptions.port}/${connOptions.db}`\n    }\n  } else {\n    dbName = muri(mongoUrl.replace('+srv', '')).db\n  }\n\n  const mongoPool = genericPool.createPool({\n    create: () => MongoClient.connect(mongoUrl, Object.assign({\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    }, confOptions))\n      .then(client => {\n        debug('Successfully connected to: ' + mongoUrl)\n        return client\n      })\n      .catch(err => {\n        debug('Failed to connect to: ' + mongoUrl)\n        throw err\n      }),\n    destroy: client => client.close()\n  }, connOptions)\n\n  async function acquire () {\n    const resource = await mongoPool.acquire()\n    debug('Acquire one connection (min: %s, max: %s, poolSize: %s)', connOptions.min, connOptions.max, mongoPool.size)\n\n    return resource\n  }\n\n  async function release (resource) {\n    if (resource && !resource.isConnected()) {\n      await mongoPool.destroy(resource)\n    } else {\n      await mongoPool.release(resource)\n    }\n    debug('Release one connection (min: %s, max: %s, poolSize: %s)', connOptions.min, connOptions.max, mongoPool.size)\n  }\n\n  return async function koaMongo (ctx, next) {\n    ctx.mongo = await acquire()\n    ctx.db = ctx.mongo.db(dbName)\n    try {\n      await next()\n    } finally {\n      await release(ctx.mongo)\n    }\n  }\n}\n\nmodule.exports = mongo\nObject.assign(module.exports, MongoDB)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}