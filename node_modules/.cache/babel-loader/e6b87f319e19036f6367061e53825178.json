{"ast":null,"code":"const crypto = require('crypto');\n\nconst LocalStrategy = require('passport-local').Strategy;\n\nconst pbkdf2 = require('./lib/pbkdf2');\n\nconst errors = require('./lib/errors');\n\nconst authenticate = require('./lib/authenticate');\n\nmodule.exports = function (schema, options) {\n  options = options || {};\n  options.saltlen = options.saltlen || 32;\n  options.iterations = options.iterations || 25000;\n  options.keylen = options.keylen || 512;\n  options.encoding = options.encoding || 'hex';\n  options.digestAlgorithm = options.digestAlgorithm || 'sha256'; // To get a list of supported hashes use crypto.getHashes()\n\n  function defaultPasswordValidator(password, cb) {\n    cb(null);\n  }\n\n  function defaultPasswordValidatorAsync(password) {\n    return new Promise((resolve, reject) => {\n      options.passwordValidator(password, err => err ? reject(err) : resolve());\n    });\n  }\n\n  options.passwordValidator = options.passwordValidator || defaultPasswordValidator;\n  options.passwordValidatorAsync = options.passwordValidatorAsync || defaultPasswordValidatorAsync; // Populate field names with defaults if not set\n\n  options.usernameField = options.usernameField || 'username';\n  options.usernameUnique = options.usernameUnique === undefined ? true : options.usernameUnique; // Populate username query fields with defaults if not set,\n  // otherwise add username field to query fields.\n\n  if (options.usernameQueryFields) {\n    options.usernameQueryFields.push(options.usernameField);\n  } else {\n    options.usernameQueryFields = [options.usernameField];\n  } // option to find username case insensitively\n\n\n  options.usernameCaseInsensitive = Boolean(options.usernameCaseInsensitive || false); // option to convert username to lowercase when finding\n\n  options.usernameLowerCase = options.usernameLowerCase || false;\n  options.hashField = options.hashField || 'hash';\n  options.saltField = options.saltField || 'salt';\n\n  if (options.limitAttempts) {\n    options.lastLoginField = options.lastLoginField || 'last';\n    options.attemptsField = options.attemptsField || 'attempts';\n    options.interval = options.interval || 100; // 100 ms\n\n    options.maxInterval = options.maxInterval || 300000; // 5 min\n\n    options.maxAttempts = options.maxAttempts || Infinity;\n  }\n\n  options.findByUsername = options.findByUsername || function (model, queryParameters) {\n    return model.findOne(queryParameters);\n  };\n\n  options.errorMessages = options.errorMessages || {};\n  options.errorMessages.MissingPasswordError = options.errorMessages.MissingPasswordError || 'No password was given';\n  options.errorMessages.AttemptTooSoonError = options.errorMessages.AttemptTooSoonError || 'Account is currently locked. Try again later';\n  options.errorMessages.TooManyAttemptsError = options.errorMessages.TooManyAttemptsError || 'Account locked due to too many failed login attempts';\n  options.errorMessages.NoSaltValueStoredError = options.errorMessages.NoSaltValueStoredError || 'Authentication not possible. No salt value stored';\n  options.errorMessages.IncorrectPasswordError = options.errorMessages.IncorrectPasswordError || 'Password or username is incorrect';\n  options.errorMessages.IncorrectUsernameError = options.errorMessages.IncorrectUsernameError || 'Password or username is incorrect';\n  options.errorMessages.MissingUsernameError = options.errorMessages.MissingUsernameError || 'No username was given';\n  options.errorMessages.UserExistsError = options.errorMessages.UserExistsError || 'A user with the given username is already registered';\n  const schemaFields = {};\n\n  if (!schema.path(options.usernameField)) {\n    schemaFields[options.usernameField] = {\n      type: String,\n      unique: options.usernameUnique\n    };\n  }\n\n  schemaFields[options.hashField] = {\n    type: String,\n    select: false\n  };\n  schemaFields[options.saltField] = {\n    type: String,\n    select: false\n  };\n\n  if (options.limitAttempts) {\n    schemaFields[options.attemptsField] = {\n      type: Number,\n      default: 0\n    };\n    schemaFields[options.lastLoginField] = {\n      type: Date,\n      default: Date.now\n    };\n  }\n\n  schema.add(schemaFields);\n  schema.pre('save', function (next) {\n    if (options.usernameLowerCase && this[options.usernameField]) {\n      this[options.usernameField] = this[options.usernameField].toLowerCase();\n    }\n\n    next();\n  });\n\n  schema.methods.setPassword = function (password, cb) {\n    const promise = Promise.resolve().then(() => {\n      if (!password) {\n        throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n      }\n    }).then(() => options.passwordValidatorAsync(password)).then(() => randomBytes(options.saltlen)).then(saltBuffer => saltBuffer.toString(options.encoding)).then(salt => {\n      this.set(options.saltField, salt);\n      return salt;\n    }).then(salt => pbkdf2Promisified(password, salt, options)).then(hashRaw => {\n      this.set(options.hashField, Buffer.from(hashRaw, 'binary').toString(options.encoding));\n    }).then(() => this);\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then(result => cb(null, result)).catch(err => cb(err));\n  };\n\n  schema.methods.changePassword = function (oldPassword, newPassword, cb) {\n    const promise = Promise.resolve().then(() => {\n      if (!oldPassword || !newPassword) {\n        throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n      }\n    }).then(() => this.authenticate(oldPassword)).then(_ref => {\n      let {\n        user,\n        error\n      } = _ref;\n\n      if (!user) {\n        throw error;\n      }\n    }).then(() => this.setPassword(newPassword)).then(() => this.save()).then(() => this);\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then(result => cb(null, result)).catch(err => cb(err));\n  };\n\n  schema.methods.authenticate = function (password, cb) {\n    const promise = Promise.resolve().then(() => {\n      if (this.get(options.saltField)) {\n        return authenticate(this, password, options);\n      }\n\n      return this.constructor.findByUsername(this.get(options.usernameField), true).then(user => {\n        if (user) {\n          return authenticate(user, password, options);\n        }\n\n        return {\n          user: false,\n          error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError)\n        };\n      });\n    });\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then(_ref2 => {\n      let {\n        user,\n        error\n      } = _ref2;\n      return cb(null, user, error);\n    }).catch(err => cb(err));\n  };\n\n  if (options.limitAttempts) {\n    schema.methods.resetAttempts = function (cb) {\n      const promise = Promise.resolve().then(() => {\n        this.set(options.attemptsField, 0);\n        return this.save();\n      });\n\n      if (!cb) {\n        return promise;\n      }\n\n      promise.then(result => cb(null, result)).catch(err => cb(err));\n    };\n  } // Passport Local Interface\n\n\n  schema.statics.authenticate = function () {\n    return (username, password, cb) => {\n      const promise = Promise.resolve().then(() => this.findByUsername(username, true)).then(user => {\n        if (user) {\n          return user.authenticate(password);\n        }\n\n        return {\n          user: false,\n          error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError)\n        };\n      });\n\n      if (!cb) {\n        return promise;\n      }\n\n      promise.then(_ref3 => {\n        let {\n          user,\n          error\n        } = _ref3;\n        return cb(null, user, error);\n      }).catch(err => cb(err));\n    };\n  }; // Passport Interface\n\n\n  schema.statics.serializeUser = function () {\n    return function (user, cb) {\n      cb(null, user.get(options.usernameField));\n    };\n  };\n\n  schema.statics.deserializeUser = function () {\n    return (username, cb) => {\n      this.findByUsername(username, cb);\n    };\n  };\n\n  schema.statics.register = function (user, password, cb) {\n    // Create an instance of this in case user isn't already an instance\n    if (!(user instanceof this)) {\n      user = new this(user);\n    }\n\n    const promise = Promise.resolve().then(() => {\n      if (!user.get(options.usernameField)) {\n        throw new errors.MissingUsernameError(options.errorMessages.MissingUsernameError);\n      }\n    }).then(() => this.findByUsername(user.get(options.usernameField))).then(existingUser => {\n      if (existingUser) {\n        throw new errors.UserExistsError(options.errorMessages.UserExistsError);\n      }\n    }).then(() => user.setPassword(password)).then(() => user.save());\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then(result => cb(null, result)).catch(err => cb(err));\n  };\n\n  schema.statics.findByUsername = function (username, opts, cb) {\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    if (typeof opts == 'boolean') {\n      opts = {\n        selectHashSaltFields: opts\n      };\n    }\n\n    opts = opts || {};\n    opts.selectHashSaltFields = !!opts.selectHashSaltFields; // if specified, convert the username to lowercase\n\n    if (username !== undefined && options.usernameLowerCase) {\n      username = username.toLowerCase();\n    } // escape regex tokens\n\n\n    if (username !== undefined && options.usernameCaseInsensitive) {\n      username = username.replace(/[!#$()*+\\-./:<=>?[\\\\\\]^{|}]/g, '\\\\$&');\n    } // Add each username query field\n\n\n    const queryOrParameters = [];\n\n    for (let i = 0; i < options.usernameQueryFields.length; i++) {\n      const parameter = {};\n      parameter[options.usernameQueryFields[i]] = options.usernameCaseInsensitive ? new RegExp(`^${username}$`, 'i') : username;\n      queryOrParameters.push(parameter);\n    }\n\n    const query = options.findByUsername(this, {\n      $or: queryOrParameters\n    });\n\n    if (opts.selectHashSaltFields) {\n      query.select('+' + options.hashField + ' +' + options.saltField);\n    }\n\n    if (options.selectFields) {\n      query.select(options.selectFields);\n    }\n\n    if (options.populateFields) {\n      query.populate(options.populateFields);\n    }\n\n    if (cb) {\n      query.exec(cb);\n      return;\n    }\n\n    return query;\n  };\n\n  schema.statics.createStrategy = function () {\n    return new LocalStrategy(options, this.authenticate());\n  };\n};\n\nfunction pbkdf2Promisified(password, salt, options) {\n  return new Promise((resolve, reject) => pbkdf2(password, salt, options, (err, hashRaw) => err ? reject(err) : resolve(hashRaw)));\n}\n\nfunction randomBytes(saltlen) {\n  return new Promise((resolve, reject) => crypto.randomBytes(saltlen, (err, saltBuffer) => err ? reject(err) : resolve(saltBuffer)));\n}\n\nmodule.exports.errors = errors;","map":{"version":3,"names":["crypto","require","LocalStrategy","Strategy","pbkdf2","errors","authenticate","module","exports","schema","options","saltlen","iterations","keylen","encoding","digestAlgorithm","defaultPasswordValidator","password","cb","defaultPasswordValidatorAsync","Promise","resolve","reject","passwordValidator","err","passwordValidatorAsync","usernameField","usernameUnique","undefined","usernameQueryFields","push","usernameCaseInsensitive","Boolean","usernameLowerCase","hashField","saltField","limitAttempts","lastLoginField","attemptsField","interval","maxInterval","maxAttempts","Infinity","findByUsername","model","queryParameters","findOne","errorMessages","MissingPasswordError","AttemptTooSoonError","TooManyAttemptsError","NoSaltValueStoredError","IncorrectPasswordError","IncorrectUsernameError","MissingUsernameError","UserExistsError","schemaFields","path","type","String","unique","select","Number","default","Date","now","add","pre","next","toLowerCase","methods","setPassword","promise","then","randomBytes","saltBuffer","toString","salt","set","pbkdf2Promisified","hashRaw","Buffer","from","result","catch","changePassword","oldPassword","newPassword","user","error","save","get","constructor","resetAttempts","statics","username","serializeUser","deserializeUser","register","existingUser","opts","selectHashSaltFields","replace","queryOrParameters","i","length","parameter","RegExp","query","$or","selectFields","populateFields","populate","exec","createStrategy"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/passport-local-mongoose/index.js"],"sourcesContent":["const crypto = require('crypto');\nconst LocalStrategy = require('passport-local').Strategy;\n\nconst pbkdf2 = require('./lib/pbkdf2');\nconst errors = require('./lib/errors');\nconst authenticate = require('./lib/authenticate');\n\nmodule.exports = function (schema, options) {\n  options = options || {};\n  options.saltlen = options.saltlen || 32;\n  options.iterations = options.iterations || 25000;\n  options.keylen = options.keylen || 512;\n  options.encoding = options.encoding || 'hex';\n  options.digestAlgorithm = options.digestAlgorithm || 'sha256'; // To get a list of supported hashes use crypto.getHashes()\n\n  function defaultPasswordValidator(password, cb) {\n    cb(null);\n  }\n\n  function defaultPasswordValidatorAsync(password) {\n    return new Promise((resolve, reject) => {\n      options.passwordValidator(password, (err) => (err ? reject(err) : resolve()));\n    });\n  }\n\n  options.passwordValidator = options.passwordValidator || defaultPasswordValidator;\n  options.passwordValidatorAsync = options.passwordValidatorAsync || defaultPasswordValidatorAsync;\n\n  // Populate field names with defaults if not set\n  options.usernameField = options.usernameField || 'username';\n  options.usernameUnique = options.usernameUnique === undefined ? true : options.usernameUnique;\n\n  // Populate username query fields with defaults if not set,\n  // otherwise add username field to query fields.\n  if (options.usernameQueryFields) {\n    options.usernameQueryFields.push(options.usernameField);\n  } else {\n    options.usernameQueryFields = [options.usernameField];\n  }\n\n  // option to find username case insensitively\n  options.usernameCaseInsensitive = Boolean(options.usernameCaseInsensitive || false);\n\n  // option to convert username to lowercase when finding\n  options.usernameLowerCase = options.usernameLowerCase || false;\n\n  options.hashField = options.hashField || 'hash';\n  options.saltField = options.saltField || 'salt';\n\n  if (options.limitAttempts) {\n    options.lastLoginField = options.lastLoginField || 'last';\n    options.attemptsField = options.attemptsField || 'attempts';\n    options.interval = options.interval || 100; // 100 ms\n    options.maxInterval = options.maxInterval || 300000; // 5 min\n    options.maxAttempts = options.maxAttempts || Infinity;\n  }\n\n  options.findByUsername =\n    options.findByUsername ||\n    function (model, queryParameters) {\n      return model.findOne(queryParameters);\n    };\n\n  options.errorMessages = options.errorMessages || {};\n  options.errorMessages.MissingPasswordError = options.errorMessages.MissingPasswordError || 'No password was given';\n  options.errorMessages.AttemptTooSoonError = options.errorMessages.AttemptTooSoonError || 'Account is currently locked. Try again later';\n  options.errorMessages.TooManyAttemptsError =\n    options.errorMessages.TooManyAttemptsError || 'Account locked due to too many failed login attempts';\n  options.errorMessages.NoSaltValueStoredError =\n    options.errorMessages.NoSaltValueStoredError || 'Authentication not possible. No salt value stored';\n  options.errorMessages.IncorrectPasswordError = options.errorMessages.IncorrectPasswordError || 'Password or username is incorrect';\n  options.errorMessages.IncorrectUsernameError = options.errorMessages.IncorrectUsernameError || 'Password or username is incorrect';\n  options.errorMessages.MissingUsernameError = options.errorMessages.MissingUsernameError || 'No username was given';\n  options.errorMessages.UserExistsError = options.errorMessages.UserExistsError || 'A user with the given username is already registered';\n\n  const schemaFields = {};\n\n  if (!schema.path(options.usernameField)) {\n    schemaFields[options.usernameField] = { type: String, unique: options.usernameUnique };\n  }\n  schemaFields[options.hashField] = { type: String, select: false };\n  schemaFields[options.saltField] = { type: String, select: false };\n\n  if (options.limitAttempts) {\n    schemaFields[options.attemptsField] = { type: Number, default: 0 };\n    schemaFields[options.lastLoginField] = { type: Date, default: Date.now };\n  }\n\n  schema.add(schemaFields);\n\n  schema.pre('save', function (next) {\n    if (options.usernameLowerCase && this[options.usernameField]) {\n      this[options.usernameField] = this[options.usernameField].toLowerCase();\n    }\n\n    next();\n  });\n\n  schema.methods.setPassword = function (password, cb) {\n    const promise = Promise.resolve()\n      .then(() => {\n        if (!password) {\n          throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n        }\n      })\n      .then(() => options.passwordValidatorAsync(password))\n      .then(() => randomBytes(options.saltlen))\n      .then((saltBuffer) => saltBuffer.toString(options.encoding))\n      .then((salt) => {\n        this.set(options.saltField, salt);\n\n        return salt;\n      })\n      .then((salt) => pbkdf2Promisified(password, salt, options))\n      .then((hashRaw) => {\n        this.set(options.hashField, Buffer.from(hashRaw, 'binary').toString(options.encoding));\n      })\n      .then(() => this);\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then((result) => cb(null, result)).catch((err) => cb(err));\n  };\n\n  schema.methods.changePassword = function (oldPassword, newPassword, cb) {\n    const promise = Promise.resolve()\n      .then(() => {\n        if (!oldPassword || !newPassword) {\n          throw new errors.MissingPasswordError(options.errorMessages.MissingPasswordError);\n        }\n      })\n      .then(() => this.authenticate(oldPassword))\n      .then(({ user, error }) => {\n        if (!user) {\n          throw error;\n        }\n      })\n      .then(() => this.setPassword(newPassword))\n      .then(() => this.save())\n      .then(() => this);\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then((result) => cb(null, result)).catch((err) => cb(err));\n  };\n\n  schema.methods.authenticate = function (password, cb) {\n    const promise = Promise.resolve().then(() => {\n      if (this.get(options.saltField)) {\n        return authenticate(this, password, options);\n      }\n\n      return this.constructor.findByUsername(this.get(options.usernameField), true).then((user) => {\n        if (user) {\n          return authenticate(user, password, options);\n        }\n\n        return { user: false, error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError) };\n      });\n    });\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then(({ user, error }) => cb(null, user, error)).catch((err) => cb(err));\n  };\n\n  if (options.limitAttempts) {\n    schema.methods.resetAttempts = function (cb) {\n      const promise = Promise.resolve().then(() => {\n        this.set(options.attemptsField, 0);\n        return this.save();\n      });\n\n      if (!cb) {\n        return promise;\n      }\n\n      promise.then((result) => cb(null, result)).catch((err) => cb(err));\n    };\n  }\n\n  // Passport Local Interface\n  schema.statics.authenticate = function () {\n    return (username, password, cb) => {\n      const promise = Promise.resolve()\n        .then(() => this.findByUsername(username, true))\n        .then((user) => {\n          if (user) {\n            return user.authenticate(password);\n          }\n\n          return { user: false, error: new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError) };\n        });\n\n      if (!cb) {\n        return promise;\n      }\n\n      promise.then(({ user, error }) => cb(null, user, error)).catch((err) => cb(err));\n    };\n  };\n\n  // Passport Interface\n  schema.statics.serializeUser = function () {\n    return function (user, cb) {\n      cb(null, user.get(options.usernameField));\n    };\n  };\n\n  schema.statics.deserializeUser = function () {\n    return (username, cb) => {\n      this.findByUsername(username, cb);\n    };\n  };\n\n  schema.statics.register = function (user, password, cb) {\n    // Create an instance of this in case user isn't already an instance\n    if (!(user instanceof this)) {\n      user = new this(user);\n    }\n\n    const promise = Promise.resolve()\n      .then(() => {\n        if (!user.get(options.usernameField)) {\n          throw new errors.MissingUsernameError(options.errorMessages.MissingUsernameError);\n        }\n      })\n      .then(() => this.findByUsername(user.get(options.usernameField)))\n      .then((existingUser) => {\n        if (existingUser) {\n          throw new errors.UserExistsError(options.errorMessages.UserExistsError);\n        }\n      })\n      .then(() => user.setPassword(password))\n      .then(() => user.save());\n\n    if (!cb) {\n      return promise;\n    }\n\n    promise.then((result) => cb(null, result)).catch((err) => cb(err));\n  };\n\n  schema.statics.findByUsername = function (username, opts, cb) {\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    if (typeof opts == 'boolean') {\n      opts = {\n        selectHashSaltFields: opts,\n      };\n    }\n\n    opts = opts || {};\n    opts.selectHashSaltFields = !!opts.selectHashSaltFields;\n\n    // if specified, convert the username to lowercase\n    if (username !== undefined && options.usernameLowerCase) {\n      username = username.toLowerCase();\n    }\n\n    // escape regex tokens\n    if (username !== undefined && options.usernameCaseInsensitive) {\n      username = username.replace(/[!#$()*+\\-./:<=>?[\\\\\\]^{|}]/g, '\\\\$&');\n    }\n\n    // Add each username query field\n    const queryOrParameters = [];\n    for (let i = 0; i < options.usernameQueryFields.length; i++) {\n      const parameter = {};\n      parameter[options.usernameQueryFields[i]] = options.usernameCaseInsensitive ? new RegExp(`^${username}$`, 'i') : username;\n      queryOrParameters.push(parameter);\n    }\n\n    const query = options.findByUsername(this, { $or: queryOrParameters });\n\n    if (opts.selectHashSaltFields) {\n      query.select('+' + options.hashField + ' +' + options.saltField);\n    }\n\n    if (options.selectFields) {\n      query.select(options.selectFields);\n    }\n\n    if (options.populateFields) {\n      query.populate(options.populateFields);\n    }\n\n    if (cb) {\n      query.exec(cb);\n      return;\n    }\n\n    return query;\n  };\n\n  schema.statics.createStrategy = function () {\n    return new LocalStrategy(options, this.authenticate());\n  };\n};\n\nfunction pbkdf2Promisified(password, salt, options) {\n  return new Promise((resolve, reject) => pbkdf2(password, salt, options, (err, hashRaw) => (err ? reject(err) : resolve(hashRaw))));\n}\n\nfunction randomBytes(saltlen) {\n  return new Promise((resolve, reject) => crypto.randomBytes(saltlen, (err, saltBuffer) => (err ? reject(err) : resolve(saltBuffer))));\n}\n\nmodule.exports.errors = errors;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}