{"ast":null,"code":"'use strict';\n\nclass LRU {\n  constructor(max) {\n    this.max = max;\n    this.size = 0;\n    this.cache = new Map();\n    this._cache = new Map();\n  }\n\n  get(key, options) {\n    let item = this.cache.get(key);\n    const maxAge = options && options.maxAge; // only call Date.now() when necessary\n\n    let now;\n\n    function getNow() {\n      now = now || Date.now();\n      return now;\n    }\n\n    if (item) {\n      // check expired\n      if (item.expired && getNow() > item.expired) {\n        item.expired = 0;\n        item.value = undefined;\n      } else {\n        // update expired in get\n        if (maxAge !== undefined) {\n          const expired = maxAge ? getNow() + maxAge : 0;\n          item.expired = expired;\n        }\n      }\n\n      return item.value;\n    } // try to read from _cache\n\n\n    item = this._cache.get(key);\n\n    if (item) {\n      // check expired\n      if (item.expired && getNow() > item.expired) {\n        item.expired = 0;\n        item.value = undefined;\n      } else {\n        // not expired, save to cache\n        this._update(key, item); // update expired in get\n\n\n        if (maxAge !== undefined) {\n          const expired = maxAge ? getNow() + maxAge : 0;\n          item.expired = expired;\n        }\n      }\n\n      return item.value;\n    }\n  }\n\n  set(key, value, options) {\n    const maxAge = options && options.maxAge;\n    const expired = maxAge ? Date.now() + maxAge : 0;\n    let item = this.cache.get(key);\n\n    if (item) {\n      item.expired = expired;\n      item.value = value;\n    } else {\n      item = {\n        value,\n        expired\n      };\n\n      this._update(key, item);\n    }\n  }\n\n  keys() {\n    const cacheKeys = new Set();\n    const now = Date.now();\n\n    for (const entry of this.cache.entries()) {\n      checkEntry(entry);\n    }\n\n    for (const entry of this._cache.entries()) {\n      checkEntry(entry);\n    }\n\n    function checkEntry(entry) {\n      const key = entry[0];\n      const item = entry[1];\n\n      if (entry[1].value && !entry[1].expired || item.expired >= now) {\n        cacheKeys.add(key);\n      }\n    }\n\n    return Array.from(cacheKeys.keys());\n  }\n\n  _update(key, item) {\n    this.cache.set(key, item);\n    this.size++;\n\n    if (this.size >= this.max) {\n      this.size = 0;\n      this._cache = this.cache;\n      this.cache = new Map();\n    }\n  }\n\n}\n\nmodule.exports = LRU;","map":{"version":3,"names":["LRU","constructor","max","size","cache","Map","_cache","get","key","options","item","maxAge","now","getNow","Date","expired","value","undefined","_update","set","keys","cacheKeys","Set","entry","entries","checkEntry","add","Array","from","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/ylru/index.js"],"sourcesContent":["'use strict';\n\nclass LRU {\n  constructor(max) {\n    this.max = max;\n    this.size = 0;\n    this.cache = new Map();\n    this._cache = new Map();\n  }\n\n  get(key, options) {\n    let item = this.cache.get(key);\n    const maxAge = options && options.maxAge;\n    // only call Date.now() when necessary\n    let now;\n    function getNow() {\n      now = now || Date.now();\n      return now;\n    }\n    if (item) {\n      // check expired\n      if (item.expired && getNow() > item.expired) {\n        item.expired = 0;\n        item.value = undefined;\n      } else {\n        // update expired in get\n        if (maxAge !== undefined) {\n          const expired = maxAge ? getNow() + maxAge : 0;\n          item.expired = expired;\n        }\n      }\n      return item.value;\n    }\n\n    // try to read from _cache\n    item = this._cache.get(key);\n    if (item) {\n      // check expired\n      if (item.expired && getNow() > item.expired) {\n        item.expired = 0;\n        item.value = undefined;\n      } else {\n        // not expired, save to cache\n        this._update(key, item);\n        // update expired in get\n        if (maxAge !== undefined) {\n          const expired = maxAge ? getNow() + maxAge : 0;\n          item.expired = expired;\n        }\n      }\n      return item.value;\n    }\n  }\n\n  set(key, value, options) {\n    const maxAge = options && options.maxAge;\n    const expired = maxAge ? Date.now() + maxAge : 0;\n    let item = this.cache.get(key);\n    if (item) {\n      item.expired = expired;\n      item.value = value;\n    } else {\n      item = {\n        value,\n        expired,\n      };\n      this._update(key, item);\n    }\n  }\n\n  keys() {\n    const cacheKeys = new Set();\n    const now = Date.now();\n\n    for (const entry of this.cache.entries()) {\n      checkEntry(entry);\n    }\n\n    for (const entry of this._cache.entries()) {\n      checkEntry(entry);\n    }\n\n    function checkEntry(entry) {\n      const key = entry[0];\n      const item = entry[1];\n      if (entry[1].value && (!entry[1].expired) || item.expired >= now) {\n        cacheKeys.add(key);\n      }\n    }\n\n    return Array.from(cacheKeys.keys());\n  }\n\n  _update(key, item) {\n    this.cache.set(key, item);\n    this.size++;\n    if (this.size >= this.max) {\n      this.size = 0;\n      this._cache = this.cache;\n      this.cache = new Map();\n    }\n  }\n}\n\nmodule.exports = LRU;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}