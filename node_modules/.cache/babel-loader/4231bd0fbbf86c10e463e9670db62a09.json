{"ast":null,"code":"'use strict';\n/**\n * Module dependencies.\n */\n\nconst raw = require('raw-body');\n\nconst inflate = require('inflation');\n\nconst utils = require('./utils');\n/**\n * Return a Promise which parses text/plain requests.\n *\n * Pass a node request or an object with `.req`,\n * such as a koa Context.\n *\n * @param {Request} req\n * @param {Options} [opts]\n * @return {Function}\n * @api public\n */\n\n\nmodule.exports = async function (req, opts) {\n  req = req.req || req;\n  opts = utils.clone(opts); // defaults\n\n  const len = req.headers['content-length'];\n  const encoding = req.headers['content-encoding'] || 'identity';\n  if (len && encoding === 'identity') opts.length = ~~len;\n  opts.encoding = opts.encoding === undefined ? 'utf8' : opts.encoding;\n  opts.limit = opts.limit || '1mb';\n  const str = await raw(inflate(req), opts); // ensure return the same format with json / form\n\n  return opts.returnRawBody ? {\n    parsed: str,\n    raw: str\n  } : str;\n};","map":{"version":3,"names":["raw","require","inflate","utils","module","exports","req","opts","clone","len","headers","encoding","length","undefined","limit","str","returnRawBody","parsed"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/co-body/lib/text.js"],"sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst raw = require('raw-body');\nconst inflate = require('inflation');\nconst utils = require('./utils');\n\n/**\n * Return a Promise which parses text/plain requests.\n *\n * Pass a node request or an object with `.req`,\n * such as a koa Context.\n *\n * @param {Request} req\n * @param {Options} [opts]\n * @return {Function}\n * @api public\n */\n\nmodule.exports = async function(req, opts) {\n  req = req.req || req;\n  opts = utils.clone(opts);\n\n  // defaults\n  const len = req.headers['content-length'];\n  const encoding = req.headers['content-encoding'] || 'identity';\n  if (len && encoding === 'identity') opts.length = ~~len;\n  opts.encoding = opts.encoding === undefined ? 'utf8' : opts.encoding;\n  opts.limit = opts.limit || '1mb';\n\n  const str = await raw(inflate(req), opts);\n  // ensure return the same format with json / form\n  return opts.returnRawBody ? { parsed: str, raw: str } : str;\n};\n"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,gBAAeC,GAAf,EAAoBC,IAApB,EAA0B;EACzCD,GAAG,GAAGA,GAAG,CAACA,GAAJ,IAAWA,GAAjB;EACAC,IAAI,GAAGJ,KAAK,CAACK,KAAN,CAAYD,IAAZ,CAAP,CAFyC,CAIzC;;EACA,MAAME,GAAG,GAAGH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CAAZ;EACA,MAAMC,QAAQ,GAAGL,GAAG,CAACI,OAAJ,CAAY,kBAAZ,KAAmC,UAApD;EACA,IAAID,GAAG,IAAIE,QAAQ,KAAK,UAAxB,EAAoCJ,IAAI,CAACK,MAAL,GAAc,CAAC,CAACH,GAAhB;EACpCF,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACI,QAAL,KAAkBE,SAAlB,GAA8B,MAA9B,GAAuCN,IAAI,CAACI,QAA5D;EACAJ,IAAI,CAACO,KAAL,GAAaP,IAAI,CAACO,KAAL,IAAc,KAA3B;EAEA,MAAMC,GAAG,GAAG,MAAMf,GAAG,CAACE,OAAO,CAACI,GAAD,CAAR,EAAeC,IAAf,CAArB,CAXyC,CAYzC;;EACA,OAAOA,IAAI,CAACS,aAAL,GAAqB;IAAEC,MAAM,EAAEF,GAAV;IAAef,GAAG,EAAEe;EAApB,CAArB,GAAiDA,GAAxD;AACD,CAdD"},"metadata":{},"sourceType":"script"}