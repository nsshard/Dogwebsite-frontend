{"ast":null,"code":"'use strict';\n\nconst MongoError = require('./error').MongoError;\n\nconst ReadPreference = require('./topologies/read_preference');\n\nconst ReadConcern = require('../read_concern');\n\nconst WriteConcern = require('../write_concern');\n\nlet TxnState;\nlet stateMachine;\n\n(() => {\n  const NO_TRANSACTION = 'NO_TRANSACTION';\n  const STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  const TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  const TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  const TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  const TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n  TxnState = {\n    NO_TRANSACTION,\n    STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED\n  };\n  stateMachine = {\n    [NO_TRANSACTION]: [NO_TRANSACTION, STARTING_TRANSACTION],\n    [STARTING_TRANSACTION]: [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, TRANSACTION_ABORTED],\n    [TRANSACTION_IN_PROGRESS]: [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_ABORTED],\n    [TRANSACTION_COMMITTED]: [TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_ABORTED]: [STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_COMMITTED_EMPTY]: [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]\n  };\n})();\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\n\n\nclass Transaction {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  constructor(options) {\n    options = options || {};\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n    const writeConcern = WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      if (writeConcern.w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    } // TODO: This isn't technically necessary\n\n\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n  /**\n   * @ignore\n   * @return Whether this session is presently in a transaction\n   */\n\n\n  get isActive() {\n    return [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1;\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @ignore\n   * @param {TxnState} state The new state to transition to\n   */\n\n\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n\n    if (nextStates && nextStates.indexOf(nextState) !== -1) {\n      this.state = nextState;\n\n      if (this.state === TxnState.NO_TRANSACTION || this.state === TxnState.STARTING_TRANSACTION) {\n        this.unpinServer();\n      }\n\n      return;\n    }\n\n    throw new MongoError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n  }\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n\n}\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nmodule.exports = {\n  TxnState,\n  Transaction,\n  isTransactionCommand\n};","map":{"version":3,"names":["MongoError","require","ReadPreference","ReadConcern","WriteConcern","TxnState","stateMachine","NO_TRANSACTION","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","TRANSACTION_COMMITTED","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","Transaction","constructor","options","state","writeConcern","fromOptions","w","readConcern","readPreference","maxCommitTimeMS","maxTimeMS","_pinnedServer","undefined","_recoveryToken","server","recoveryToken","isPinned","isActive","indexOf","transition","nextState","nextStates","unpinServer","pinServer","isTransactionCommand","command","commitTransaction","abortTransaction","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/transactions.js"],"sourcesContent":["'use strict';\nconst MongoError = require('./error').MongoError;\nconst ReadPreference = require('./topologies/read_preference');\nconst ReadConcern = require('../read_concern');\nconst WriteConcern = require('../write_concern');\n\nlet TxnState;\nlet stateMachine;\n\n(() => {\n  const NO_TRANSACTION = 'NO_TRANSACTION';\n  const STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  const TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  const TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  const TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  const TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n\n  TxnState = {\n    NO_TRANSACTION,\n    STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED\n  };\n\n  stateMachine = {\n    [NO_TRANSACTION]: [NO_TRANSACTION, STARTING_TRANSACTION],\n    [STARTING_TRANSACTION]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_IN_PROGRESS]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_COMMITTED]: [\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      STARTING_TRANSACTION,\n      NO_TRANSACTION\n    ],\n    [TRANSACTION_ABORTED]: [STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_COMMITTED_EMPTY]: [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]\n  };\n})();\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\nclass Transaction {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  constructor(options) {\n    options = options || {};\n\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n\n  /**\n   * @ignore\n   * @return Whether this session is presently in a transaction\n   */\n  get isActive() {\n    return (\n      [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1\n    );\n  }\n\n  /**\n   * Transition the transaction in the state machine\n   * @ignore\n   * @param {TxnState} state The new state to transition to\n   */\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.indexOf(nextState) !== -1) {\n      this.state = nextState;\n      if (this.state === TxnState.NO_TRANSACTION || this.state === TxnState.STARTING_TRANSACTION) {\n        this.unpinServer();\n      }\n      return;\n    }\n\n    throw new MongoError(\n      `Attempted illegal state transition from [${this.state}] to [${nextState}]`\n    );\n  }\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n}\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nmodule.exports = { TxnState, Transaction, isTransactionCommand };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}