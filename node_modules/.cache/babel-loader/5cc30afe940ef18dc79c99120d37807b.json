{"ast":null,"code":"'use strict'; // Resolves the default auth mechanism according to\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\n\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.indexOf('SCRAM-SHA-256') >= 0 ? 'scram-sha-256' : 'scram-sha-1';\n    } // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n\n\n    if (ismaster.maxWireVersion >= 3) {\n      return 'scram-sha-1';\n    }\n  } // Default for wireprotocol < 3\n\n\n  return 'mongocr';\n}\n/**\n * A representation of the credentials used by MongoDB\n * @class\n * @property {string} mechanism The method used to authenticate\n * @property {string} [username] The username used for authentication\n * @property {string} [password] The password used for authentication\n * @property {string} [source] The database that the user should authenticate against\n * @property {object} [mechanismProperties] Special properties used by some types of auth mechanisms\n */\n\n\nclass MongoCredentials {\n  /**\n   * Creates a new MongoCredentials object\n   * @param {object} [options]\n   * @param {string} [options.username] The username used for authentication\n   * @param {string} [options.password] The password used for authentication\n   * @param {string} [options.source] The database that the user should authenticate against\n   * @param {string} [options.mechanism] The method used to authenticate\n   * @param {object} [options.mechanismProperties] Special properties used by some types of auth mechanisms\n   */\n  constructor(options) {\n    options = options || {};\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source || options.db;\n    this.mechanism = options.mechanism || 'default';\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (this.username == null && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (this.password == null && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN) {\n        this.mechanismProperties.AWS_SESSION_TOKEN = process.env.AWS_SESSION_TOKEN;\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /**\n   * Determines if two MongoCredentials objects are equivalent\n   * @param {MongoCredentials} other another MongoCredentials object\n   * @returns {boolean} true if the two objects are equal.\n   */\n\n\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param {Object} [ismaster] An ismaster response from the server\n   * @returns {MongoCredentials}\n   */\n\n\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  MongoCredentials\n};","map":{"version":3,"names":["getDefaultAuthMechanism","ismaster","Array","isArray","saslSupportedMechs","indexOf","maxWireVersion","MongoCredentials","constructor","options","username","password","source","db","mechanism","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","Object","freeze","equals","other","resolveAuthMechanism","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/auth/mongo_credentials.js"],"sourcesContent":["'use strict';\n\n// Resolves the default auth mechanism according to\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.indexOf('SCRAM-SHA-256') >= 0\n        ? 'scram-sha-256'\n        : 'scram-sha-1';\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (ismaster.maxWireVersion >= 3) {\n      return 'scram-sha-1';\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return 'mongocr';\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @class\n * @property {string} mechanism The method used to authenticate\n * @property {string} [username] The username used for authentication\n * @property {string} [password] The password used for authentication\n * @property {string} [source] The database that the user should authenticate against\n * @property {object} [mechanismProperties] Special properties used by some types of auth mechanisms\n */\nclass MongoCredentials {\n  /**\n   * Creates a new MongoCredentials object\n   * @param {object} [options]\n   * @param {string} [options.username] The username used for authentication\n   * @param {string} [options.password] The password used for authentication\n   * @param {string} [options.source] The database that the user should authenticate against\n   * @param {string} [options.mechanism] The method used to authenticate\n   * @param {object} [options.mechanismProperties] Special properties used by some types of auth mechanisms\n   */\n  constructor(options) {\n    options = options || {};\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source || options.db;\n    this.mechanism = options.mechanism || 'default';\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (this.username == null && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (this.password == null && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN) {\n        this.mechanismProperties.AWS_SESSION_TOKEN = process.env.AWS_SESSION_TOKEN;\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /**\n   * Determines if two MongoCredentials objects are equivalent\n   * @param {MongoCredentials} other another MongoCredentials object\n   * @returns {boolean} true if the two objects are equal.\n   */\n  equals(other) {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param {Object} [ismaster] An ismaster response from the server\n   * @returns {MongoCredentials}\n   */\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = { MongoCredentials };\n"],"mappings":"AAAA,a,CAEA;AACA;;AACA,SAASA,uBAAT,CAAiCC,QAAjC,EAA2C;EACzC,IAAIA,QAAJ,EAAc;IACZ;IACA;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcF,QAAQ,CAACG,kBAAvB,CAAJ,EAAgD;MAC9C,OAAOH,QAAQ,CAACG,kBAAT,CAA4BC,OAA5B,CAAoC,eAApC,KAAwD,CAAxD,GACH,eADG,GAEH,aAFJ;IAGD,CAPW,CASZ;;;IACA,IAAIJ,QAAQ,CAACK,cAAT,IAA2B,CAA/B,EAAkC;MAChC,OAAO,aAAP;IACD;EACF,CAdwC,CAgBzC;;;EACA,OAAO,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAN,CAAuB;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,KAAKC,QAAL,GAAgBD,OAAO,CAACC,QAAxB;IACA,KAAKC,QAAL,GAAgBF,OAAO,CAACE,QAAxB;IACA,KAAKC,MAAL,GAAcH,OAAO,CAACG,MAAR,IAAkBH,OAAO,CAACI,EAAxC;IACA,KAAKC,SAAL,GAAiBL,OAAO,CAACK,SAAR,IAAqB,SAAtC;IACA,KAAKC,mBAAL,GAA2BN,OAAO,CAACM,mBAAR,IAA+B,EAA1D;;IAEA,IAAI,KAAKD,SAAL,CAAeE,KAAf,CAAqB,cAArB,CAAJ,EAA0C;MACxC,IAAI,KAAKN,QAAL,IAAiB,IAAjB,IAAyBO,OAAO,CAACC,GAAR,CAAYC,iBAAzC,EAA4D;QAC1D,KAAKT,QAAL,GAAgBO,OAAO,CAACC,GAAR,CAAYC,iBAA5B;MACD;;MAED,IAAI,KAAKR,QAAL,IAAiB,IAAjB,IAAyBM,OAAO,CAACC,GAAR,CAAYE,qBAAzC,EAAgE;QAC9D,KAAKT,QAAL,GAAgBM,OAAO,CAACC,GAAR,CAAYE,qBAA5B;MACD;;MAED,IAAI,KAAKL,mBAAL,CAAyBM,iBAAzB,IAA8C,IAA9C,IAAsDJ,OAAO,CAACC,GAAR,CAAYG,iBAAtE,EAAyF;QACvF,KAAKN,mBAAL,CAAyBM,iBAAzB,GAA6CJ,OAAO,CAACC,GAAR,CAAYG,iBAAzD;MACD;IACF;;IAEDC,MAAM,CAACC,MAAP,CAAc,KAAKR,mBAAnB;IACAO,MAAM,CAACC,MAAP,CAAc,IAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,MAAM,CAACC,KAAD,EAAQ;IACZ,OACE,KAAKX,SAAL,KAAmBW,KAAK,CAACX,SAAzB,IACA,KAAKJ,QAAL,KAAkBe,KAAK,CAACf,QADxB,IAEA,KAAKC,QAAL,KAAkBc,KAAK,CAACd,QAFxB,IAGA,KAAKC,MAAL,KAAgBa,KAAK,CAACb,MAJxB;EAMD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEc,oBAAoB,CAACzB,QAAD,EAAW;IAC7B;IACA,IAAI,KAAKa,SAAL,CAAeE,KAAf,CAAqB,UAArB,CAAJ,EAAsC;MACpC,OAAO,IAAIT,gBAAJ,CAAqB;QAC1BG,QAAQ,EAAE,KAAKA,QADW;QAE1BC,QAAQ,EAAE,KAAKA,QAFW;QAG1BC,MAAM,EAAE,KAAKA,MAHa;QAI1BE,SAAS,EAAEd,uBAAuB,CAACC,QAAD,CAJR;QAK1Bc,mBAAmB,EAAE,KAAKA;MALA,CAArB,CAAP;IAOD;;IAED,OAAO,IAAP;EACD;;AAtEoB;;AAyEvBY,MAAM,CAACC,OAAP,GAAiB;EAAErB;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}