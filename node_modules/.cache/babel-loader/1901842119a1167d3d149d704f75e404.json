{"ast":null,"code":"\"use strict\";\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\n\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  insertBeginning(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.length++;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n  }\n\n  insertEnd(node) {\n    if (this.tail === null) {\n      this.insertBeginning(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n  }\n\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n\n    node.next = newNode;\n    this.length++;\n  }\n\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n\n    node.prev = newNode;\n    this.length++;\n  }\n\n  remove(node) {\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n\n    node.prev = null;\n    node.next = null;\n    this.length--;\n  } // FIXME: this should not live here and has become a dumping ground...\n\n\n  static createNode(data) {\n    return {\n      prev: null,\n      next: null,\n      data: data\n    };\n  }\n\n}\n\nmodule.exports = DoublyLinkedList;","map":{"version":3,"names":["DoublyLinkedList","constructor","head","tail","length","insertBeginning","node","prev","next","insertBefore","insertEnd","insertAfter","newNode","remove","createNode","data","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/generic-pool/lib/DoublyLinkedList.js"],"sourcesContent":["\"use strict\";\n\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  insertBeginning(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.length++;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n  }\n\n  insertEnd(node) {\n    if (this.tail === null) {\n      this.insertBeginning(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n  }\n\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.length++;\n  }\n\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.length++;\n  }\n\n  remove(node) {\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    node.prev = null;\n    node.next = null;\n    this.length--;\n  }\n\n  // FIXME: this should not live here and has become a dumping ground...\n  static createNode(data) {\n    return {\n      prev: null,\n      next: null,\n      data: data\n    };\n  }\n}\n\nmodule.exports = DoublyLinkedList;\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,gBAAN,CAAuB;EACrBC,WAAW,GAAG;IACZ,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAKC,MAAL,GAAc,CAAd;EACD;;EAEDC,eAAe,CAACC,IAAD,EAAO;IACpB,IAAI,KAAKJ,IAAL,KAAc,IAAlB,EAAwB;MACtB,KAAKA,IAAL,GAAYI,IAAZ;MACA,KAAKH,IAAL,GAAYG,IAAZ;MACAA,IAAI,CAACC,IAAL,GAAY,IAAZ;MACAD,IAAI,CAACE,IAAL,GAAY,IAAZ;MACA,KAAKJ,MAAL;IACD,CAND,MAMO;MACL,KAAKK,YAAL,CAAkB,KAAKP,IAAvB,EAA6BI,IAA7B;IACD;EACF;;EAEDI,SAAS,CAACJ,IAAD,EAAO;IACd,IAAI,KAAKH,IAAL,KAAc,IAAlB,EAAwB;MACtB,KAAKE,eAAL,CAAqBC,IAArB;IACD,CAFD,MAEO;MACL,KAAKK,WAAL,CAAiB,KAAKR,IAAtB,EAA4BG,IAA5B;IACD;EACF;;EAEDK,WAAW,CAACL,IAAD,EAAOM,OAAP,EAAgB;IACzBA,OAAO,CAACL,IAAR,GAAeD,IAAf;IACAM,OAAO,CAACJ,IAAR,GAAeF,IAAI,CAACE,IAApB;;IACA,IAAIF,IAAI,CAACE,IAAL,KAAc,IAAlB,EAAwB;MACtB,KAAKL,IAAL,GAAYS,OAAZ;IACD,CAFD,MAEO;MACLN,IAAI,CAACE,IAAL,CAAUD,IAAV,GAAiBK,OAAjB;IACD;;IACDN,IAAI,CAACE,IAAL,GAAYI,OAAZ;IACA,KAAKR,MAAL;EACD;;EAEDK,YAAY,CAACH,IAAD,EAAOM,OAAP,EAAgB;IAC1BA,OAAO,CAACL,IAAR,GAAeD,IAAI,CAACC,IAApB;IACAK,OAAO,CAACJ,IAAR,GAAeF,IAAf;;IACA,IAAIA,IAAI,CAACC,IAAL,KAAc,IAAlB,EAAwB;MACtB,KAAKL,IAAL,GAAYU,OAAZ;IACD,CAFD,MAEO;MACLN,IAAI,CAACC,IAAL,CAAUC,IAAV,GAAiBI,OAAjB;IACD;;IACDN,IAAI,CAACC,IAAL,GAAYK,OAAZ;IACA,KAAKR,MAAL;EACD;;EAEDS,MAAM,CAACP,IAAD,EAAO;IACX,IAAIA,IAAI,CAACC,IAAL,KAAc,IAAlB,EAAwB;MACtB,KAAKL,IAAL,GAAYI,IAAI,CAACE,IAAjB;IACD,CAFD,MAEO;MACLF,IAAI,CAACC,IAAL,CAAUC,IAAV,GAAiBF,IAAI,CAACE,IAAtB;IACD;;IACD,IAAIF,IAAI,CAACE,IAAL,KAAc,IAAlB,EAAwB;MACtB,KAAKL,IAAL,GAAYG,IAAI,CAACC,IAAjB;IACD,CAFD,MAEO;MACLD,IAAI,CAACE,IAAL,CAAUD,IAAV,GAAiBD,IAAI,CAACC,IAAtB;IACD;;IACDD,IAAI,CAACC,IAAL,GAAY,IAAZ;IACAD,IAAI,CAACE,IAAL,GAAY,IAAZ;IACA,KAAKJ,MAAL;EACD,CAjEoB,CAmErB;;;EACiB,OAAVU,UAAU,CAACC,IAAD,EAAO;IACtB,OAAO;MACLR,IAAI,EAAE,IADD;MAELC,IAAI,EAAE,IAFD;MAGLO,IAAI,EAAEA;IAHD,CAAP;EAKD;;AA1EoB;;AA6EvBC,MAAM,CAACC,OAAP,GAAiBjB,gBAAjB"},"metadata":{},"sourceType":"script"}