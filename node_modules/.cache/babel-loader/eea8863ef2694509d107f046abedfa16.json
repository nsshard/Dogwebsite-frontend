{"ast":null,"code":"'use strict';\n\nconst CommandOperationV2 = require('./command_v2');\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst CONSTANTS = require('../constants');\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n\nfunction listCollectionsTransforms(databaseName) {\n  const matching = `${databaseName}.`;\n  return {\n    doc: doc => {\n      const index = doc.name.indexOf(matching); // Remove database name if available\n\n      if (doc.name && index === 0) {\n        doc.name = doc.name.substr(index + matching.length);\n      }\n\n      return doc;\n    }\n  };\n}\n\nclass ListCollectionsOperation extends CommandOperationV2 {\n  constructor(db, filter, options) {\n    super(db, options, {\n      fullResponse: true\n    });\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, callback) {\n    if (maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n      if (typeof filter.name === 'string' && !new RegExp('^' + databaseName + '\\\\.').test(filter.name)) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      } // No filter, filter by current database\n\n\n      if (filter == null) {\n        filter.name = `/${databaseName}/`;\n      } // Rewrite the filter to use $and to filter out indexes\n\n\n      if (filter.name) {\n        filter = {\n          $and: [{\n            name: filter.name\n          }, {\n            name: /^((?!\\$).)*$/\n          }]\n        };\n      } else {\n        filter = {\n          name: /^((?!\\$).)*$/\n        };\n      }\n\n      const transforms = listCollectionsTransforms(databaseName);\n      server.query(`${databaseName}.${CONSTANTS.SYSTEM_NAMESPACE_COLLECTION}`, {\n        query: filter\n      }, {\n        batchSize: this.batchSize || 1000\n      }, {}, (err, result) => {\n        if (result && result.message && result.message.documents && Array.isArray(result.message.documents)) {\n          result.message.documents = result.message.documents.map(transforms.doc);\n        }\n\n        callback(err, result);\n      });\n      return;\n    }\n\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly\n    };\n    return super.executeCommand(server, command, callback);\n  }\n\n}\n\ndefineAspects(ListCollectionsOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = ListCollectionsOperation;","map":{"version":3,"names":["CommandOperationV2","require","Aspect","defineAspects","maxWireVersion","CONSTANTS","LIST_COLLECTIONS_WIRE_VERSION","listCollectionsTransforms","databaseName","matching","doc","index","name","indexOf","substr","length","ListCollectionsOperation","constructor","db","filter","options","fullResponse","nameOnly","batchSize","execute","server","callback","s","namespace","RegExp","test","Object","assign","withCollection","toString","$and","transforms","query","SYSTEM_NAMESPACE_COLLECTION","err","result","message","documents","Array","isArray","map","command","listCollections","cursor","executeCommand","READ_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/operations/list_collections.js"],"sourcesContent":["'use strict';\n\nconst CommandOperationV2 = require('./command_v2');\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\nconst maxWireVersion = require('../core/utils').maxWireVersion;\nconst CONSTANTS = require('../constants');\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n\nfunction listCollectionsTransforms(databaseName) {\n  const matching = `${databaseName}.`;\n\n  return {\n    doc: doc => {\n      const index = doc.name.indexOf(matching);\n      // Remove database name if available\n      if (doc.name && index === 0) {\n        doc.name = doc.name.substr(index + matching.length);\n      }\n\n      return doc;\n    }\n  };\n}\n\nclass ListCollectionsOperation extends CommandOperationV2 {\n  constructor(db, filter, options) {\n    super(db, options, { fullResponse: true });\n\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, callback) {\n    if (maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db;\n\n      // If we have legacy mode and have not provided a full db name filter it\n      if (\n        typeof filter.name === 'string' &&\n        !new RegExp('^' + databaseName + '\\\\.').test(filter.name)\n      ) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      }\n\n      // No filter, filter by current database\n      if (filter == null) {\n        filter.name = `/${databaseName}/`;\n      }\n\n      // Rewrite the filter to use $and to filter out indexes\n      if (filter.name) {\n        filter = { $and: [{ name: filter.name }, { name: /^((?!\\$).)*$/ }] };\n      } else {\n        filter = { name: /^((?!\\$).)*$/ };\n      }\n\n      const transforms = listCollectionsTransforms(databaseName);\n      server.query(\n        `${databaseName}.${CONSTANTS.SYSTEM_NAMESPACE_COLLECTION}`,\n        { query: filter },\n        { batchSize: this.batchSize || 1000 },\n        {},\n        (err, result) => {\n          if (\n            result &&\n            result.message &&\n            result.message.documents &&\n            Array.isArray(result.message.documents)\n          ) {\n            result.message.documents = result.message.documents.map(transforms.doc);\n          }\n\n          callback(err, result);\n        }\n      );\n\n      return;\n    }\n\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n      nameOnly: this.nameOnly\n    };\n\n    return super.executeCommand(server, command, callback);\n  }\n}\n\ndefineAspects(ListCollectionsOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = ListCollectionsOperation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}