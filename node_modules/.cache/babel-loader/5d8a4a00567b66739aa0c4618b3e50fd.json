{"ast":null,"code":"/**\n * Module dependencies.\n */\n'use strict';\n\nconst Counter = require('passthrough-counter');\n\nconst humanize = require('humanize-number');\n\nconst bytes = require('bytes');\n\nconst chalk = require('chalk');\n\nconst util = require('util');\n/**\n * Expose logger.\n */\n\n\nmodule.exports = dev;\n/**\n * Color map.\n */\n\nconst colorCodes = {\n  7: 'magenta',\n  5: 'red',\n  4: 'yellow',\n  3: 'cyan',\n  2: 'green',\n  1: 'green',\n  0: 'yellow'\n};\n/**\n * Development logger.\n */\n\nfunction dev(opts) {\n  // print to console helper.\n  const print = function () {\n    let transporter;\n\n    if (typeof opts === 'function') {\n      transporter = opts;\n    } else if (opts && opts.transporter) {\n      transporter = opts.transporter;\n    }\n\n    return function printFunc() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const str = util.format(...args);\n\n      if (transporter) {\n        transporter(str, args);\n      } else {\n        console.log(...args);\n      }\n    };\n  }();\n\n  return async function logger(ctx, next) {\n    // request\n    const start = ctx[Symbol.for('request-received.startTime')] ? ctx[Symbol.for('request-received.startTime')].getTime() : Date.now();\n    print('  ' + chalk.gray('<--') + ' ' + chalk.bold('%s') + ' ' + chalk.gray('%s'), ctx.method, ctx.originalUrl);\n\n    try {\n      await next();\n    } catch (err) {\n      // log uncaught downstream errors\n      log(print, ctx, start, null, err);\n      throw err;\n    } // calculate the length of a streaming response\n    // by intercepting the stream with a counter.\n    // only necessary if a content-length header is currently not set.\n\n\n    const length = ctx.response.length;\n    const body = ctx.body;\n    let counter;\n\n    if (length == null && body && body.readable) {\n      ctx.body = body.pipe(counter = Counter()).on('error', ctx.onerror);\n    } // log when the response is finished or closed,\n    // whichever happens first.\n\n\n    const res = ctx.res;\n    const onfinish = done.bind(null, 'finish');\n    const onclose = done.bind(null, 'close');\n    res.once('finish', onfinish);\n    res.once('close', onclose);\n\n    function done(event) {\n      res.removeListener('finish', onfinish);\n      res.removeListener('close', onclose);\n      log(print, ctx, start, counter ? counter.length : length, null, event);\n    }\n  };\n}\n/**\n * Log helper.\n */\n\n\nfunction log(print, ctx, start, len, err, event) {\n  // get the status code of the response\n  const status = err ? err.isBoom ? err.output.statusCode : err.status || 500 : ctx.status || 404; // set the color of the status code;\n\n  const s = status / 100 | 0; // eslint-disable-next-line\n\n  const color = colorCodes.hasOwnProperty(s) ? colorCodes[s] : colorCodes[0]; // get the human readable response length\n\n  let length;\n\n  if (~[204, 205, 304].indexOf(status)) {\n    length = '';\n  } else if (len == null) {\n    length = '-';\n  } else {\n    length = bytes(len).toLowerCase();\n  }\n\n  const upstream = err ? chalk.red('xxx') : event === 'close' ? chalk.yellow('-x-') : chalk.gray('-->');\n  print('  ' + upstream + ' ' + chalk.bold('%s') + ' ' + chalk.gray('%s') + ' ' + chalk[color]('%s') + ' ' + chalk.gray('%s') + ' ' + chalk.gray('%s'), ctx.method, ctx.originalUrl, status, time(start), length);\n}\n/**\n * Show the response time in a human readable format.\n * In milliseconds if less than 10 seconds,\n * in seconds otherwise.\n */\n\n\nfunction time(start) {\n  const delta = Date.now() - start;\n  return humanize(delta < 10000 ? delta + 'ms' : Math.round(delta / 1000) + 's');\n}","map":{"version":3,"names":["Counter","require","humanize","bytes","chalk","util","module","exports","dev","colorCodes","opts","print","transporter","printFunc","args","str","format","console","log","logger","ctx","next","start","Symbol","for","getTime","Date","now","gray","bold","method","originalUrl","err","length","response","body","counter","readable","pipe","on","onerror","res","onfinish","done","bind","onclose","once","event","removeListener","len","status","isBoom","output","statusCode","s","color","hasOwnProperty","indexOf","toLowerCase","upstream","red","yellow","time","delta","Math","round"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-logger/index.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n'use strict'\n\nconst Counter = require('passthrough-counter')\nconst humanize = require('humanize-number')\nconst bytes = require('bytes')\nconst chalk = require('chalk')\nconst util = require('util')\n\n/**\n * Expose logger.\n */\n\nmodule.exports = dev\n\n/**\n * Color map.\n */\n\nconst colorCodes = {\n  7: 'magenta',\n  5: 'red',\n  4: 'yellow',\n  3: 'cyan',\n  2: 'green',\n  1: 'green',\n  0: 'yellow'\n}\n\n/**\n * Development logger.\n */\n\nfunction dev (opts) {\n  // print to console helper.\n  const print = (function () {\n    let transporter\n    if (typeof opts === 'function') {\n      transporter = opts\n    } else if (opts && opts.transporter) {\n      transporter = opts.transporter\n    }\n\n    return function printFunc (...args) {\n      const str = util.format(...args)\n      if (transporter) {\n        transporter(str, args)\n      } else {\n        console.log(...args)\n      }\n    }\n  }())\n\n  return async function logger (ctx, next) {\n    // request\n    const start = ctx[Symbol.for('request-received.startTime')] ? ctx[Symbol.for('request-received.startTime')].getTime() : Date.now()\n    print('  ' + chalk.gray('<--') +\n      ' ' + chalk.bold('%s') +\n      ' ' + chalk.gray('%s'),\n    ctx.method,\n    ctx.originalUrl)\n\n    try {\n      await next()\n    } catch (err) {\n      // log uncaught downstream errors\n      log(print, ctx, start, null, err)\n      throw err\n    }\n\n    // calculate the length of a streaming response\n    // by intercepting the stream with a counter.\n    // only necessary if a content-length header is currently not set.\n    const length = ctx.response.length\n    const body = ctx.body\n    let counter\n    if (length == null && body && body.readable) {\n      ctx.body = body\n        .pipe(counter = Counter())\n        .on('error', ctx.onerror)\n    }\n\n    // log when the response is finished or closed,\n    // whichever happens first.\n    const res = ctx.res\n\n    const onfinish = done.bind(null, 'finish')\n    const onclose = done.bind(null, 'close')\n\n    res.once('finish', onfinish)\n    res.once('close', onclose)\n\n    function done (event) {\n      res.removeListener('finish', onfinish)\n      res.removeListener('close', onclose)\n      log(print, ctx, start, counter ? counter.length : length, null, event)\n    }\n  }\n}\n\n/**\n * Log helper.\n */\n\nfunction log (print, ctx, start, len, err, event) {\n  // get the status code of the response\n  const status = err\n    ? (err.isBoom ? err.output.statusCode : err.status || 500)\n    : (ctx.status || 404)\n\n  // set the color of the status code;\n  const s = status / 100 | 0\n  // eslint-disable-next-line\n  const color = colorCodes.hasOwnProperty(s) ? colorCodes[s] : colorCodes[0]\n\n  // get the human readable response length\n  let length\n  if (~[204, 205, 304].indexOf(status)) {\n    length = ''\n  } else if (len == null) {\n    length = '-'\n  } else {\n    length = bytes(len).toLowerCase()\n  }\n\n  const upstream = err ? chalk.red('xxx')\n    : event === 'close' ? chalk.yellow('-x-')\n      : chalk.gray('-->')\n\n  print('  ' + upstream +\n    ' ' + chalk.bold('%s') +\n    ' ' + chalk.gray('%s') +\n    ' ' + chalk[color]('%s') +\n    ' ' + chalk.gray('%s') +\n    ' ' + chalk.gray('%s'),\n  ctx.method,\n  ctx.originalUrl,\n  status,\n  time(start),\n  length)\n}\n\n/**\n * Show the response time in a human readable format.\n * In milliseconds if less than 10 seconds,\n * in seconds otherwise.\n */\n\nfunction time (start) {\n  const delta = Date.now() - start\n  return humanize(delta < 10000\n    ? delta + 'ms'\n    : Math.round(delta / 1000) + 's')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}