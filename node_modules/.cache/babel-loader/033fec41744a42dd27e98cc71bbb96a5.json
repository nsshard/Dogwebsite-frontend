{"ast":null,"code":"/*!\n * resolve-path\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2018 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors');\n\nvar join = require('path').join;\n\nvar normalize = require('path').normalize;\n\nvar pathIsAbsolute = require('path-is-absolute');\n\nvar resolve = require('path').resolve;\n\nvar sep = require('path').sep;\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = resolvePath;\n/**\n * Module variables.\n * @private\n */\n\nvar UP_PATH_REGEXP = /(?:^|[\\\\/])\\.\\.(?:[\\\\/]|$)/;\n/**\n * Resolve relative path against a root path\n *\n * @param {string} rootPath\n * @param {string} relativePath\n * @return {string}\n * @public\n */\n\nfunction resolvePath(rootPath, relativePath) {\n  var path = relativePath;\n  var root = rootPath; // root is optional, similar to root.resolve\n\n  if (arguments.length === 1) {\n    path = rootPath;\n    root = process.cwd();\n  }\n\n  if (root == null) {\n    throw new TypeError('argument rootPath is required');\n  }\n\n  if (typeof root !== 'string') {\n    throw new TypeError('argument rootPath must be a string');\n  }\n\n  if (path == null) {\n    throw new TypeError('argument relativePath is required');\n  }\n\n  if (typeof path !== 'string') {\n    throw new TypeError('argument relativePath must be a string');\n  } // containing NULL bytes is malicious\n\n\n  if (path.indexOf('\\0') !== -1) {\n    throw createError(400, 'Malicious Path');\n  } // path should never be absolute\n\n\n  if (pathIsAbsolute.posix(path) || pathIsAbsolute.win32(path)) {\n    throw createError(400, 'Malicious Path');\n  } // path outside root\n\n\n  if (UP_PATH_REGEXP.test(normalize('.' + sep + path))) {\n    throw createError(403);\n  } // join the relative path\n\n\n  return normalize(join(resolve(root), path));\n}","map":{"version":3,"names":["createError","require","join","normalize","pathIsAbsolute","resolve","sep","module","exports","resolvePath","UP_PATH_REGEXP","rootPath","relativePath","path","root","arguments","length","process","cwd","TypeError","indexOf","posix","win32","test"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/resolve-path/index.js"],"sourcesContent":["/*!\n * resolve-path\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2018 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar join = require('path').join\nvar normalize = require('path').normalize\nvar pathIsAbsolute = require('path-is-absolute')\nvar resolve = require('path').resolve\nvar sep = require('path').sep\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = resolvePath\n\n/**\n * Module variables.\n * @private\n */\n\nvar UP_PATH_REGEXP = /(?:^|[\\\\/])\\.\\.(?:[\\\\/]|$)/\n\n/**\n * Resolve relative path against a root path\n *\n * @param {string} rootPath\n * @param {string} relativePath\n * @return {string}\n * @public\n */\n\nfunction resolvePath (rootPath, relativePath) {\n  var path = relativePath\n  var root = rootPath\n\n  // root is optional, similar to root.resolve\n  if (arguments.length === 1) {\n    path = rootPath\n    root = process.cwd()\n  }\n\n  if (root == null) {\n    throw new TypeError('argument rootPath is required')\n  }\n\n  if (typeof root !== 'string') {\n    throw new TypeError('argument rootPath must be a string')\n  }\n\n  if (path == null) {\n    throw new TypeError('argument relativePath is required')\n  }\n\n  if (typeof path !== 'string') {\n    throw new TypeError('argument relativePath must be a string')\n  }\n\n  // containing NULL bytes is malicious\n  if (path.indexOf('\\0') !== -1) {\n    throw createError(400, 'Malicious Path')\n  }\n\n  // path should never be absolute\n  if (pathIsAbsolute.posix(path) || pathIsAbsolute.win32(path)) {\n    throw createError(400, 'Malicious Path')\n  }\n\n  // path outside root\n  if (UP_PATH_REGEXP.test(normalize('.' + sep + path))) {\n    throw createError(403)\n  }\n\n  // join the relative path\n  return normalize(join(resolve(root), path))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBC,IAA3B;;AACA,IAAIC,SAAS,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBE,SAAhC;;AACA,IAAIC,cAAc,GAAGH,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgBI,OAA9B;;AACA,IAAIC,GAAG,GAAGL,OAAO,CAAC,MAAD,CAAP,CAAgBK,GAA1B;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAG,4BAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,WAAT,CAAsBE,QAAtB,EAAgCC,YAAhC,EAA8C;EAC5C,IAAIC,IAAI,GAAGD,YAAX;EACA,IAAIE,IAAI,GAAGH,QAAX,CAF4C,CAI5C;;EACA,IAAII,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1BH,IAAI,GAAGF,QAAP;IACAG,IAAI,GAAGG,OAAO,CAACC,GAAR,EAAP;EACD;;EAED,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;IAChB,MAAM,IAAIK,SAAJ,CAAc,+BAAd,CAAN;EACD;;EAED,IAAI,OAAOL,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAIK,SAAJ,CAAc,oCAAd,CAAN;EACD;;EAED,IAAIN,IAAI,IAAI,IAAZ,EAAkB;IAChB,MAAM,IAAIM,SAAJ,CAAc,mCAAd,CAAN;EACD;;EAED,IAAI,OAAON,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAIM,SAAJ,CAAc,wCAAd,CAAN;EACD,CAxB2C,CA0B5C;;;EACA,IAAIN,IAAI,CAACO,OAAL,CAAa,IAAb,MAAuB,CAAC,CAA5B,EAA+B;IAC7B,MAAMpB,WAAW,CAAC,GAAD,EAAM,gBAAN,CAAjB;EACD,CA7B2C,CA+B5C;;;EACA,IAAII,cAAc,CAACiB,KAAf,CAAqBR,IAArB,KAA8BT,cAAc,CAACkB,KAAf,CAAqBT,IAArB,CAAlC,EAA8D;IAC5D,MAAMb,WAAW,CAAC,GAAD,EAAM,gBAAN,CAAjB;EACD,CAlC2C,CAoC5C;;;EACA,IAAIU,cAAc,CAACa,IAAf,CAAoBpB,SAAS,CAAC,MAAMG,GAAN,GAAYO,IAAb,CAA7B,CAAJ,EAAsD;IACpD,MAAMb,WAAW,CAAC,GAAD,CAAjB;EACD,CAvC2C,CAyC5C;;;EACA,OAAOG,SAAS,CAACD,IAAI,CAACG,OAAO,CAACS,IAAD,CAAR,EAAgBD,IAAhB,CAAL,CAAhB;AACD"},"metadata":{},"sourceType":"script"}