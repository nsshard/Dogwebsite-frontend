{"ast":null,"code":"'use strict';\n\nconst dns = require('dns');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nconst MongoError = require('../error').MongoError;\n\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, response) => {\n          if (err) return callback(err);\n          const result = response.result;\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n              if (err) return callback(err);\n              const result = response.result;\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  const host = authContext.options.host;\n  const port = authContext.options.port;\n  const credentials = authContext.credentials;\n\n  if (!host || !port || !credentials) {\n    return callback(new MongoError(`Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${credentials ? 'host' : 'credentials'}.`));\n  }\n\n  if (kerberos == null) {\n    try {\n      kerberos = retrieveKerberos();\n    } catch (e) {\n      return callback(e);\n    }\n  }\n\n  const username = credentials.username;\n  const password = credentials.password;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n  performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n\n    kerberos.initializeClient(`${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`, initOptions, (err, client) => {\n      if (err) return callback(new MongoError(err));\n      callback(null, client);\n    });\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName = typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean' ? mechanismProperties.gssapiCanonicalizeHostName : false;\n  if (!canonicalizeHostName) return callback(undefined, host); // Attempt to resolve the host name\n\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err); // Get the first resolve host id\n\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}","map":{"version":3,"names":["dns","require","AuthProvider","retrieveKerberos","MongoError","kerberos","GSSAPI","auth","authContext","callback","connection","credentials","username","externalCommand","command","cb","makeKerberosClient","err","client","step","payload","saslStart","response","result","negotiate","saslContinue","conversationId","finalize","undefined","module","exports","host","options","port","e","password","mechanismProperties","serviceName","performGssapiCanonicalizeHostName","initOptions","Object","assign","user","initializeClient","process","platform","mechanism","autoAuthorize","retries","unwrap","wrap","wrapped","canonicalizeHostName","gssapiCanonicalizeHostName","resolveCname","r","Array","isArray","length"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/auth/gssapi.js"],"sourcesContent":["'use strict';\nconst dns = require('dns');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst retrieveKerberos = require('../utils').retrieveKerberos;\nconst MongoError = require('../error').MongoError;\n\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, response) => {\n          if (err) return callback(err);\n          const result = response.result;\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n              if (err) return callback(err);\n              const result = response.result;\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand(\n                  {\n                    saslContinue: 1,\n                    conversationId: result.conversationId,\n                    payload\n                  },\n                  (err, result) => {\n                    if (err) return callback(err);\n                    callback(undefined, result);\n                  }\n                );\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nmodule.exports = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  const host = authContext.options.host;\n  const port = authContext.options.port;\n  const credentials = authContext.credentials;\n  if (!host || !port || !credentials) {\n    return callback(\n      new MongoError(\n        `Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${\n          credentials ? 'host' : 'credentials'\n        }.`\n      )\n    );\n  }\n  if (kerberos == null) {\n    try {\n      kerberos = retrieveKerberos();\n    } catch (e) {\n      return callback(e);\n    }\n  }\n  const username = credentials.username;\n  const password = credentials.password;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName =\n    mechanismProperties['gssapiservicename'] ||\n    mechanismProperties['gssapiServiceName'] ||\n    'mongodb';\n  performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n    if (password != null) {\n      Object.assign(initOptions, { user: username, password: password });\n    }\n    kerberos.initializeClient(\n      `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`,\n      initOptions,\n      (err, client) => {\n        if (err) return callback(new MongoError(err));\n        callback(null, client);\n      }\n    );\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', { user }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName =\n    typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean'\n      ? mechanismProperties.gssapiCanonicalizeHostName\n      : false;\n  if (!canonicalizeHostName) return callback(undefined, host);\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err);\n    // Get the first resolve host id\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}\n"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEA,MAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,YAAhD;;AACA,MAAMC,gBAAgB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,gBAA7C;;AACA,MAAMC,UAAU,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,UAAvC;;AAEA,IAAIC,QAAJ;;AAEA,MAAMC,MAAN,SAAqBJ,YAArB,CAAkC;EAChCK,IAAI,CAACC,WAAD,EAAcC,QAAd,EAAwB;IAC1B,MAAMC,UAAU,GAAGF,WAAW,CAACE,UAA/B;IACA,MAAMC,WAAW,GAAGH,WAAW,CAACG,WAAhC;IACA,IAAIA,WAAW,IAAI,IAAnB,EAAyB,OAAOF,QAAQ,CAAC,IAAIL,UAAJ,CAAe,sBAAf,CAAD,CAAf;IACzB,MAAMQ,QAAQ,GAAGD,WAAW,CAACC,QAA7B;;IACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,EAAlC,EAAsC;MACpC,OAAOL,UAAU,CAACI,OAAX,CAAmB,gBAAnB,EAAqCA,OAArC,EAA8CC,EAA9C,CAAP;IACD;;IACDC,kBAAkB,CAACR,WAAD,EAAc,CAACS,GAAD,EAAMC,MAAN,KAAiB;MAC/C,IAAID,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;MACT,IAAIC,MAAM,IAAI,IAAd,EAAoB,OAAOT,QAAQ,CAAC,IAAIL,UAAJ,CAAe,uBAAf,CAAD,CAAf;MACpBc,MAAM,CAACC,IAAP,CAAY,EAAZ,EAAgB,CAACF,GAAD,EAAMG,OAAN,KAAkB;QAChC,IAAIH,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;QACTJ,eAAe,CAACQ,SAAS,CAACD,OAAD,CAAV,EAAqB,CAACH,GAAD,EAAMK,QAAN,KAAmB;UACrD,IAAIL,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;UACT,MAAMM,MAAM,GAAGD,QAAQ,CAACC,MAAxB;UACAC,SAAS,CAACN,MAAD,EAAS,EAAT,EAAaK,MAAM,CAACH,OAApB,EAA6B,CAACH,GAAD,EAAMG,OAAN,KAAkB;YACtD,IAAIH,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;YACTJ,eAAe,CAACY,YAAY,CAACL,OAAD,EAAUG,MAAM,CAACG,cAAjB,CAAb,EAA+C,CAACT,GAAD,EAAMK,QAAN,KAAmB;cAC/E,IAAIL,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;cACT,MAAMM,MAAM,GAAGD,QAAQ,CAACC,MAAxB;cACAI,QAAQ,CAACT,MAAD,EAASN,QAAT,EAAmBW,MAAM,CAACH,OAA1B,EAAmC,CAACH,GAAD,EAAMG,OAAN,KAAkB;gBAC3D,IAAIH,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;gBACTJ,eAAe,CACb;kBACEY,YAAY,EAAE,CADhB;kBAEEC,cAAc,EAAEH,MAAM,CAACG,cAFzB;kBAGEN;gBAHF,CADa,EAMb,CAACH,GAAD,EAAMM,MAAN,KAAiB;kBACf,IAAIN,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;kBACTR,QAAQ,CAACmB,SAAD,EAAYL,MAAZ,CAAR;gBACD,CATY,CAAf;cAWD,CAbO,CAAR;YAcD,CAjBc,CAAf;UAkBD,CApBQ,CAAT;QAqBD,CAxBc,CAAf;MAyBD,CA3BD;IA4BD,CA/BiB,CAAlB;EAgCD;;AAzC+B;;AA2ClCM,MAAM,CAACC,OAAP,GAAiBxB,MAAjB;;AAEA,SAASU,kBAAT,CAA4BR,WAA5B,EAAyCC,QAAzC,EAAmD;EACjD,MAAMsB,IAAI,GAAGvB,WAAW,CAACwB,OAAZ,CAAoBD,IAAjC;EACA,MAAME,IAAI,GAAGzB,WAAW,CAACwB,OAAZ,CAAoBC,IAAjC;EACA,MAAMtB,WAAW,GAAGH,WAAW,CAACG,WAAhC;;EACA,IAAI,CAACoB,IAAD,IAAS,CAACE,IAAV,IAAkB,CAACtB,WAAvB,EAAoC;IAClC,OAAOF,QAAQ,CACb,IAAIL,UAAJ,CACG,4BAA2B2B,IAAI,GAAG,MAAH,GAAY,EAAG,KAAIE,IAAI,GAAG,MAAH,GAAY,EAAG,KACpEtB,WAAW,GAAG,MAAH,GAAY,aACxB,GAHH,CADa,CAAf;EAOD;;EACD,IAAIN,QAAQ,IAAI,IAAhB,EAAsB;IACpB,IAAI;MACFA,QAAQ,GAAGF,gBAAgB,EAA3B;IACD,CAFD,CAEE,OAAO+B,CAAP,EAAU;MACV,OAAOzB,QAAQ,CAACyB,CAAD,CAAf;IACD;EACF;;EACD,MAAMtB,QAAQ,GAAGD,WAAW,CAACC,QAA7B;EACA,MAAMuB,QAAQ,GAAGxB,WAAW,CAACwB,QAA7B;EACA,MAAMC,mBAAmB,GAAGzB,WAAW,CAACyB,mBAAxC;EACA,MAAMC,WAAW,GACfD,mBAAmB,CAAC,mBAAD,CAAnB,IACAA,mBAAmB,CAAC,mBAAD,CADnB,IAEA,SAHF;EAIAE,iCAAiC,CAACP,IAAD,EAAOK,mBAAP,EAA4B,CAACnB,GAAD,EAAMc,IAAN,KAAe;IAC1E,IAAId,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf;IACT,MAAMsB,WAAW,GAAG,EAApB;;IACA,IAAIJ,QAAQ,IAAI,IAAhB,EAAsB;MACpBK,MAAM,CAACC,MAAP,CAAcF,WAAd,EAA2B;QAAEG,IAAI,EAAE9B,QAAR;QAAkBuB,QAAQ,EAAEA;MAA5B,CAA3B;IACD;;IACD9B,QAAQ,CAACsC,gBAAT,CACG,GAAEN,WAAY,GAAEO,OAAO,CAACC,QAAR,KAAqB,OAArB,GAA+B,GAA/B,GAAqC,GAAI,GAAEd,IAAK,EADnE,EAEEQ,WAFF,EAGE,CAACtB,GAAD,EAAMC,MAAN,KAAiB;MACf,IAAID,GAAJ,EAAS,OAAOR,QAAQ,CAAC,IAAIL,UAAJ,CAAea,GAAf,CAAD,CAAf;MACTR,QAAQ,CAAC,IAAD,EAAOS,MAAP,CAAR;IACD,CANH;EAQD,CAdgC,CAAjC;AAeD;;AAED,SAASG,SAAT,CAAmBD,OAAnB,EAA4B;EAC1B,OAAO;IACLC,SAAS,EAAE,CADN;IAELyB,SAAS,EAAE,QAFN;IAGL1B,OAHK;IAIL2B,aAAa,EAAE;EAJV,CAAP;AAMD;;AACD,SAAStB,YAAT,CAAsBL,OAAtB,EAA+BM,cAA/B,EAA+C;EAC7C,OAAO;IACLD,YAAY,EAAE,CADT;IAELC,cAFK;IAGLN;EAHK,CAAP;AAKD;;AACD,SAASI,SAAT,CAAmBN,MAAnB,EAA2B8B,OAA3B,EAAoC5B,OAApC,EAA6CX,QAA7C,EAAuD;EACrDS,MAAM,CAACC,IAAP,CAAYC,OAAZ,EAAqB,CAACH,GAAD,EAAMK,QAAN,KAAmB;IACtC;IACA,IAAIL,GAAG,IAAI+B,OAAO,KAAK,CAAvB,EAA0B,OAAOvC,QAAQ,CAACQ,GAAD,CAAf,CAFY,CAGtC;;IACA,IAAIA,GAAJ,EAAS,OAAOO,SAAS,CAACN,MAAD,EAAS8B,OAAO,GAAG,CAAnB,EAAsB5B,OAAtB,EAA+BX,QAA/B,CAAhB,CAJ6B,CAKtC;;IACAA,QAAQ,CAACmB,SAAD,EAAYN,QAAQ,IAAI,EAAxB,CAAR;EACD,CAPD;AAQD;;AACD,SAASK,QAAT,CAAkBT,MAAlB,EAA0BwB,IAA1B,EAAgCtB,OAAhC,EAAyCX,QAAzC,EAAmD;EACjD;EACAS,MAAM,CAAC+B,MAAP,CAAc7B,OAAd,EAAuB,CAACH,GAAD,EAAMK,QAAN,KAAmB;IACxC,IAAIL,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf,CAD+B,CAExC;;IACAC,MAAM,CAACgC,IAAP,CAAY5B,QAAQ,IAAI,EAAxB,EAA4B;MAAEoB;IAAF,CAA5B,EAAsC,CAACzB,GAAD,EAAMkC,OAAN,KAAkB;MACtD,IAAIlC,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf,CAD6C,CAEtD;;MACAR,QAAQ,CAACmB,SAAD,EAAYuB,OAAZ,CAAR;IACD,CAJD;EAKD,CARD;AASD;;AACD,SAASb,iCAAT,CAA2CP,IAA3C,EAAiDK,mBAAjD,EAAsE3B,QAAtE,EAAgF;EAC9E,MAAM2C,oBAAoB,GACxB,OAAOhB,mBAAmB,CAACiB,0BAA3B,KAA0D,SAA1D,GACIjB,mBAAmB,CAACiB,0BADxB,GAEI,KAHN;EAIA,IAAI,CAACD,oBAAL,EAA2B,OAAO3C,QAAQ,CAACmB,SAAD,EAAYG,IAAZ,CAAf,CALmD,CAM9E;;EACA/B,GAAG,CAACsD,YAAJ,CAAiBvB,IAAjB,EAAuB,CAACd,GAAD,EAAMsC,CAAN,KAAY;IACjC,IAAItC,GAAJ,EAAS,OAAOR,QAAQ,CAACQ,GAAD,CAAf,CADwB,CAEjC;;IACA,IAAIuC,KAAK,CAACC,OAAN,CAAcF,CAAd,KAAoBA,CAAC,CAACG,MAAF,GAAW,CAAnC,EAAsC;MACpC,OAAOjD,QAAQ,CAACmB,SAAD,EAAY2B,CAAC,CAAC,CAAD,CAAb,CAAf;IACD;;IACD9C,QAAQ,CAACmB,SAAD,EAAYG,IAAZ,CAAR;EACD,CAPD;AAQD"},"metadata":{},"sourceType":"script"}