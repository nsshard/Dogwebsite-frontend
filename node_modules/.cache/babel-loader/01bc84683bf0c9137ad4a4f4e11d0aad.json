{"ast":null,"code":"'use strict';\n\nconst Snappy = require('../connection/utils').retrieveSnappy();\n\nconst zlib = require('zlib');\n\nconst compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\nconst uncompressibleCommands = new Set(['ismaster', 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']); // Facilitate compressing a message using an agreed compressor\n\nfunction compress(self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n\n    default:\n      throw new Error('Attempt to compress message using unknown compressor \"' + self.options.agreedCompressor + '\".');\n  }\n} // Decompress a message using the given compressor\n\n\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error('Server sent message compressed using an unsupported compressor. (Received compressor ID ' + compressorID + ')');\n  }\n\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n\n    default:\n      callback(null, compressedData);\n  }\n}\n\nmodule.exports = {\n  compressorIDs,\n  uncompressibleCommands,\n  compress,\n  decompress\n};","map":{"version":3,"names":["Snappy","require","retrieveSnappy","zlib","compressorIDs","snappy","uncompressibleCommands","Set","compress","self","dataToBeCompressed","callback","options","agreedCompressor","zlibOptions","zlibCompressionLevel","level","deflate","Error","decompress","compressorID","compressedData","length","uncompress","inflate","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/wireprotocol/compression.js"],"sourcesContent":["'use strict';\n\nconst Snappy = require('../connection/utils').retrieveSnappy();\nconst zlib = require('zlib');\n\nconst compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\n\nconst uncompressibleCommands = new Set([\n  'ismaster',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\n// Facilitate compressing a message using an agreed compressor\nfunction compress(self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n    default:\n      throw new Error(\n        'Attempt to compress message using unknown compressor \"' +\n          self.options.agreedCompressor +\n          '\".'\n      );\n  }\n}\n\n// Decompress a message using the given compressor\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error(\n      'Server sent message compressed using an unsupported compressor. (Received compressor ID ' +\n        compressorID +\n        ')'\n    );\n  }\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n    default:\n      callback(null, compressedData);\n  }\n}\n\nmodule.exports = {\n  compressorIDs,\n  uncompressibleCommands,\n  compress,\n  decompress\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BC,cAA/B,EAAf;;AACA,MAAMC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,aAAa,GAAG;EACpBC,MAAM,EAAE,CADY;EAEpBF,IAAI,EAAE;AAFc,CAAtB;AAKA,MAAMG,sBAAsB,GAAG,IAAIC,GAAJ,CAAQ,CACrC,UADqC,EAErC,WAFqC,EAGrC,cAHqC,EAIrC,UAJqC,EAKrC,cALqC,EAMrC,YANqC,EAOrC,YAPqC,EAQrC,iBARqC,EASrC,gBATqC,EAUrC,QAVqC,CAAR,CAA/B,C,CAaA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,kBAAxB,EAA4CC,QAA5C,EAAsD;EACpD,QAAQF,IAAI,CAACG,OAAL,CAAaC,gBAArB;IACE,KAAK,QAAL;MACEb,MAAM,CAACQ,QAAP,CAAgBE,kBAAhB,EAAoCC,QAApC;MACA;;IACF,KAAK,MAAL;MACE;MACA,IAAIG,WAAW,GAAG,EAAlB;;MACA,IAAIL,IAAI,CAACG,OAAL,CAAaG,oBAAjB,EAAuC;QACrCD,WAAW,CAACE,KAAZ,GAAoBP,IAAI,CAACG,OAAL,CAAaG,oBAAjC;MACD;;MACDZ,IAAI,CAACc,OAAL,CAAaP,kBAAb,EAAiCI,WAAjC,EAA8CH,QAA9C;MACA;;IACF;MACE,MAAM,IAAIO,KAAJ,CACJ,2DACET,IAAI,CAACG,OAAL,CAAaC,gBADf,GAEE,IAHE,CAAN;EAbJ;AAmBD,C,CAED;;;AACA,SAASM,UAAT,CAAoBC,YAApB,EAAkCC,cAAlC,EAAkDV,QAAlD,EAA4D;EAC1D,IAAIS,YAAY,GAAG,CAAf,IAAoBA,YAAY,GAAGhB,aAAa,CAACkB,MAArD,EAA6D;IAC3D,MAAM,IAAIJ,KAAJ,CACJ,6FACEE,YADF,GAEE,GAHE,CAAN;EAKD;;EACD,QAAQA,YAAR;IACE,KAAKhB,aAAa,CAACC,MAAnB;MACEL,MAAM,CAACuB,UAAP,CAAkBF,cAAlB,EAAkCV,QAAlC;MACA;;IACF,KAAKP,aAAa,CAACD,IAAnB;MACEA,IAAI,CAACqB,OAAL,CAAaH,cAAb,EAA6BV,QAA7B;MACA;;IACF;MACEA,QAAQ,CAAC,IAAD,EAAOU,cAAP,CAAR;EARJ;AAUD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;EACftB,aADe;EAEfE,sBAFe;EAGfE,QAHe;EAIfW;AAJe,CAAjB"},"metadata":{},"sourceType":"script"}