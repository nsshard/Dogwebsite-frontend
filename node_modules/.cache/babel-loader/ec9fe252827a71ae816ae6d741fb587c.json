{"ast":null,"code":"'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst MongoCredentials = require('./mongo_credentials').MongoCredentials;\n\nconst MongoError = require('../error').MongoError;\n\nconst crypto = require('crypto');\n\nconst http = require('http');\n\nconst maxWireVersion = require('../utils').maxWireVersion;\n\nconst url = require('url');\n\nlet aws4;\n\ntry {\n  aws4 = require('aws4');\n} catch (e) {// don't do anything;\n}\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n\nclass MongoDBAWS extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n\n    if (maxWireVersion(connection) < 9) {\n      callback(new MongoError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n\n    if (aws4 == null) {\n      callback(new MongoError('MONGODB-AWS authentication requires the `aws4` module, please install it as a dependency of your project'));\n      return;\n    }\n\n    if (credentials.username == null) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err) return callback(err);\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n      return;\n    }\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const db = credentials.source;\n    const token = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    const bson = this.bson;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: bson.serialize({\n          r: nonce,\n          p: ASCII_N\n        })\n      };\n      connection.command(`${db}.$cmd`, saslStart, (err, result) => {\n        if (err) return callback(err);\n        const res = result.result;\n        const serverResponse = bson.deserialize(res.payload.buffer);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n\n        if (serverNonce.length !== 64) {\n          callback(new MongoError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n          return;\n        }\n\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          callback(new MongoError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          callback(new MongoError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = aws4.sign({\n          method: 'POST',\n          host,\n          region: deriveRegion(serverResponse.h),\n          service: 'sts',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': body.length,\n            'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n            'X-MongoDB-GS2-CB-Flag': 'n'\n          },\n          path: '/',\n          body\n        }, {\n          accessKeyId: username,\n          secretAccessKey: password,\n          token\n        });\n        const authorization = options.headers.Authorization;\n        const date = options.headers['X-Amz-Date'];\n        const payload = {\n          a: authorization,\n          d: date\n        };\n\n        if (token) {\n          payload.t = token;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: bson.serialize(payload)\n        };\n        connection.command(`${db}.$cmd`, saslContinue, err => {\n          if (err) return callback(err);\n          callback();\n        });\n      });\n    });\n  }\n\n}\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (creds.AccessKeyId == null || creds.SecretAccessKey == null || creds.Token == null) {\n      callback(new MongoError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(undefined, new MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: 'MONGODB-AWS',\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  } // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n\n\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, (err, res) => {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  } // Otherwise assume we are on an EC2 instance\n  // get a token\n\n\n  request(`${AWS_EC2_URI}/latest/api/token`, {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, (err, token) => {\n    if (err) return callback(err); // get role name\n\n    request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, (err, roleName) => {\n      if (err) return callback(err); // get temp credentials\n\n      request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, (err, creds) => {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\n\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), options);\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n    let data = '';\n    res.on('data', d => data += d);\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        callback(new MongoError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n  req.on('error', err => callback(err));\n  req.end();\n}\n\nmodule.exports = MongoDBAWS;","map":{"version":3,"names":["AuthProvider","require","MongoCredentials","MongoError","crypto","http","maxWireVersion","url","aws4","e","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","MongoDBAWS","auth","authContext","callback","connection","credentials","username","makeTempCredentials","err","tempCredentials","password","db","source","token","mechanismProperties","AWS_SESSION_TOKEN","bson","randomBytes","nonce","saslStart","mechanism","payload","serialize","r","p","command","result","res","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","compare","indexOf","body","options","sign","method","region","deriveRegion","service","headers","toString","path","accessKeyId","secretAccessKey","authorization","Authorization","date","a","d","t","saslContinue","conversationId","done","creds","AccessKeyId","SecretAccessKey","Token","undefined","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","json","roleName","parts","split","uri","Object","assign","timeout","parse","req","setEncoding","data","on","parsed","JSON","end","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/auth/mongodb_aws.js"],"sourcesContent":["'use strict';\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst MongoCredentials = require('./mongo_credentials').MongoCredentials;\nconst MongoError = require('../error').MongoError;\nconst crypto = require('crypto');\nconst http = require('http');\nconst maxWireVersion = require('../utils').maxWireVersion;\nconst url = require('url');\n\nlet aws4;\ntry {\n  aws4 = require('aws4');\n} catch (e) {\n  // don't do anything;\n}\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n\nclass MongoDBAWS extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n\n    if (maxWireVersion(connection) < 9) {\n      callback(new MongoError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n\n    if (aws4 == null) {\n      callback(\n        new MongoError(\n          'MONGODB-AWS authentication requires the `aws4` module, please install it as a dependency of your project'\n        )\n      );\n\n      return;\n    }\n\n    if (credentials.username == null) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err) return callback(err);\n\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n\n      return;\n    }\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const db = credentials.source;\n    const token = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    const bson = this.bson;\n\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: bson.serialize({ r: nonce, p: ASCII_N })\n      };\n\n      connection.command(`${db}.$cmd`, saslStart, (err, result) => {\n        if (err) return callback(err);\n\n        const res = result.result;\n        const serverResponse = bson.deserialize(res.payload.buffer);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n          callback(\n            new MongoError(`Invalid server nonce length ${serverNonce.length}, expected 64`)\n          );\n          return;\n        }\n\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          callback(new MongoError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          callback(new MongoError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = aws4.sign(\n          {\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Content-Length': body.length,\n              'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n              'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n          },\n          {\n            accessKeyId: username,\n            secretAccessKey: password,\n            token\n          }\n        );\n\n        const authorization = options.headers.Authorization;\n        const date = options.headers['X-Amz-Date'];\n        const payload = { a: authorization, d: date };\n        if (token) {\n          payload.t = token;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: bson.serialize(payload)\n        };\n\n        connection.command(`${db}.$cmd`, saslContinue, err => {\n          if (err) return callback(err);\n          callback();\n        });\n      });\n    });\n  }\n}\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (creds.AccessKeyId == null || creds.SecretAccessKey == null || creds.Token == null) {\n      callback(new MongoError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(\n      undefined,\n      new MongoCredentials({\n        username: creds.AccessKeyId,\n        password: creds.SecretAccessKey,\n        source: credentials.source,\n        mechanism: 'MONGODB-AWS',\n        mechanismProperties: {\n          AWS_SESSION_TOKEN: creds.Token\n        }\n      })\n    );\n  }\n\n  // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(\n      `${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`,\n      (err, res) => {\n        if (err) return callback(err);\n        done(res);\n      }\n    );\n\n    return;\n  }\n\n  // Otherwise assume we are on an EC2 instance\n\n  // get a token\n\n  request(\n    `${AWS_EC2_URI}/latest/api/token`,\n    { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } },\n    (err, token) => {\n      if (err) return callback(err);\n\n      // get role name\n      request(\n        `${AWS_EC2_URI}/${AWS_EC2_PATH}`,\n        { json: false, headers: { 'X-aws-ec2-metadata-token': token } },\n        (err, roleName) => {\n          if (err) return callback(err);\n\n          // get temp credentials\n          request(\n            `${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`,\n            { headers: { 'X-aws-ec2-metadata-token': token } },\n            (err, creds) => {\n              if (err) return callback(err);\n              done(creds);\n            }\n          );\n        }\n      );\n    }\n  );\n}\n\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = Object.assign(\n    {\n      method: 'GET',\n      timeout: 10000,\n      json: true\n    },\n    url.parse(uri),\n    options\n  );\n\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n\n    let data = '';\n    res.on('data', d => (data += d));\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        callback(new MongoError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n\n  req.on('error', err => callback(err));\n  req.end();\n}\n\nmodule.exports = MongoDBAWS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}