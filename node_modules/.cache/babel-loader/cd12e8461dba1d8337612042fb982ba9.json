{"ast":null,"code":"'use strict';\n\nconst Denque = require('denque');\n\nconst EventEmitter = require('events');\n\nconst ServerDescription = require('./server_description').ServerDescription;\n\nconst ServerType = require('./common').ServerType;\n\nconst TopologyDescription = require('./topology_description').TopologyDescription;\n\nconst TopologyType = require('./common').TopologyType;\n\nconst events = require('./events');\n\nconst Server = require('./server').Server;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst ReadPreference = require('../topologies/read_preference');\n\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\n\nconst CoreCursor = require('../cursor').CoreCursor;\n\nconst deprecate = require('util').deprecate;\n\nconst BSON = require('../connection/utils').retrieveBSON();\n\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\n\nconst ClientSession = require('../sessions').ClientSession;\n\nconst MongoError = require('../error').MongoError;\n\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\n\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\n\nconst SrvPoller = require('./srv_polling').SrvPoller;\n\nconst getMMAPError = require('../topologies/shared').getMMAPError;\n\nconst makeStateMachine = require('../utils').makeStateMachine;\n\nconst eachAsync = require('../utils').eachAsync;\n\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\n\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\n\nconst makeClientMetadata = require('../utils').makeClientMetadata;\n\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nconst compareTopologyVersion = require('./server_description').compareTopologyVersion;\n\nconst common = require('./common');\n\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\n\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector; // Global state\n\nlet globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nconst SERVER_RELAY_EVENTS = ['serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'commandStarted', 'commandSucceeded', 'commandFailed', // NOTE: Legacy events\n'monitoring'].concat(CMAP_EVENT_NAMES); // all events we listen to from `Server` instances\n\nconst LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\nconst DEPRECATED_OPTIONS = new Set(['autoReconnect', 'reconnectTries', 'reconnectInterval', 'bufferMaxEntries']);\nconst kCancelled = Symbol('cancelled');\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\n\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = []; // this is for legacy single server constructor support\n\n      if (options.host) {\n        seedlist.push({\n          host: options.host,\n          port: options.port\n        });\n      }\n    }\n\n    seedlist = seedlist || [];\n\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(Object.assign(options, {\n      metadata: makeClientMetadata(options),\n      compression: {\n        compressors: createCompressionInfo(options)\n      }\n    }));\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(`The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`, 'DeprecationWarning');\n      }\n    });\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(topologyType, serverDescriptions, options.replicaSet, null, null, null, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      this.s.srvPoller = options.srvPoller || new SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        // TODO: GET THIS\n        logger: options.logger,\n        loggerLevel: options.loggerLevel\n      });\n\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    } // NOTE: remove this when NODE-1709 is resolved\n\n\n    this.setMaxListeners(Infinity);\n  }\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n\n\n  connect(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {};\n\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    connectServers(this, Array.from(this.s.description.servers.values()));\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    const connectHandler = err => {\n      if (err) {\n        this.close();\n\n        if (typeof callback === 'function') {\n          callback(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit('open', err, this);\n      this.emit('connect', this);\n      if (typeof callback === 'function') callback(err, this);\n    }; // TODO: NODE-2471\n\n\n    if (this.s.credentials) {\n      this.command('admin.$cmd', {\n        ping: 1\n      }, {\n        readPreference\n      }, connectHandler);\n      return;\n    }\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, connectHandler);\n  }\n  /**\n   * Close this topology\n   */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options || {};\n\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    this.s.sessions.forEach(session => session.endSession());\n    this.s.sessionPool.endAllPooledSessions(() => {\n      eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n        this.s.servers.clear(); // emit an event for close\n\n        this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\n        stateTransition(this, STATE_CLOSED);\n        this.emit('close');\n\n        if (typeof callback === 'function') {\n          callback(err);\n        }\n      });\n    });\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n\n\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n\n      if (typeof selector !== 'function') {\n        options = selector;\n        let readPreference;\n\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else if (typeof selector === 'string') {\n          readPreference = new ReadPreference(selector);\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    } // support server selection by options with readPreference\n\n\n    let serverSelector = selector;\n\n    if (typeof selector === 'object') {\n      const readPreference = selector.readPreference ? selector.readPreference : ReadPreference.primary;\n      serverSelector = readPreferenceServerSelector(readPreference);\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /**\n   * Start a logical session\n   */\n\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command('admin.$cmd', {\n      endSessions: sessions\n    }, {\n      readPreference: ReadPreference.primaryPreferred,\n      noResponse: true\n    }, () => {\n      // intentionally ignored, per spec\n      if (typeof callback === 'function') callback();\n    });\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address); // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      this.emit('serverDescriptionChanged', new events.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, this.s.description.servers.get(serverDescription.address)));\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = null;\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  } // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'insert',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  update(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'update',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'remove',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options || {};\n    }\n\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite = !options.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(this) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n\n        if (!shouldRetryOperation(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, {\n            retrying: true\n          });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      }; // increment and assign txnNumber\n\n\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n\n\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    ReadPreference.translate(options);\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    console.log('not implemented: `unref`');\n  } // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n\n\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function () {\n    return this.s.clusterTime;\n  },\n  set: function (clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}); // legacy aliases\n\nTopology.prototype.destroy = deprecate(Topology.prototype.close, 'destroy() is deprecated, please use close() instead');\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription.topologyVersion;\n  return compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\n\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, () => {\n    topology.emit('serverClosed', new events.ServerClosedEvent(topology.s.id, server.description.address));\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\n\n\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  if (options.directConnection) {\n    return TopologyType.Single;\n  }\n\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n\n  if (replicaSet == null) {\n    return TopologyType.Unknown;\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit('serverOpening', new events.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    destroyServer(server, topology);\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(topology) && !options.session.inTransaction();\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n\n      if (!shouldRetryOperation(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, {\n          retrying: true\n        });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    } // increment and assign txnNumber\n\n\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    } // execute the write operation\n\n\n    server[op](ns, ops, options, handler);\n  });\n}\n\nfunction shouldRetryOperation(err) {\n  return err instanceof MongoError && err.hasErrorLabel('RetryableWriteError');\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n    topology.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(topology.s.id, previousTopologyDescription, topology.s.description));\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    clearTimeout(waitQueueMember.timer);\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    const isSharded = topology.description.type === TopologyType.Sharded;\n\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\n  }\n}\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\n\nmodule.exports = {\n  Topology\n};","map":{"version":3,"names":["Denque","require","EventEmitter","ServerDescription","ServerType","TopologyDescription","TopologyType","events","Server","relayEvents","ReadPreference","isRetryableWritesSupported","CoreCursor","deprecate","BSON","retrieveBSON","createCompressionInfo","ClientSession","MongoError","MongoServerSelectionError","resolveClusterTime","SrvPoller","getMMAPError","makeStateMachine","eachAsync","emitDeprecationWarning","ServerSessionPool","makeClientMetadata","CMAP_EVENT_NAMES","compareTopologyVersion","common","drainTimerQueue","clearAndRemoveTimerFrom","serverSelection","readPreferenceServerSelector","writableServerSelector","globalTopologyCounter","SERVER_RELAY_EVENTS","concat","LOCAL_SERVER_EVENTS","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","stateTransition","DEPRECATED_OPTIONS","Set","kCancelled","Symbol","kWaitQueue","Topology","constructor","seedlist","options","host","push","port","parseStringSeedlist","Object","assign","TOPOLOGY_DEFAULTS","freeze","metadata","compression","compressors","forEach","optionName","topologyType","topologyTypeFromSeedlist","topologyId","serverDescriptions","reduce","result","seed","domain_socket","address","set","Map","s","id","state","description","replicaSet","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Cursor","cursorFactory","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","MaxKey","MinKey","ObjectId","BSONRegExp","Timestamp","servers","sessionPool","sessions","promiseLibrary","Promise","credentials","clusterTime","connectionTimers","srvHost","srvPoller","logger","loggerLevel","detectTopologyDescriptionChange","ev","previousType","previousDescription","type","newType","newDescription","Sharded","handleSrvPolling","srvPollingHandler","on","start","setMaxListeners","Infinity","parserType","native","connect","callback","emit","TopologyOpeningEvent","TopologyDescriptionChangedEvent","Unknown","connectServers","Array","from","values","translate","readPreference","primary","connectHandler","err","close","command","ping","selectServer","force","drainWaitQueue","stop","removeListener","session","endSession","endAllPooledSessions","server","cb","destroyServer","clear","TopologyClosedEvent","selector","isSharded","transaction","undefined","serverSelector","waitQueueMember","timer","setTimeout","timeoutError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","once","delete","add","endSessions","isArray","primaryPreferred","noResponse","serverUpdateHandler","serverDescription","hasServer","isStaleServerDescription","previousTopologyDescription","previousServerDescription","get","$clusterTime","equalDescriptions","equals","update","compatibilityError","ServerDescriptionChangedEvent","updateServers","length","auth","logout","insert","ns","ops","executeWriteOperation","topology","op","remove","cmd","willRetryWrite","retrying","retryWrites","inTransaction","isWriteCommand","shouldRetryOperation","newOptions","incrementTransactionNumber","cursor","CursorClass","clientMetadata","isConnected","isDestroyed","unref","console","log","lastIsMaster","sd","filter","maxWireVersion","commonWireVersion","defineProperty","prototype","enumerable","destroy","RETRYABLE_WRITE_OPERATIONS","some","topologyDescription","incomingServerDescription","currentServerDescription","currentTopologyVersion","topologyVersion","event","removeAllListeners","ServerClosedEvent","split","map","directConnection","setName","rs_name","ReplicaSetNoPrimary","randomSelection","array","Math","floor","random","createAndConnectServer","connectDelay","ServerOpeningEvent","bind","connectTimer","has","entry","serverAddress","args","handler","newArgs","operationId","hasErrorLabel","updateFromSrvPollingEvent","queue","shift","clearTimeout","membersToProcess","i","selectedDescriptions","e","selectedServerDescription","selectedServer","isActive","pinServer","process","nextTick","requestCheck","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/sdam/topology.js"],"sourcesContent":["'use strict';\nconst Denque = require('denque');\nconst EventEmitter = require('events');\nconst ServerDescription = require('./server_description').ServerDescription;\nconst ServerType = require('./common').ServerType;\nconst TopologyDescription = require('./topology_description').TopologyDescription;\nconst TopologyType = require('./common').TopologyType;\nconst events = require('./events');\nconst Server = require('./server').Server;\nconst relayEvents = require('../utils').relayEvents;\nconst ReadPreference = require('../topologies/read_preference');\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst deprecate = require('util').deprecate;\nconst BSON = require('../connection/utils').retrieveBSON();\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\nconst ClientSession = require('../sessions').ClientSession;\nconst MongoError = require('../error').MongoError;\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\nconst SrvPoller = require('./srv_polling').SrvPoller;\nconst getMMAPError = require('../topologies/shared').getMMAPError;\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst eachAsync = require('../utils').eachAsync;\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\nconst compareTopologyVersion = require('./server_description').compareTopologyVersion;\n\nconst common = require('./common');\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector;\n\n// Global state\nlet globalTopologyCounter = 0;\n\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'commandStarted',\n  'commandSucceeded',\n  'commandFailed',\n\n  // NOTE: Legacy events\n  'monitoring'\n].concat(CMAP_EVENT_NAMES);\n\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\n\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\nconst DEPRECATED_OPTIONS = new Set([\n  'autoReconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'bufferMaxEntries'\n]);\n\nconst kCancelled = Symbol('cancelled');\nconst kWaitQueue = Symbol('waitQueue');\n\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = [];\n\n      // this is for legacy single server constructor support\n      if (options.host) {\n        seedlist.push({ host: options.host, port: options.port });\n      }\n    }\n\n    seedlist = seedlist || [];\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(\n      Object.assign(options, {\n        metadata: makeClientMetadata(options),\n        compression: { compressors: createCompressionInfo(options) }\n      })\n    );\n\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(\n          `The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,\n          'DeprecationWarning'\n        );\n      }\n    });\n\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        null,\n        null,\n        null,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      this.s.srvPoller =\n        options.srvPoller ||\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost, // TODO: GET THIS\n          logger: options.logger,\n          loggerLevel: options.loggerLevel\n        });\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    }\n\n    // NOTE: remove this when NODE-1709 is resolved\n    this.setMaxListeners(Infinity);\n  }\n\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n  connect(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    connectServers(this, Array.from(this.s.description.servers.values()));\n\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    const connectHandler = err => {\n      if (err) {\n        this.close();\n\n        if (typeof callback === 'function') {\n          callback(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit('open', err, this);\n      this.emit('connect', this);\n\n      if (typeof callback === 'function') callback(err, this);\n    };\n\n    // TODO: NODE-2471\n    if (this.s.credentials) {\n      this.command('admin.$cmd', { ping: 1 }, { readPreference }, connectHandler);\n      return;\n    }\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, connectHandler);\n  }\n\n  /**\n   * Close this topology\n   */\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n\n    options = options || {};\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    this.s.sessions.forEach(session => session.endSession());\n    this.s.sessionPool.endAllPooledSessions(() => {\n      eachAsync(\n        Array.from(this.s.servers.values()),\n        (server, cb) => destroyServer(server, this, options, cb),\n        err => {\n          this.s.servers.clear();\n\n          // emit an event for close\n          this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\n\n          stateTransition(this, STATE_CLOSED);\n          this.emit('close');\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      if (typeof selector !== 'function') {\n        options = selector;\n\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else if (typeof selector === 'string') {\n          readPreference = new ReadPreference(selector);\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    // support server selection by options with readPreference\n    let serverSelector = selector;\n    if (typeof selector === 'object') {\n      const readPreference = selector.readPreference\n        ? selector.readPreference\n        : ReadPreference.primary;\n\n      serverSelector = readPreferenceServerSelector(readPreference);\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /**\n   * Start a logical session\n   */\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred, noResponse: true },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      this.emit(\n        'serverDescriptionChanged',\n        new events.ServerDescriptionChangedEvent(\n          this.s.id,\n          serverDescription.address,\n          previousServerDescription,\n          this.s.description.servers.get(serverDescription.address)\n        )\n      );\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(\n        'topologyDescriptionChanged',\n        new events.TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = null);\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'remove', ns, ops }, options, callback);\n  }\n\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite =\n        !options.retrying &&\n        !!options.retryWrites &&\n        options.session &&\n        isRetryableWritesSupported(this) &&\n        !options.session.inTransaction() &&\n        isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n        if (!shouldRetryOperation(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, { retrying: true });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      };\n\n      // increment and assign txnNumber\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    ReadPreference.translate(options);\n\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    console.log('not implemented: `unref`');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function() {\n    return this.s.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n});\n\n// legacy aliases\nTopology.prototype.destroy = deprecate(\n  Topology.prototype.close,\n  'destroy() is deprecated, please use close() instead'\n);\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n\n  server.destroy(options, () => {\n    topology.emit(\n      'serverClosed',\n      new events.ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  if (options.directConnection) {\n    return TopologyType.Single;\n  }\n\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (replicaSet == null) {\n    return TopologyType.Unknown;\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit(\n    'serverOpening',\n    new events.ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    destroyServer(server, topology);\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(topology) &&\n    !options.session.inTransaction();\n\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n      if (!shouldRetryOperation(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, { retrying: true });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    }\n\n    // increment and assign txnNumber\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    }\n\n    // execute the write operation\n    server[op](ns, ops, options, handler);\n  });\n}\n\nfunction shouldRetryOperation(err) {\n  return err instanceof MongoError && err.hasErrorLabel('RetryableWriteError');\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n\n    topology.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        topology.s.id,\n        previousTopologyDescription,\n        topology.s.description\n      )\n    );\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    clearTimeout(waitQueueMember.timer);\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    const isSharded = topology.description.type === TopologyType.Sharded;\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\n  }\n}\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\nmodule.exports = {\n  Topology\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}