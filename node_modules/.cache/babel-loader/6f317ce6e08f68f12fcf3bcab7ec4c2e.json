{"ast":null,"code":"'use strict'; // this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js');\n\nconst Header = require('./header.js');\n\nconst EE = require('events');\n\nconst Yallist = require('yallist');\n\nconst maxMetaEntrySize = 1024 * 1024;\n\nconst Entry = require('./read-entry.js');\n\nconst Pax = require('./pax.js');\n\nconst zlib = require('minizlib');\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b]);\nconst STATE = Symbol('state');\nconst WRITEENTRY = Symbol('writeEntry');\nconst READENTRY = Symbol('readEntry');\nconst NEXTENTRY = Symbol('nextEntry');\nconst PROCESSENTRY = Symbol('processEntry');\nconst EX = Symbol('extendedHeader');\nconst GEX = Symbol('globalExtendedHeader');\nconst META = Symbol('meta');\nconst EMITMETA = Symbol('emitMeta');\nconst BUFFER = Symbol('buffer');\nconst QUEUE = Symbol('queue');\nconst ENDED = Symbol('ended');\nconst EMITTEDEND = Symbol('emittedEnd');\nconst EMIT = Symbol('emit');\nconst UNZIP = Symbol('unzip');\nconst CONSUMECHUNK = Symbol('consumeChunk');\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub');\nconst CONSUMEBODY = Symbol('consumeBody');\nconst CONSUMEMETA = Symbol('consumeMeta');\nconst CONSUMEHEADER = Symbol('consumeHeader');\nconst CONSUMING = Symbol('consuming');\nconst BUFFERCONCAT = Symbol('bufferConcat');\nconst MAYBEEND = Symbol('maybeEnd');\nconst WRITING = Symbol('writing');\nconst ABORTED = Symbol('aborted');\nconst DONE = Symbol('onDone');\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry');\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock');\nconst SAW_EOF = Symbol('sawEOF');\n\nconst noop = _ => true;\n\nmodule.exports = warner(class Parser extends EE {\n  constructor(opt) {\n    opt = opt || {};\n    super(opt);\n    this.file = opt.file || ''; // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n\n    this[SAW_VALID_ENTRY] = null; // these BADARCHIVE errors can't be detected early. listen on DONE.\n\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format');\n      }\n    });\n    if (opt.ondone) this.on(DONE, opt.ondone);else {\n      this.on(DONE, _ => {\n        this.emit('prefinish');\n        this.emit('finish');\n        this.emit('end');\n        this.emit('close');\n      });\n    }\n    this.strict = !!opt.strict;\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop; // have to set this so that streams are ok piping into it\n\n    this.writable = true;\n    this.readable = false;\n    this[QUEUE] = new Yallist();\n    this[BUFFER] = null;\n    this[READENTRY] = null;\n    this[WRITEENTRY] = null;\n    this[STATE] = 'begin';\n    this[META] = '';\n    this[EX] = null;\n    this[GEX] = null;\n    this[ENDED] = false;\n    this[UNZIP] = null;\n    this[ABORTED] = false;\n    this[SAW_NULL_BLOCK] = false;\n    this[SAW_EOF] = false;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    if (typeof opt.onentry === 'function') this.on('entry', opt.onentry);\n  }\n\n  [CONSUMEHEADER](chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null) this[SAW_VALID_ENTRY] = false;\n    let header;\n\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX]);\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er);\n    }\n\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true; // ending an archive with no entries.  pointless, but legal.\n\n        if (this[STATE] === 'begin') this[STATE] = 'header';\n        this[EMIT]('eof');\n      } else {\n        this[SAW_NULL_BLOCK] = true;\n        this[EMIT]('nullBlock');\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false;\n      if (!header.cksumValid) this.warn('TAR_ENTRY_INVALID', 'checksum failure', {\n        header\n      });else if (!header.path) this.warn('TAR_ENTRY_INVALID', 'path is required', {\n        header\n      });else {\n        const type = header.type;\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) this.warn('TAR_ENTRY_INVALID', 'linkpath required', {\n          header\n        });else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', {\n          header\n        });else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]); // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid) this[SAW_VALID_ENTRY] = true;\n              };\n\n              entry.on('end', onend);\n            } else this[SAW_VALID_ENTRY] = true;\n          }\n\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true;\n              this[EMIT]('ignoredEntry', entry);\n              this[STATE] = 'ignore';\n              entry.resume();\n            } else if (entry.size > 0) {\n              this[META] = '';\n              entry.on('data', c => this[META] += c);\n              this[STATE] = 'meta';\n            }\n          } else {\n            this[EX] = null;\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry);\n\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry);\n              this[STATE] = entry.remain ? 'ignore' : 'header';\n              entry.resume();\n            } else {\n              if (entry.remain) this[STATE] = 'body';else {\n                this[STATE] = 'header';\n                entry.end();\n              }\n\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry);\n                this[NEXTENTRY]();\n              } else this[QUEUE].push(entry);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  [PROCESSENTRY](entry) {\n    let go = true;\n\n    if (!entry) {\n      this[READENTRY] = null;\n      go = false;\n    } else if (Array.isArray(entry)) this.emit.apply(this, entry);else {\n      this[READENTRY] = entry;\n      this.emit('entry', entry);\n\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]());\n        go = false;\n      }\n    }\n\n    return go;\n  }\n\n  [NEXTENTRY]() {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()));\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY];\n      const drainNow = !re || re.flowing || re.size === re.remain;\n\n      if (drainNow) {\n        if (!this[WRITING]) this.emit('drain');\n      } else re.once('drain', _ => this.emit('drain'));\n    }\n  }\n\n  [CONSUMEBODY](chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY];\n    const br = entry.blockRemain;\n    const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);\n    entry.write(c);\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'header';\n      this[WRITEENTRY] = null;\n      entry.end();\n    }\n\n    return c.length;\n  }\n\n  [CONSUMEMETA](chunk, position) {\n    const entry = this[WRITEENTRY];\n    const ret = this[CONSUMEBODY](chunk, position); // if we finished, then the entry is reset\n\n    if (!this[WRITEENTRY]) this[EMITMETA](entry);\n    return ret;\n  }\n\n  [EMIT](ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY]) this.emit(ev, data, extra);else this[QUEUE].push([ev, data, extra]);\n  }\n\n  [EMITMETA](entry) {\n    this[EMIT]('meta', this[META]);\n\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false);\n        break;\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true);\n        break;\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].path = this[META].replace(/\\0.*/, '');\n        break;\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].linkpath = this[META].replace(/\\0.*/, '');\n        break;\n\n      /* istanbul ignore next */\n\n      default:\n        throw new Error('unknown meta: ' + entry.type);\n    }\n  }\n\n  abort(error) {\n    this[ABORTED] = true;\n    this.emit('abort', error); // always throws, even in non-strict mode\n\n    this.warn('TAR_ABORT', error, {\n      recoverable: false\n    });\n  }\n\n  write(chunk) {\n    if (this[ABORTED]) return; // first write, might be gzipped\n\n    if (this[UNZIP] === null && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk]);\n        this[BUFFER] = null;\n      }\n\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk;\n        return true;\n      }\n\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i]) this[UNZIP] = false;\n      }\n\n      if (this[UNZIP] === null) {\n        const ended = this[ENDED];\n        this[ENDED] = false;\n        this[UNZIP] = new zlib.Unzip();\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk));\n        this[UNZIP].on('error', er => this.abort(er));\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true;\n          this[CONSUMECHUNK]();\n        });\n        this[WRITING] = true;\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk);\n        this[WRITING] = false;\n        return ret;\n      }\n    }\n\n    this[WRITING] = true;\n    if (this[UNZIP]) this[UNZIP].write(chunk);else this[CONSUMECHUNK](chunk);\n    this[WRITING] = false; // return false if there's a queue, or if the current entry isn't flowing\n\n    const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true; // if we have no queue, then that means a clogged READENTRY\n\n    if (!ret && !this[QUEUE].length) this[READENTRY].once('drain', _ => this.emit('drain'));\n    return ret;\n  }\n\n  [BUFFERCONCAT](c) {\n    if (c && !this[ABORTED]) this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;\n  }\n\n  [MAYBEEND]() {\n    if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {\n      this[EMITTEDEND] = true;\n      const entry = this[WRITEENTRY];\n\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0;\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, {\n          entry\n        });\n        if (this[BUFFER]) entry.write(this[BUFFER]);\n        entry.end();\n      }\n\n      this[EMIT](DONE);\n    }\n  }\n\n  [CONSUMECHUNK](chunk) {\n    if (this[CONSUMING]) this[BUFFERCONCAT](chunk);else if (!chunk && !this[BUFFER]) this[MAYBEEND]();else {\n      this[CONSUMING] = true;\n\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk);\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      } else this[CONSUMECHUNKSUB](chunk);\n\n      while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      }\n\n      this[CONSUMING] = false;\n    }\n    if (!this[BUFFER] || this[ENDED]) this[MAYBEEND]();\n  }\n\n  [CONSUMECHUNKSUB](chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0;\n    const length = chunk.length;\n\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position);\n          position += 512;\n          break;\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position);\n          break;\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position);\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error('invalid state: ' + this[STATE]);\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER]) this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);else this[BUFFER] = chunk.slice(position);\n    }\n  }\n\n  end(chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP]) this[UNZIP].end(chunk);else {\n        this[ENDED] = true;\n        this.write(chunk);\n      }\n    }\n  }\n\n});","map":{"version":3,"names":["warner","require","Header","EE","Yallist","maxMetaEntrySize","Entry","Pax","zlib","gzipHeader","Buffer","from","STATE","Symbol","WRITEENTRY","READENTRY","NEXTENTRY","PROCESSENTRY","EX","GEX","META","EMITMETA","BUFFER","QUEUE","ENDED","EMITTEDEND","EMIT","UNZIP","CONSUMECHUNK","CONSUMECHUNKSUB","CONSUMEBODY","CONSUMEMETA","CONSUMEHEADER","CONSUMING","BUFFERCONCAT","MAYBEEND","WRITING","ABORTED","DONE","SAW_VALID_ENTRY","SAW_NULL_BLOCK","SAW_EOF","noop","_","module","exports","Parser","constructor","opt","file","on","warn","ondone","emit","strict","filter","writable","readable","onwarn","onentry","chunk","position","header","er","nullBlock","cksumValid","path","type","test","linkpath","entry","remain","onend","invalid","meta","size","ignore","resume","c","end","push","go","Array","isArray","apply","emittedEnd","shift","length","re","drainNow","flowing","once","br","blockRemain","slice","write","ret","ev","data","extra","parse","Object","create","replace","Error","abort","error","recoverable","concat","i","ended","Unzip","have"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/tar/lib/parse.js"],"sourcesContent":["'use strict'\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js')\nconst Header = require('./header.js')\nconst EE = require('events')\nconst Yallist = require('yallist')\nconst maxMetaEntrySize = 1024 * 1024\nconst Entry = require('./read-entry.js')\nconst Pax = require('./pax.js')\nconst zlib = require('minizlib')\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b])\nconst STATE = Symbol('state')\nconst WRITEENTRY = Symbol('writeEntry')\nconst READENTRY = Symbol('readEntry')\nconst NEXTENTRY = Symbol('nextEntry')\nconst PROCESSENTRY = Symbol('processEntry')\nconst EX = Symbol('extendedHeader')\nconst GEX = Symbol('globalExtendedHeader')\nconst META = Symbol('meta')\nconst EMITMETA = Symbol('emitMeta')\nconst BUFFER = Symbol('buffer')\nconst QUEUE = Symbol('queue')\nconst ENDED = Symbol('ended')\nconst EMITTEDEND = Symbol('emittedEnd')\nconst EMIT = Symbol('emit')\nconst UNZIP = Symbol('unzip')\nconst CONSUMECHUNK = Symbol('consumeChunk')\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub')\nconst CONSUMEBODY = Symbol('consumeBody')\nconst CONSUMEMETA = Symbol('consumeMeta')\nconst CONSUMEHEADER = Symbol('consumeHeader')\nconst CONSUMING = Symbol('consuming')\nconst BUFFERCONCAT = Symbol('bufferConcat')\nconst MAYBEEND = Symbol('maybeEnd')\nconst WRITING = Symbol('writing')\nconst ABORTED = Symbol('aborted')\nconst DONE = Symbol('onDone')\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry')\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock')\nconst SAW_EOF = Symbol('sawEOF')\n\nconst noop = _ => true\n\nmodule.exports = warner(class Parser extends EE {\n  constructor (opt) {\n    opt = opt || {}\n    super(opt)\n\n    this.file = opt.file || ''\n\n    // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n    this[SAW_VALID_ENTRY] = null\n\n    // these BADARCHIVE errors can't be detected early. listen on DONE.\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format')\n      }\n    })\n\n    if (opt.ondone)\n      this.on(DONE, opt.ondone)\n    else {\n      this.on(DONE, _ => {\n        this.emit('prefinish')\n        this.emit('finish')\n        this.emit('end')\n        this.emit('close')\n      })\n    }\n\n    this.strict = !!opt.strict\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop\n\n    // have to set this so that streams are ok piping into it\n    this.writable = true\n    this.readable = false\n\n    this[QUEUE] = new Yallist()\n    this[BUFFER] = null\n    this[READENTRY] = null\n    this[WRITEENTRY] = null\n    this[STATE] = 'begin'\n    this[META] = ''\n    this[EX] = null\n    this[GEX] = null\n    this[ENDED] = false\n    this[UNZIP] = null\n    this[ABORTED] = false\n    this[SAW_NULL_BLOCK] = false\n    this[SAW_EOF] = false\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n    if (typeof opt.onentry === 'function')\n      this.on('entry', opt.onentry)\n  }\n\n  [CONSUMEHEADER] (chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null)\n      this[SAW_VALID_ENTRY] = false\n    let header\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX])\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er)\n    }\n\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true\n        // ending an archive with no entries.  pointless, but legal.\n        if (this[STATE] === 'begin')\n          this[STATE] = 'header'\n        this[EMIT]('eof')\n      } else {\n        this[SAW_NULL_BLOCK] = true\n        this[EMIT]('nullBlock')\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false\n      if (!header.cksumValid)\n        this.warn('TAR_ENTRY_INVALID', 'checksum failure', {header})\n      else if (!header.path)\n        this.warn('TAR_ENTRY_INVALID', 'path is required', {header})\n      else {\n        const type = header.type\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath)\n          this.warn('TAR_ENTRY_INVALID', 'linkpath required', {header})\n        else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath)\n          this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', {header})\n        else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX])\n\n          // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid)\n                  this[SAW_VALID_ENTRY] = true\n              }\n              entry.on('end', onend)\n            } else\n              this[SAW_VALID_ENTRY] = true\n          }\n\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = 'ignore'\n              entry.resume()\n            } else if (entry.size > 0) {\n              this[META] = ''\n              entry.on('data', c => this[META] += c)\n              this[STATE] = 'meta'\n            }\n          } else {\n            this[EX] = null\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry)\n\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = entry.remain ? 'ignore' : 'header'\n              entry.resume()\n            } else {\n              if (entry.remain)\n                this[STATE] = 'body'\n              else {\n                this[STATE] = 'header'\n                entry.end()\n              }\n\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry)\n                this[NEXTENTRY]()\n              } else\n                this[QUEUE].push(entry)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  [PROCESSENTRY] (entry) {\n    let go = true\n\n    if (!entry) {\n      this[READENTRY] = null\n      go = false\n    } else if (Array.isArray(entry))\n      this.emit.apply(this, entry)\n    else {\n      this[READENTRY] = entry\n      this.emit('entry', entry)\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]())\n        go = false\n      }\n    }\n\n    return go\n  }\n\n  [NEXTENTRY] () {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()))\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY]\n      const drainNow = !re || re.flowing || re.size === re.remain\n      if (drainNow) {\n        if (!this[WRITING])\n          this.emit('drain')\n      } else\n        re.once('drain', _ => this.emit('drain'))\n    }\n  }\n\n  [CONSUMEBODY] (chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY]\n    const br = entry.blockRemain\n    const c = (br >= chunk.length && position === 0) ? chunk\n      : chunk.slice(position, position + br)\n\n    entry.write(c)\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'header'\n      this[WRITEENTRY] = null\n      entry.end()\n    }\n\n    return c.length\n  }\n\n  [CONSUMEMETA] (chunk, position) {\n    const entry = this[WRITEENTRY]\n    const ret = this[CONSUMEBODY](chunk, position)\n\n    // if we finished, then the entry is reset\n    if (!this[WRITEENTRY])\n      this[EMITMETA](entry)\n\n    return ret\n  }\n\n  [EMIT] (ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY])\n      this.emit(ev, data, extra)\n    else\n      this[QUEUE].push([ev, data, extra])\n  }\n\n  [EMITMETA] (entry) {\n    this[EMIT]('meta', this[META])\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false)\n        break\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true)\n        break\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].path = this[META].replace(/\\0.*/, '')\n        break\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].linkpath = this[META].replace(/\\0.*/, '')\n        break\n\n      /* istanbul ignore next */\n      default: throw new Error('unknown meta: ' + entry.type)\n    }\n  }\n\n  abort (error) {\n    this[ABORTED] = true\n    this.emit('abort', error)\n    // always throws, even in non-strict mode\n    this.warn('TAR_ABORT', error, { recoverable: false })\n  }\n\n  write (chunk) {\n    if (this[ABORTED])\n      return\n\n    // first write, might be gzipped\n    if (this[UNZIP] === null && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk])\n        this[BUFFER] = null\n      }\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk\n        return true\n      }\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i])\n          this[UNZIP] = false\n      }\n      if (this[UNZIP] === null) {\n        const ended = this[ENDED]\n        this[ENDED] = false\n        this[UNZIP] = new zlib.Unzip()\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk))\n        this[UNZIP].on('error', er => this.abort(er))\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true\n          this[CONSUMECHUNK]()\n        })\n        this[WRITING] = true\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk)\n        this[WRITING] = false\n        return ret\n      }\n    }\n\n    this[WRITING] = true\n    if (this[UNZIP])\n      this[UNZIP].write(chunk)\n    else\n      this[CONSUMECHUNK](chunk)\n    this[WRITING] = false\n\n    // return false if there's a queue, or if the current entry isn't flowing\n    const ret =\n      this[QUEUE].length ? false :\n      this[READENTRY] ? this[READENTRY].flowing :\n      true\n\n    // if we have no queue, then that means a clogged READENTRY\n    if (!ret && !this[QUEUE].length)\n      this[READENTRY].once('drain', _ => this.emit('drain'))\n\n    return ret\n  }\n\n  [BUFFERCONCAT] (c) {\n    if (c && !this[ABORTED])\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c\n  }\n\n  [MAYBEEND] () {\n    if (this[ENDED] &&\n        !this[EMITTEDEND] &&\n        !this[ABORTED] &&\n        !this[CONSUMING]) {\n      this[EMITTEDEND] = true\n      const entry = this[WRITEENTRY]\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${\n          entry.blockRemain} more bytes, only ${have} available)`, {entry})\n        if (this[BUFFER])\n          entry.write(this[BUFFER])\n        entry.end()\n      }\n      this[EMIT](DONE)\n    }\n  }\n\n  [CONSUMECHUNK] (chunk) {\n    if (this[CONSUMING])\n      this[BUFFERCONCAT](chunk)\n    else if (!chunk && !this[BUFFER])\n      this[MAYBEEND]()\n    else {\n      this[CONSUMING] = true\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk)\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      } else\n        this[CONSUMECHUNKSUB](chunk)\n\n      while (this[BUFFER] &&\n          this[BUFFER].length >= 512 &&\n          !this[ABORTED] &&\n          !this[SAW_EOF]) {\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      }\n      this[CONSUMING] = false\n    }\n\n    if (!this[BUFFER] || this[ENDED])\n      this[MAYBEEND]()\n  }\n\n  [CONSUMECHUNKSUB] (chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0\n    const length = chunk.length\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position)\n          position += 512\n          break\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position)\n          break\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position)\n          break\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('invalid state: ' + this[STATE])\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER])\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]])\n      else\n        this[BUFFER] = chunk.slice(position)\n    }\n  }\n\n  end (chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP])\n        this[UNZIP].end(chunk)\n      else {\n        this[ENDED] = true\n        this.write(chunk)\n      }\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}