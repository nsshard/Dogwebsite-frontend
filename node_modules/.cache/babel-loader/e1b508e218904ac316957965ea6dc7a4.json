{"ast":null,"code":"const UploadFile = require(\"../middleware/HandleImageUpload\");\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst Upload = async (req, res) => {\n  try {\n    await UploadFile(req, res);\n\n    if (req.file == undefined) {\n      return res.status(400).send({\n        message: \"You have not uploaded a image or your image is not in JPEG!!\"\n      });\n    }\n\n    res.status(200).send({\n      message: \"Uploaded image successfully! Name: \" + req.file.originalname\n    });\n  } catch (err) {\n    res.status(500).send({\n      message: `Error, could not upload the file: ${req.file.originalname}. ${err}`\n    });\n  }\n};\n\n_c = Upload;\n\nconst GetListFiles = (req, res) => {\n  const baseUrl = \"http://localhost:3000/img/\";\n  const directoryPath = \"../img\";\n  fs.readdir(directoryPath, function (err, files) {\n    if (err) {\n      res.status(500).send({\n        message: \"Unable to scan files!\"\n      });\n    }\n\n    let fileInfos = [];\n    files.forEach(file => {\n      fileInfos.push({\n        name: file,\n        uri: baseUrl + file\n      });\n    });\n    res.status(200).send(fileInfos);\n  });\n};\n\n_c2 = GetListFiles;\n\nconst Download = (req, res) => {\n  const fileName = req.params.name;\n  const directoryPath = \"../img/\";\n  res.download(directoryPath + fileName, fileName, err => {\n    if (err) {\n      res.status(500).send({\n        message: \"Could not download the file. \" + err\n      });\n    }\n  });\n};\n\n_c3 = Download;\nmodule.exports = {\n  Upload,\n  GetListFiles,\n  Download\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Upload\");\n$RefreshReg$(_c2, \"GetListFiles\");\n$RefreshReg$(_c3, \"Download\");","map":{"version":3,"names":["UploadFile","require","fs","path","Upload","req","res","file","undefined","status","send","message","originalname","err","GetListFiles","baseUrl","directoryPath","readdir","files","fileInfos","forEach","push","name","uri","Download","fileName","params","download","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/src/backend/controllers/DogImageController.js"],"sourcesContent":["const UploadFile = require(\"../middleware/HandleImageUpload\");\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst Upload = async (req, res) => {\r\n  try {\r\n    await UploadFile(req, res);\r\n    \r\n    if (req.file == undefined) {\r\n      return res.status(400).send({ message: \"You have not uploaded a image or your image is not in JPEG!!\" });\r\n    }\r\n    res.status(200).send({\r\n      message: \"Uploaded image successfully! Name: \" + req.file.originalname,\r\n    });\r\n  } catch (err) {\r\n    res.status(500).send({\r\n      message: `Error, could not upload the file: ${req.file.originalname}. ${err}`,\r\n    });\r\n  }\r\n};\r\nconst GetListFiles = (req, res) => {\r\n  const baseUrl = \"http://localhost:3000/img/\";\r\n  const directoryPath = \"../img\";\r\n  fs.readdir(directoryPath, function (err, files) {\r\n    if (err) {\r\n      res.status(500).send({\r\n        message: \"Unable to scan files!\",\r\n      });\r\n    }\r\n    let fileInfos = [];\r\n    files.forEach((file) => {\r\n      fileInfos.push({\r\n        name: file,\r\n        uri: baseUrl + file,\r\n      });\r\n    });\r\n    res.status(200).send(fileInfos);\r\n  });\r\n};\r\nconst Download = (req, res) => {\r\n  const fileName = req.params.name;\r\n  const directoryPath =  \"../img/\";\r\n  res.download(directoryPath + fileName, fileName, (err) => {\r\n    if (err) {\r\n      res.status(500).send({\r\n        message: \"Could not download the file. \" + err,\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n  Upload,\r\n  GetListFiles,\r\n  Download,\r\n};"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,iCAAD,CAA1B;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,MAAM,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;EACjC,IAAI;IACF,MAAMN,UAAU,CAACK,GAAD,EAAMC,GAAN,CAAhB;;IAEA,IAAID,GAAG,CAACE,IAAJ,IAAYC,SAAhB,EAA2B;MACzB,OAAOF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;QAAEC,OAAO,EAAE;MAAX,CAArB,CAAP;IACD;;IACDL,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MACnBC,OAAO,EAAE,wCAAwCN,GAAG,CAACE,IAAJ,CAASK;IADvC,CAArB;EAGD,CATD,CASE,OAAOC,GAAP,EAAY;IACZP,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MACnBC,OAAO,EAAG,qCAAoCN,GAAG,CAACE,IAAJ,CAASK,YAAa,KAAIC,GAAI;IADzD,CAArB;EAGD;AACF,CAfD;;KAAMT,M;;AAgBN,MAAMU,YAAY,GAAG,CAACT,GAAD,EAAMC,GAAN,KAAc;EACjC,MAAMS,OAAO,GAAG,4BAAhB;EACA,MAAMC,aAAa,GAAG,QAAtB;EACAd,EAAE,CAACe,OAAH,CAAWD,aAAX,EAA0B,UAAUH,GAAV,EAAeK,KAAf,EAAsB;IAC9C,IAAIL,GAAJ,EAAS;MACPP,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;QACnBC,OAAO,EAAE;MADU,CAArB;IAGD;;IACD,IAAIQ,SAAS,GAAG,EAAhB;IACAD,KAAK,CAACE,OAAN,CAAeb,IAAD,IAAU;MACtBY,SAAS,CAACE,IAAV,CAAe;QACbC,IAAI,EAAEf,IADO;QAEbgB,GAAG,EAAER,OAAO,GAAGR;MAFF,CAAf;IAID,CALD;IAMAD,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,SAArB;EACD,CAdD;AAeD,CAlBD;;MAAML,Y;;AAmBN,MAAMU,QAAQ,GAAG,CAACnB,GAAD,EAAMC,GAAN,KAAc;EAC7B,MAAMmB,QAAQ,GAAGpB,GAAG,CAACqB,MAAJ,CAAWJ,IAA5B;EACA,MAAMN,aAAa,GAAI,SAAvB;EACAV,GAAG,CAACqB,QAAJ,CAAaX,aAAa,GAAGS,QAA7B,EAAuCA,QAAvC,EAAkDZ,GAAD,IAAS;IACxD,IAAIA,GAAJ,EAAS;MACPP,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;QACnBC,OAAO,EAAE,kCAAkCE;MADxB,CAArB;IAGD;EACF,CAND;AAOD,CAVD;;MAAMW,Q;AAcNI,MAAM,CAACC,OAAP,GAAiB;EACfzB,MADe;EAEfU,YAFe;EAGfU;AAHe,CAAjB"},"metadata":{},"sourceType":"module"}