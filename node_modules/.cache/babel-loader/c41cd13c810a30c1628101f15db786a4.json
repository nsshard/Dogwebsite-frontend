{"ast":null,"code":"'use strict';\n\nconst Logger = require('../connection/logger');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst dns = require('dns');\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\n\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  addresses() {\n    return new Set(this.srvRecords.map(record => `${record.name}:${record.port}`));\n  }\n\n}\n\nclass SrvPoller extends EventEmitter {\n  /**\n   * @param {object} options\n   * @param {string} options.srvHost\n   * @param {number} [options.heartbeatFrequencyMS]\n   * @param {function} [options.logger]\n   * @param {string} [options.loggerLevel]\n   */\n  constructor(options) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new TypeError('options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n    this.logger = Logger('srvPoller', options);\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = null;\n  }\n\n  get srvAddress() {\n    return `_mongodb._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = null;\n    }\n  }\n\n  schedule() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit('srvRecordDiscovery', new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(`parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`, srvRecord);\n  }\n\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses = [];\n      srvRecords.forEach(record => {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      });\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n\n}\n\nmodule.exports.SrvPollingEvent = SrvPollingEvent;\nmodule.exports.SrvPoller = SrvPoller;","map":{"version":3,"names":["Logger","require","EventEmitter","dns","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","SrvPollingEvent","constructor","srvRecords","addresses","Set","map","record","name","port","SrvPoller","options","srvHost","TypeError","rescanSrvIntervalMS","heartbeatFrequencyMS","logger","haMode","generation","_timeout","intervalMS","start","schedule","stop","clearTimeout","setTimeout","_poll","success","emit","failure","message","obj","warn","parentDomainMismatch","srvRecord","resolveSrv","err","finalAddresses","forEach","push","length","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/sdam/srv_polling.js"],"sourcesContent":["'use strict';\n\nconst Logger = require('../connection/logger');\nconst EventEmitter = require('events').EventEmitter;\nconst dns = require('dns');\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  addresses() {\n    return new Set(this.srvRecords.map(record => `${record.name}:${record.port}`));\n  }\n}\n\nclass SrvPoller extends EventEmitter {\n  /**\n   * @param {object} options\n   * @param {string} options.srvHost\n   * @param {number} [options.heartbeatFrequencyMS]\n   * @param {function} [options.logger]\n   * @param {string} [options.loggerLevel]\n   */\n  constructor(options) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new TypeError('options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n    this.logger = Logger('srvPoller', options);\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = null;\n  }\n\n  get srvAddress() {\n    return `_mongodb._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = null;\n    }\n  }\n\n  schedule() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit('srvRecordDiscovery', new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(\n      `parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`,\n      srvRecord\n    );\n  }\n\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses = [];\n      srvRecords.forEach(record => {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      });\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n}\n\nmodule.exports.SrvPollingEvent = SrvPollingEvent;\nmodule.exports.SrvPoller = SrvPoller;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}