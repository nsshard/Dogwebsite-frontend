{"ast":null,"code":"// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Long\". This\n * implementation is derived from LongLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a Long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Long.\n * @param {number} high the high (signed) 32 bits of the Long.\n * @return {Long}\n */\nfunction Long(low, high) {\n  if (!(this instanceof Long)) return new Long(low, high);\n  this._bsontype = 'Long';\n  /**\n   * @type {number}\n   * @ignore\n   */\n\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n/**\n * Return the int value.\n *\n * @method\n * @return {number} the value, assuming it is a 32-bit integer.\n */\n\n\nLong.prototype.toInt = function () {\n  return this.low_;\n};\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\n\n\nLong.prototype.toNumber = function () {\n  return this.high_ * Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n/** Converts the Long to a BigInt (arbitrary precision). */\n\n\nLong.prototype.toBigInt = function () {\n  return BigInt(this.toString());\n};\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\n\n\nLong.prototype.toJSON = function () {\n  return this.toString();\n};\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\n\n\nLong.prototype.toString = function (opt_radix) {\n  var radix = opt_radix || 10;\n\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  } // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n\n\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n    rem = remDiv;\n\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n\n      result = '' + digits + result;\n    }\n  }\n};\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\n\n\nLong.prototype.getHighBits = function () {\n  return this.high_;\n};\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\n\n\nLong.prototype.getLowBits = function () {\n  return this.low_;\n};\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\n\n\nLong.prototype.getLowBitsUnsigned = function () {\n  return this.low_ >= 0 ? this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;\n};\n/**\n * Returns the number of bits needed to represent the absolute value of this Long.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Long.\n */\n\n\nLong.prototype.getNumBitsAbs = function () {\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) !== 0) {\n        break;\n      }\n    }\n\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\n\n\nLong.prototype.isZero = function () {\n  return this.high_ === 0 && this.low_ === 0;\n};\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\n\n\nLong.prototype.isNegative = function () {\n  return this.high_ < 0;\n};\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\n\n\nLong.prototype.isOdd = function () {\n  return (this.low_ & 1) === 1;\n};\n/**\n * Return whether this Long equals the other\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long equals the other\n */\n\n\nLong.prototype.equals = function (other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n/**\n * Return whether this Long does not equal the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long does not equal the other.\n */\n\n\nLong.prototype.notEquals = function (other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n/**\n * Return whether this Long is less than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than the other.\n */\n\n\nLong.prototype.lessThan = function (other) {\n  return this.compare(other) < 0;\n};\n/**\n * Return whether this Long is less than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than or equal to the other.\n */\n\n\nLong.prototype.lessThanOrEqual = function (other) {\n  return this.compare(other) <= 0;\n};\n/**\n * Return whether this Long is greater than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than the other.\n */\n\n\nLong.prototype.greaterThan = function (other) {\n  return this.compare(other) > 0;\n};\n/**\n * Return whether this Long is greater than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than or equal to the other.\n */\n\n\nLong.prototype.greaterThanOrEqual = function (other) {\n  return this.compare(other) >= 0;\n};\n/**\n * Compares this Long with the given one.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\n\n\nLong.prototype.compare = function (other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n\n  if (!thisNeg && otherNeg) {\n    return 1;\n  } // at this point, the signs are the same, so subtraction will not overflow\n\n\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\n * The negation of this value.\n *\n * @method\n * @return {Long} the negation of this value.\n */\n\n\nLong.prototype.negate = function () {\n  if (this.equals(Long.MIN_VALUE)) {\n    return Long.MIN_VALUE;\n  } else {\n    return this.not().add(Long.ONE);\n  }\n};\n/**\n * Returns the sum of this and the given Long.\n *\n * @method\n * @param {Long} other Long to add to this one.\n * @return {Long} the sum of this and the given Long.\n */\n\n\nLong.prototype.add = function (other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n/**\n * Returns the difference of this and the given Long.\n *\n * @method\n * @param {Long} other Long to subtract from this.\n * @return {Long} the difference of this and the given Long.\n */\n\n\nLong.prototype.subtract = function (other) {\n  return this.add(other.negate());\n};\n/**\n * Returns the product of this and the given Long.\n *\n * @method\n * @param {Long} other Long to multiply with this.\n * @return {Long} the product of this and the other.\n */\n\n\nLong.prototype.multiply = function (other) {\n  if (this.isZero()) {\n    return Long.ZERO;\n  } else if (other.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  } // If both Longs are small, use float multiplication\n\n\n  if (this.lessThan(Long.TWO_PWR_24_) && other.lessThan(Long.TWO_PWR_24_)) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  } // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n/**\n * Returns this Long divided by the given one.\n *\n * @method\n * @param {Long} other Long by which to divide.\n * @return {Long} this Long divided by the given one.\n */\n\n\nLong.prototype.div = function (other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n      return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n\n      if (approx.equals(Long.ZERO)) {\n        return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  } // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n\n\n  var res = Long.ZERO;\n  rem = this;\n\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48); // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    } // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n\n\n    if (approxRes.isZero()) {\n      approxRes = Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n\n  return res;\n};\n/**\n * Returns this Long modulo the given one.\n *\n * @method\n * @param {Long} other Long by which to mod.\n * @return {Long} this Long modulo the given one.\n */\n\n\nLong.prototype.modulo = function (other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Long} the bitwise-NOT of this value.\n */\n\n\nLong.prototype.not = function () {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n/**\n * Returns the bitwise-AND of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to AND.\n * @return {Long} the bitwise-AND of this and the other.\n */\n\n\nLong.prototype.and = function (other) {\n  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n/**\n * Returns the bitwise-OR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to OR.\n * @return {Long} the bitwise-OR of this and the other.\n */\n\n\nLong.prototype.or = function (other) {\n  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to XOR.\n * @return {Long} the bitwise-XOR of this and the other.\n */\n\n\nLong.prototype.xor = function (other) {\n  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the left by the given amount.\n */\n\n\nLong.prototype.shiftLeft = function (numBits) {\n  numBits &= 63;\n\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);\n    } else {\n      return Long.fromBits(0, low << numBits - 32);\n    }\n  }\n};\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount.\n */\n\n\nLong.prototype.shiftRight = function (numBits) {\n  numBits &= 63;\n\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);\n    } else {\n      return Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);\n    }\n  }\n};\n/**\n * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\n\n\nLong.prototype.shiftRightUnsigned = function (numBits) {\n  numBits &= 63;\n\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);\n    } else if (numBits === 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> numBits - 32, 0);\n    }\n  }\n};\n/**\n * Returns a Long representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Long} the corresponding Long value.\n */\n\n\nLong.fromInt = function (value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Long.INT_CACHE_[value];\n\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Long(value | 0, value < 0 ? -1 : 0);\n\n  if (-128 <= value && value < 128) {\n    Long.INT_CACHE_[value] = obj;\n  }\n\n  return obj;\n};\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Long} the corresponding Long value.\n */\n\n\nLong.fromNumber = function (value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Long.ZERO;\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.MIN_VALUE;\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long(value % Long.TWO_PWR_32_DBL_ | 0, value / Long.TWO_PWR_32_DBL_ | 0);\n  }\n};\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @param {bigint} value - The number in question\n * @returns {Long} The corresponding Long value\n */\n\n\nLong.fromBigInt = function (value) {\n  return Long.fromString(value.toString(10), 10);\n};\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Long} the corresponding Long value.\n */\n\n\nLong.fromBits = function (lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n/**\n * Returns a Long representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Long.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Long} the corresponding Long value.\n */\n\n\nLong.fromString = function (str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  } // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n\n\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n  var result = Long.ZERO;\n\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n\n  return result;\n}; // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {Object}\n * @ignore\n */\n\n\nLong.INT_CACHE_ = {}; // NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\n\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n/**\n * @type {number}\n * @ignore\n */\n\nLong.TWO_PWR_24_DBL_ = 1 << 24;\n/**\n * @type {number}\n * @ignore\n */\n\nLong.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n/**\n * @type {number}\n * @ignore\n */\n\nLong.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;\n/**\n * @type {number}\n * @ignore\n */\n\nLong.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;\n/**\n * @type {number}\n * @ignore\n */\n\nLong.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n/**\n * @type {number}\n * @ignore\n */\n\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n/** @type {Long} */\n\nLong.ZERO = Long.fromInt(0);\n/** @type {Long} */\n\nLong.ONE = Long.fromInt(1);\n/** @type {Long} */\n\nLong.NEG_ONE = Long.fromInt(-1);\n/** @type {Long} */\n\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n/** @type {Long} */\n\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);\n/**\n * @type {Long}\n * @ignore\n */\n\nLong.TWO_PWR_24_ = Long.fromInt(1 << 24);\n/**\n * Expose.\n */\n\nmodule.exports = Long;\nmodule.exports.Long = Long;","map":{"version":3,"names":["Long","low","high","_bsontype","low_","high_","prototype","toInt","toNumber","TWO_PWR_32_DBL_","getLowBitsUnsigned","toBigInt","BigInt","toString","toJSON","opt_radix","radix","Error","isZero","isNegative","equals","MIN_VALUE","radixLong","fromNumber","div","rem","multiply","subtract","negate","radixToPower","Math","pow","result","remDiv","intval","digits","length","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","add","ONE","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","fromBits","ZERO","TWO_PWR_24_","NEG_ONE","halfThis","shiftRight","approx","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","fromInt","value","cachedObj","INT_CACHE_","obj","isNaN","isFinite","TWO_PWR_63_DBL_","MAX_VALUE","fromBigInt","fromString","lowBits","highBits","str","charAt","substring","indexOf","i","size","min","parseInt","power","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/bson/lib/bson/long.js"],"sourcesContent":["// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Long\". This\n * implementation is derived from LongLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a Long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Long.\n * @param {number} high the high (signed) 32 bits of the Long.\n * @return {Long}\n */\nfunction Long(low, high) {\n  if (!(this instanceof Long)) return new Long(low, high);\n\n  this._bsontype = 'Long';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @method\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nLong.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nLong.prototype.toNumber = function() {\n  return this.high_ * Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/** Converts the Long to a BigInt (arbitrary precision). */\nLong.prototype.toBigInt = function () {\n  return BigInt(this.toString());\n}\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nLong.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nLong.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nLong.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nLong.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nLong.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Long.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Long.\n */\nLong.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nLong.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nLong.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nLong.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Long equals the other\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long equals the other\n */\nLong.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Long does not equal the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long does not equal the other.\n */\nLong.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Long is less than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than the other.\n */\nLong.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Long is less than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than or equal to the other.\n */\nLong.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Long is greater than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than the other.\n */\nLong.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Long is greater than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than or equal to the other.\n */\nLong.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Long with the given one.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nLong.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Long} the negation of this value.\n */\nLong.prototype.negate = function() {\n  if (this.equals(Long.MIN_VALUE)) {\n    return Long.MIN_VALUE;\n  } else {\n    return this.not().add(Long.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Long.\n *\n * @method\n * @param {Long} other Long to add to this one.\n * @return {Long} the sum of this and the given Long.\n */\nLong.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Long.\n *\n * @method\n * @param {Long} other Long to subtract from this.\n * @return {Long} the difference of this and the given Long.\n */\nLong.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Long.\n *\n * @method\n * @param {Long} other Long to multiply with this.\n * @return {Long} the product of this and the other.\n */\nLong.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Long.ZERO;\n  } else if (other.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Longs are small, use float multiplication\n  if (this.lessThan(Long.TWO_PWR_24_) && other.lessThan(Long.TWO_PWR_24_)) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Long divided by the given one.\n *\n * @method\n * @param {Long} other Long by which to divide.\n * @return {Long} this Long divided by the given one.\n */\nLong.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n      return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Long.ZERO)) {\n        return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Long.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long modulo the given one.\n *\n * @method\n * @param {Long} other Long by which to mod.\n * @return {Long} this Long modulo the given one.\n */\nLong.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Long} the bitwise-NOT of this value.\n */\nLong.prototype.not = function() {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to AND.\n * @return {Long} the bitwise-AND of this and the other.\n */\nLong.prototype.and = function(other) {\n  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to OR.\n * @return {Long} the bitwise-OR of this and the other.\n */\nLong.prototype.or = function(other) {\n  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to XOR.\n * @return {Long} the bitwise-XOR of this and the other.\n */\nLong.prototype.xor = function(other) {\n  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the left by the given amount.\n */\nLong.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount.\n */\nLong.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Long.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nLong.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Long.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Long.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Long.ZERO;\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.MIN_VALUE;\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long((value % Long.TWO_PWR_32_DBL_) | 0, (value / Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @param {bigint} value - The number in question\n * @returns {Long} The corresponding Long value\n */\nLong.fromBigInt =  function(value) {\n  return Long.fromString(value.toString(10), 10);\n}\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Long} the corresponding Long value.\n */\nLong.fromBits = function(lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n\n/**\n * Returns a Long representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Long.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Long} the corresponding Long value.\n */\nLong.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {Object}\n * @ignore\n */\nLong.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Long} */\nLong.ZERO = Long.fromInt(0);\n\n/** @type {Long} */\nLong.ONE = Long.fromInt(1);\n\n/** @type {Long} */\nLong.NEG_ONE = Long.fromInt(-1);\n\n/** @type {Long} */\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Long} */\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Long}\n * @ignore\n */\nLong.TWO_PWR_24_ = Long.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Long;\nmodule.exports.Long = Long;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}