{"ast":null,"code":"'use strict';\n\nlet BSON = require('bson');\n\nconst require_optional = require('require_optional');\n\nconst EJSON = require('./utils').retrieveEJSON();\n\ntry {\n  // Attempt to grab the native BSON parser\n  const BSONNative = require_optional('bson-ext'); // If we got the native parser, use it instead of the\n  // Javascript one\n\n  if (BSONNative) {\n    BSON = BSONNative;\n  }\n} catch (err) {} // eslint-disable-line\n\n\nmodule.exports = {\n  // Errors\n  MongoError: require('./error').MongoError,\n  MongoNetworkError: require('./error').MongoNetworkError,\n  MongoParseError: require('./error').MongoParseError,\n  MongoTimeoutError: require('./error').MongoTimeoutError,\n  MongoServerSelectionError: require('./error').MongoServerSelectionError,\n  MongoWriteConcernError: require('./error').MongoWriteConcernError,\n  // Core\n  Connection: require('./connection/connection'),\n  Server: require('./topologies/server'),\n  ReplSet: require('./topologies/replset'),\n  Mongos: require('./topologies/mongos'),\n  Logger: require('./connection/logger'),\n  Cursor: require('./cursor').CoreCursor,\n  ReadPreference: require('./topologies/read_preference'),\n  Sessions: require('./sessions'),\n  BSON: BSON,\n  EJSON: EJSON,\n  Topology: require('./sdam/topology').Topology,\n  // Raw operations\n  Query: require('./connection/commands').Query,\n  // Auth mechanisms\n  MongoCredentials: require('./auth/mongo_credentials').MongoCredentials,\n  defaultAuthProviders: require('./auth/defaultAuthProviders').defaultAuthProviders,\n  MongoCR: require('./auth/mongocr'),\n  X509: require('./auth/x509'),\n  Plain: require('./auth/plain'),\n  GSSAPI: require('./auth/gssapi'),\n  ScramSHA1: require('./auth/scram').ScramSHA1,\n  ScramSHA256: require('./auth/scram').ScramSHA256,\n  // Utilities\n  parseConnectionString: require('./uri_parser')\n};","map":{"version":3,"names":["BSON","require","require_optional","EJSON","retrieveEJSON","BSONNative","err","module","exports","MongoError","MongoNetworkError","MongoParseError","MongoTimeoutError","MongoServerSelectionError","MongoWriteConcernError","Connection","Server","ReplSet","Mongos","Logger","Cursor","CoreCursor","ReadPreference","Sessions","Topology","Query","MongoCredentials","defaultAuthProviders","MongoCR","X509","Plain","GSSAPI","ScramSHA1","ScramSHA256","parseConnectionString"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/index.js"],"sourcesContent":["'use strict';\n\nlet BSON = require('bson');\nconst require_optional = require('require_optional');\nconst EJSON = require('./utils').retrieveEJSON();\n\ntry {\n  // Attempt to grab the native BSON parser\n  const BSONNative = require_optional('bson-ext');\n  // If we got the native parser, use it instead of the\n  // Javascript one\n  if (BSONNative) {\n    BSON = BSONNative;\n  }\n} catch (err) {} // eslint-disable-line\n\nmodule.exports = {\n  // Errors\n  MongoError: require('./error').MongoError,\n  MongoNetworkError: require('./error').MongoNetworkError,\n  MongoParseError: require('./error').MongoParseError,\n  MongoTimeoutError: require('./error').MongoTimeoutError,\n  MongoServerSelectionError: require('./error').MongoServerSelectionError,\n  MongoWriteConcernError: require('./error').MongoWriteConcernError,\n  // Core\n  Connection: require('./connection/connection'),\n  Server: require('./topologies/server'),\n  ReplSet: require('./topologies/replset'),\n  Mongos: require('./topologies/mongos'),\n  Logger: require('./connection/logger'),\n  Cursor: require('./cursor').CoreCursor,\n  ReadPreference: require('./topologies/read_preference'),\n  Sessions: require('./sessions'),\n  BSON: BSON,\n  EJSON: EJSON,\n  Topology: require('./sdam/topology').Topology,\n  // Raw operations\n  Query: require('./connection/commands').Query,\n  // Auth mechanisms\n  MongoCredentials: require('./auth/mongo_credentials').MongoCredentials,\n  defaultAuthProviders: require('./auth/defaultAuthProviders').defaultAuthProviders,\n  MongoCR: require('./auth/mongocr'),\n  X509: require('./auth/x509'),\n  Plain: require('./auth/plain'),\n  GSSAPI: require('./auth/gssapi'),\n  ScramSHA1: require('./auth/scram').ScramSHA1,\n  ScramSHA256: require('./auth/scram').ScramSHA256,\n  // Utilities\n  parseConnectionString: require('./uri_parser')\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBG,aAAnB,EAAd;;AAEA,IAAI;EACF;EACA,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,UAAD,CAAnC,CAFE,CAGF;EACA;;EACA,IAAIG,UAAJ,EAAgB;IACdL,IAAI,GAAGK,UAAP;EACD;AACF,CARD,CAQE,OAAOC,GAAP,EAAY,CAAE,C,CAAC;;;AAEjBC,MAAM,CAACC,OAAP,GAAiB;EACf;EACAC,UAAU,EAAER,OAAO,CAAC,SAAD,CAAP,CAAmBQ,UAFhB;EAGfC,iBAAiB,EAAET,OAAO,CAAC,SAAD,CAAP,CAAmBS,iBAHvB;EAIfC,eAAe,EAAEV,OAAO,CAAC,SAAD,CAAP,CAAmBU,eAJrB;EAKfC,iBAAiB,EAAEX,OAAO,CAAC,SAAD,CAAP,CAAmBW,iBALvB;EAMfC,yBAAyB,EAAEZ,OAAO,CAAC,SAAD,CAAP,CAAmBY,yBAN/B;EAOfC,sBAAsB,EAAEb,OAAO,CAAC,SAAD,CAAP,CAAmBa,sBAP5B;EAQf;EACAC,UAAU,EAAEd,OAAO,CAAC,yBAAD,CATJ;EAUfe,MAAM,EAAEf,OAAO,CAAC,qBAAD,CAVA;EAWfgB,OAAO,EAAEhB,OAAO,CAAC,sBAAD,CAXD;EAYfiB,MAAM,EAAEjB,OAAO,CAAC,qBAAD,CAZA;EAafkB,MAAM,EAAElB,OAAO,CAAC,qBAAD,CAbA;EAcfmB,MAAM,EAAEnB,OAAO,CAAC,UAAD,CAAP,CAAoBoB,UAdb;EAefC,cAAc,EAAErB,OAAO,CAAC,8BAAD,CAfR;EAgBfsB,QAAQ,EAAEtB,OAAO,CAAC,YAAD,CAhBF;EAiBfD,IAAI,EAAEA,IAjBS;EAkBfG,KAAK,EAAEA,KAlBQ;EAmBfqB,QAAQ,EAAEvB,OAAO,CAAC,iBAAD,CAAP,CAA2BuB,QAnBtB;EAoBf;EACAC,KAAK,EAAExB,OAAO,CAAC,uBAAD,CAAP,CAAiCwB,KArBzB;EAsBf;EACAC,gBAAgB,EAAEzB,OAAO,CAAC,0BAAD,CAAP,CAAoCyB,gBAvBvC;EAwBfC,oBAAoB,EAAE1B,OAAO,CAAC,6BAAD,CAAP,CAAuC0B,oBAxB9C;EAyBfC,OAAO,EAAE3B,OAAO,CAAC,gBAAD,CAzBD;EA0Bf4B,IAAI,EAAE5B,OAAO,CAAC,aAAD,CA1BE;EA2Bf6B,KAAK,EAAE7B,OAAO,CAAC,cAAD,CA3BC;EA4Bf8B,MAAM,EAAE9B,OAAO,CAAC,eAAD,CA5BA;EA6Bf+B,SAAS,EAAE/B,OAAO,CAAC,cAAD,CAAP,CAAwB+B,SA7BpB;EA8BfC,WAAW,EAAEhC,OAAO,CAAC,cAAD,CAAP,CAAwBgC,WA9BtB;EA+Bf;EACAC,qBAAqB,EAAEjC,OAAO,CAAC,cAAD;AAhCf,CAAjB"},"metadata":{},"sourceType":"script"}