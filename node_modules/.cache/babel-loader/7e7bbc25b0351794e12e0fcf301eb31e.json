{"ast":null,"code":"'use strict';\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\n\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      address,\n      previousDescription,\n      newDescription\n    });\n  }\n\n}\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\n\n\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n\n}\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\n\n\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n\n}\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\n\n\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      previousDescription,\n      newDescription\n    });\n  }\n\n}\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n\n}\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, {\n      connectionId\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      reply\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      failure\n    });\n  }\n\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};","map":{"version":3,"names":["ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","Object","assign","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/sdam/events.js"],"sourcesContent":["'use strict';\n\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, address, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, { connectionId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, { connectionId, duration, reply });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, { connectionId, duration, failure });\n  }\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,6BAAN,CAAoC;EAClCC,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsBC,mBAAtB,EAA2CC,cAA3C,EAA2D;IACpEC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEL,UAAF;MAAcC,OAAd;MAAuBC,mBAAvB;MAA4CC;IAA5C,CAApB;EACD;;AAHiC;AAMpC;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,kBAAN,CAAyB;EACvBP,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;IAC/BG,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEL,UAAF;MAAcC;IAAd,CAApB;EACD;;AAHsB;AAMzB;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,iBAAN,CAAwB;EACtBR,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;IAC/BG,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEL,UAAF;MAAcC;IAAd,CAApB;EACD;;AAHqB;AAMxB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,+BAAN,CAAsC;EACpCT,WAAW,CAACC,UAAD,EAAaE,mBAAb,EAAkCC,cAAlC,EAAkD;IAC3DC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEL,UAAF;MAAcE,mBAAd;MAAmCC;IAAnC,CAApB;EACD;;AAHmC;AAMtC;AACA;AACA;AACA;AACA;;;AACA,MAAMM,oBAAN,CAA2B;EACzBV,WAAW,CAACC,UAAD,EAAa;IACtBI,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEL;IAAF,CAApB;EACD;;AAHwB;AAM3B;AACA;AACA;AACA;AACA;;;AACA,MAAMU,mBAAN,CAA0B;EACxBX,WAAW,CAACC,UAAD,EAAa;IACtBI,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEL;IAAF,CAApB;EACD;;AAHuB;AAM1B;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMW,2BAAN,CAAkC;EAChCZ,WAAW,CAACa,YAAD,EAAe;IACxBR,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEO;IAAF,CAApB;EACD;;AAH+B;AAMlC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,6BAAN,CAAoC;EAClCd,WAAW,CAACe,QAAD,EAAWC,KAAX,EAAkBH,YAAlB,EAAgC;IACzCR,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEO,YAAF;MAAgBE,QAAhB;MAA0BC;IAA1B,CAApB;EACD;;AAHiC;AAMpC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,0BAAN,CAAiC;EAC/BjB,WAAW,CAACe,QAAD,EAAWG,OAAX,EAAoBL,YAApB,EAAkC;IAC3CR,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAAEO,YAAF;MAAgBE,QAAhB;MAA0BG;IAA1B,CAApB;EACD;;AAH8B;;AAMjCC,MAAM,CAACC,OAAP,GAAiB;EACfrB,6BADe;EAEfQ,kBAFe;EAGfC,iBAHe;EAIfC,+BAJe;EAKfC,oBALe;EAMfC,mBANe;EAOfC,2BAPe;EAQfE,6BARe;EASfG;AATe,CAAjB"},"metadata":{},"sourceType":"script"}