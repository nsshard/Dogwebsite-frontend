{"ast":null,"code":"const User = require('../model/User');\n\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nconst ACCESS_TOKEN_SECRET = '4868f80777e4c7a3c766e61bfb0c3cf163bfcd3a393cccfe159436e13fd6d825f20d62bafc54380889107d2d16ba31eb470363d74943ae384fc60895abc6d4bd';\nconst REFRESH_TOKEN_SECRET = '20e2bb4414c14e3da72a0323b13e9e2f60f5f17e33e299d09539be1639d16f11e9c142f3472d7ea34ec7946e860402d6ac601239a4461c1f19d522940dea3b9f';\n\nconst handleLogin = async (req, res) => {\n  const {\n    user,\n    pwd\n  } = req.body;\n  if (!user || !pwd) return res.status(400).json({\n    'message': 'Username and password are required.'\n  });\n  const foundUser = await User.findOne({\n    username: user\n  }).exec();\n  if (!foundUser) return res.sendStatus(401); //Unauthorized \n  // evaluate password \n\n  const match = await bcrypt.compare(pwd, foundUser.password);\n\n  if (match) {\n    const roles = Object.values(foundUser.roles).filter(Boolean);\n    const accessToken = jwt.sign({\n      \"UserInfo\": {\n        \"username\": foundUser.username,\n        \"roles\": roles\n      }\n    }, ACCESS_TOKEN_SECRET, {\n      expiresIn: '1d'\n    });\n    const refreshToken = jwt.sign({\n      \"username\": foundUser.username\n    }, REFRESH_TOKEN_SECRET, {\n      expiresIn: '2d'\n    });\n    foundUser.refreshToken = refreshToken;\n    const result = await foundUser.save();\n    console.log(result);\n    console.log(roles);\n    res.cookie('jwt', refreshToken, {\n      httpOnly: true,\n      secure: true,\n      sameSite: 'None',\n      maxAge: 24 * 60 * 60 * 1000\n    });\n    res.json({\n      roles,\n      accessToken\n    });\n  } else {\n    res.sendStatus(401);\n  }\n};\n\nmodule.exports = {\n  handleLogin\n};","map":{"version":3,"names":["User","require","bcrypt","jwt","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","handleLogin","req","res","user","pwd","body","status","json","foundUser","findOne","username","exec","sendStatus","match","compare","password","roles","Object","values","filter","Boolean","accessToken","sign","expiresIn","refreshToken","result","save","console","log","cookie","httpOnly","secure","sameSite","maxAge","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/src/backend/controllers/authController.js"],"sourcesContent":["const User = require('../model/User');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst ACCESS_TOKEN_SECRET = '4868f80777e4c7a3c766e61bfb0c3cf163bfcd3a393cccfe159436e13fd6d825f20d62bafc54380889107d2d16ba31eb470363d74943ae384fc60895abc6d4bd'\nconst REFRESH_TOKEN_SECRET = '20e2bb4414c14e3da72a0323b13e9e2f60f5f17e33e299d09539be1639d16f11e9c142f3472d7ea34ec7946e860402d6ac601239a4461c1f19d522940dea3b9f'\n\nconst handleLogin = async (req, res) => {\n    const { user, pwd } = req.body;\n    if (!user || !pwd) return res.status(400).json({ 'message': 'Username and password are required.' });\n\n    const foundUser = await User.findOne({ username: user }).exec();\n    if (!foundUser) return res.sendStatus(401); //Unauthorized \n    // evaluate password \n    const match = await bcrypt.compare(pwd, foundUser.password);\n    if (match) {\n        const roles = Object.values(foundUser.roles).filter(Boolean);\n\n        const accessToken = jwt.sign(\n            {\n                \"UserInfo\": {\n                    \"username\": foundUser.username,\n                    \"roles\": roles\n                }\n            },\n            ACCESS_TOKEN_SECRET,\n            { expiresIn: '1d' }\n        );\n        const refreshToken = jwt.sign(\n            { \"username\": foundUser.username },\n            REFRESH_TOKEN_SECRET,\n            { expiresIn: '2d' }\n        );\n       \n        foundUser.refreshToken = refreshToken;\n        const result = await foundUser.save();\n        console.log(result);\n        console.log(roles);\n\n       \n        res.cookie('jwt', refreshToken, { httpOnly: true, secure: true, sameSite: 'None', maxAge: 24 * 60 * 60 * 1000 });\n     \n      \n        res.json({ roles, accessToken });\n\n    } else {\n        res.sendStatus(401);\n    }\n}\n\nmodule.exports = { handleLogin };"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMG,mBAAmB,GAAG,kIAA5B;AACA,MAAMC,oBAAoB,GAAG,kIAA7B;;AAEA,MAAMC,WAAW,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;EACpC,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAgBH,GAAG,CAACI,IAA1B;EACA,IAAI,CAACF,IAAD,IAAS,CAACC,GAAd,EAAmB,OAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;IAAE,WAAW;EAAb,CAArB,CAAP;EAEnB,MAAMC,SAAS,GAAG,MAAMd,IAAI,CAACe,OAAL,CAAa;IAAEC,QAAQ,EAAEP;EAAZ,CAAb,EAAiCQ,IAAjC,EAAxB;EACA,IAAI,CAACH,SAAL,EAAgB,OAAON,GAAG,CAACU,UAAJ,CAAe,GAAf,CAAP,CALoB,CAKQ;EAC5C;;EACA,MAAMC,KAAK,GAAG,MAAMjB,MAAM,CAACkB,OAAP,CAAeV,GAAf,EAAoBI,SAAS,CAACO,QAA9B,CAApB;;EACA,IAAIF,KAAJ,EAAW;IACP,MAAMG,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcV,SAAS,CAACQ,KAAxB,EAA+BG,MAA/B,CAAsCC,OAAtC,CAAd;IAEA,MAAMC,WAAW,GAAGxB,GAAG,CAACyB,IAAJ,CAChB;MACI,YAAY;QACR,YAAYd,SAAS,CAACE,QADd;QAER,SAASM;MAFD;IADhB,CADgB,EAOhBlB,mBAPgB,EAQhB;MAAEyB,SAAS,EAAE;IAAb,CARgB,CAApB;IAUA,MAAMC,YAAY,GAAG3B,GAAG,CAACyB,IAAJ,CACjB;MAAE,YAAYd,SAAS,CAACE;IAAxB,CADiB,EAEjBX,oBAFiB,EAGjB;MAAEwB,SAAS,EAAE;IAAb,CAHiB,CAArB;IAMAf,SAAS,CAACgB,YAAV,GAAyBA,YAAzB;IACA,MAAMC,MAAM,GAAG,MAAMjB,SAAS,CAACkB,IAAV,EAArB;IACAC,OAAO,CAACC,GAAR,CAAYH,MAAZ;IACAE,OAAO,CAACC,GAAR,CAAYZ,KAAZ;IAGAd,GAAG,CAAC2B,MAAJ,CAAW,KAAX,EAAkBL,YAAlB,EAAgC;MAAEM,QAAQ,EAAE,IAAZ;MAAkBC,MAAM,EAAE,IAA1B;MAAgCC,QAAQ,EAAE,MAA1C;MAAkDC,MAAM,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe;IAAzE,CAAhC;IAGA/B,GAAG,CAACK,IAAJ,CAAS;MAAES,KAAF;MAASK;IAAT,CAAT;EAEH,CA9BD,MA8BO;IACHnB,GAAG,CAACU,UAAJ,CAAe,GAAf;EACH;AACJ,CAzCD;;AA2CAsB,MAAM,CAACC,OAAP,GAAiB;EAAEnC;AAAF,CAAjB"},"metadata":{},"sourceType":"module"}