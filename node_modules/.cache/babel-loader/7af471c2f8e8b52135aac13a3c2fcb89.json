{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy'),\n    util = require('util'),\n    lookup = require('./utils').lookup;\n/**\n * `Strategy` constructor.\n *\n * The local authentication strategy authenticates requests based on the\n * credentials submitted through an HTML-based login form.\n *\n * Applications must supply a `verify` callback which accepts `username` and\n * `password` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *   - `usernameField`  field name where the username is found, defaults to _username_\n *   - `passwordField`  field name where the password is found, defaults to _password_\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new LocalStrategy(\n *       function(username, password, done) {\n *         User.findOne({ username: username, password: password }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\n\n\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n\n  if (!verify) {\n    throw new TypeError('LocalStrategy requires a verify callback');\n  }\n\n  this._usernameField = options.usernameField || 'username';\n  this._passwordField = options.passwordField || 'password';\n  passport.Strategy.call(this);\n  this.name = 'local';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n/**\n * Inherit from `passport.Strategy`.\n */\n\n\nutil.inherits(Strategy, passport.Strategy);\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\n\nStrategy.prototype.authenticate = function (req, options) {\n  options = options || {};\n  var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);\n  var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);\n\n  if (!username || !password) {\n    return this.fail({\n      message: options.badRequestMessage || 'Missing credentials'\n    }, 400);\n  }\n\n  var self = this;\n\n  function verified(err, user, info) {\n    if (err) {\n      return self.error(err);\n    }\n\n    if (!user) {\n      return self.fail(info);\n    }\n\n    self.success(user, info);\n  }\n\n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, username, password, verified);\n    } else {\n      this._verify(username, password, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n/**\n * Expose `Strategy`.\n */\n\n\nmodule.exports = Strategy;","map":{"version":3,"names":["passport","require","util","lookup","Strategy","options","verify","TypeError","_usernameField","usernameField","_passwordField","passwordField","call","name","_verify","_passReqToCallback","passReqToCallback","inherits","prototype","authenticate","req","username","body","query","password","fail","message","badRequestMessage","self","verified","err","user","info","error","success","ex","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/passport-local/lib/strategy.js"],"sourcesContent":["/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy')\n  , util = require('util')\n  , lookup = require('./utils').lookup;\n\n\n/**\n * `Strategy` constructor.\n *\n * The local authentication strategy authenticates requests based on the\n * credentials submitted through an HTML-based login form.\n *\n * Applications must supply a `verify` callback which accepts `username` and\n * `password` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *   - `usernameField`  field name where the username is found, defaults to _username_\n *   - `passwordField`  field name where the password is found, defaults to _password_\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new LocalStrategy(\n *       function(username, password, done) {\n *         User.findOne({ username: username, password: password }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }\n  \n  this._usernameField = options.usernameField || 'username';\n  this._passwordField = options.passwordField || 'password';\n  \n  passport.Strategy.call(this);\n  this.name = 'local';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\nStrategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);\n  var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);\n  \n  if (!username || !password) {\n    return this.fail({ message: options.badRequestMessage || 'Missing credentials' }, 400);\n  }\n  \n  var self = this;\n  \n  function verified(err, user, info) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(info); }\n    self.success(user, info);\n  }\n  \n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, username, password, verified);\n    } else {\n      this._verify(username, password, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}