{"ast":null,"code":"'use strict';\n\nconst applyWriteConcern = require('../utils').applyWriteConcern;\n\nconst Code = require('../core').BSON.Code;\n\nconst decorateWithCollation = require('../utils').decorateWithCollation;\n\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nconst executeCommand = require('./db_ops').executeCommand;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst isObject = require('../utils').isObject;\n\nconst loadDb = require('../dynamic_loaders').loadDb;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst toError = require('../utils').toError;\n\nconst exclusionList = ['readPreference', 'session', 'bypassDocumentValidation', 'w', 'wtimeout', 'j', 'writeConcern'];\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {(function|string)} map The mapping function.\n * @property {(function|string)} reduce The reduce function.\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n */\n\nclass MapReduceOperation extends OperationBase {\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {(function|string)} map The mapping function.\n   * @param {(function|string)} reduce The reduce function.\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  constructor(collection, map, reduce, options) {\n    super(options);\n    this.collection = collection;\n    this.map = map;\n    this.reduce = reduce;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  execute(callback) {\n    const coll = this.collection;\n    const map = this.map;\n    const reduce = this.reduce;\n    let options = this.options;\n    const mapCommandHash = {\n      mapReduce: coll.collectionName,\n      map: map,\n      reduce: reduce\n    }; // Add any other options passed in\n\n    for (let n in options) {\n      if ('scope' === n) {\n        mapCommandHash[n] = processScope(options[n]);\n      } else {\n        // Only include if not in exclusion list\n        if (exclusionList.indexOf(n) === -1) {\n          mapCommandHash[n] = options[n];\n        }\n      }\n    }\n\n    options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n    options.readPreference = ReadPreference.resolve(coll, options); // If we have a read preference and inline is not set as output fail hard\n\n    if (options.readPreference !== false && options.readPreference !== 'primary' && options['out'] && options['out'].inline !== 1 && options['out'] !== 'inline') {\n      // Force readPreference to primary\n      options.readPreference = 'primary'; // Decorate command with writeConcern if supported\n\n      applyWriteConcern(mapCommandHash, {\n        db: coll.s.db,\n        collection: coll\n      }, options);\n    } else {\n      decorateWithReadConcern(mapCommandHash, coll, options);\n    } // Is bypassDocumentValidation specified\n\n\n    if (options.bypassDocumentValidation === true) {\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n    } // Have we specified collation\n\n\n    try {\n      decorateWithCollation(mapCommandHash, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    } // Execute command\n\n\n    executeCommand(coll.s.db, mapCommandHash, options, (err, result) => {\n      if (err) return handleCallback(callback, err); // Check if we have an error\n\n      if (1 !== result.ok || result.err || result.errmsg) {\n        return handleCallback(callback, toError(result));\n      } // Create statistics value\n\n\n      const stats = {};\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\n      if (result.counts) stats['counts'] = result.counts;\n      if (result.timing) stats['timing'] = result.timing; // invoked with inline?\n\n      if (result.results) {\n        // If we wish for no verbosity\n        if (options['verbose'] == null || !options['verbose']) {\n          return handleCallback(callback, null, result.results);\n        }\n\n        return handleCallback(callback, null, {\n          results: result.results,\n          stats: stats\n        });\n      } // The returned collection\n\n\n      let collection = null; // If we have an object it's a different db\n\n      if (result.result != null && typeof result.result === 'object') {\n        const doc = result.result; // Return a collection from another db\n\n        let Db = loadDb();\n        collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(doc.collection);\n      } else {\n        // Create a collection object that wraps the result collection\n        collection = coll.s.db.collection(result.result);\n      } // If we wish for no verbosity\n\n\n      if (options['verbose'] == null || !options['verbose']) {\n        return handleCallback(callback, err, collection);\n      } // Return stats as third set of values\n\n\n      handleCallback(callback, err, {\n        collection: collection,\n        stats: stats\n      });\n    });\n  }\n\n}\n/**\n * Functions that are passed as scope args must\n * be converted to Code instances.\n * @ignore\n */\n\n\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  const keys = Object.keys(scope);\n  let key;\n  const new_scope = {};\n\n  for (let i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\nmodule.exports = MapReduceOperation;","map":{"version":3,"names":["applyWriteConcern","require","Code","BSON","decorateWithCollation","decorateWithReadConcern","executeCommand","handleCallback","isObject","loadDb","OperationBase","ReadPreference","toError","exclusionList","MapReduceOperation","constructor","collection","map","reduce","options","execute","callback","coll","mapCommandHash","mapReduce","collectionName","n","processScope","indexOf","Object","assign","readPreference","resolve","inline","db","s","bypassDocumentValidation","err","result","ok","errmsg","stats","timeMillis","counts","timing","results","doc","Db","topology","scope","_bsontype","keys","key","new_scope","i","length","String","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/operations/map_reduce.js"],"sourcesContent":["'use strict';\n\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst Code = require('../core').BSON.Code;\nconst decorateWithCollation = require('../utils').decorateWithCollation;\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\nconst executeCommand = require('./db_ops').executeCommand;\nconst handleCallback = require('../utils').handleCallback;\nconst isObject = require('../utils').isObject;\nconst loadDb = require('../dynamic_loaders').loadDb;\nconst OperationBase = require('./operation').OperationBase;\nconst ReadPreference = require('../core').ReadPreference;\nconst toError = require('../utils').toError;\n\nconst exclusionList = [\n  'readPreference',\n  'session',\n  'bypassDocumentValidation',\n  'w',\n  'wtimeout',\n  'j',\n  'writeConcern'\n];\n\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {(function|string)} map The mapping function.\n * @property {(function|string)} reduce The reduce function.\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n */\nclass MapReduceOperation extends OperationBase {\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {(function|string)} map The mapping function.\n   * @param {(function|string)} reduce The reduce function.\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  constructor(collection, map, reduce, options) {\n    super(options);\n\n    this.collection = collection;\n    this.map = map;\n    this.reduce = reduce;\n  }\n\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n  execute(callback) {\n    const coll = this.collection;\n    const map = this.map;\n    const reduce = this.reduce;\n    let options = this.options;\n\n    const mapCommandHash = {\n      mapReduce: coll.collectionName,\n      map: map,\n      reduce: reduce\n    };\n\n    // Add any other options passed in\n    for (let n in options) {\n      if ('scope' === n) {\n        mapCommandHash[n] = processScope(options[n]);\n      } else {\n        // Only include if not in exclusion list\n        if (exclusionList.indexOf(n) === -1) {\n          mapCommandHash[n] = options[n];\n        }\n      }\n    }\n\n    options = Object.assign({}, options);\n\n    // Ensure we have the right read preference inheritance\n    options.readPreference = ReadPreference.resolve(coll, options);\n\n    // If we have a read preference and inline is not set as output fail hard\n    if (\n      options.readPreference !== false &&\n      options.readPreference !== 'primary' &&\n      options['out'] &&\n      options['out'].inline !== 1 &&\n      options['out'] !== 'inline'\n    ) {\n      // Force readPreference to primary\n      options.readPreference = 'primary';\n      // Decorate command with writeConcern if supported\n      applyWriteConcern(mapCommandHash, { db: coll.s.db, collection: coll }, options);\n    } else {\n      decorateWithReadConcern(mapCommandHash, coll, options);\n    }\n\n    // Is bypassDocumentValidation specified\n    if (options.bypassDocumentValidation === true) {\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(mapCommandHash, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Execute command\n    executeCommand(coll.s.db, mapCommandHash, options, (err, result) => {\n      if (err) return handleCallback(callback, err);\n      // Check if we have an error\n      if (1 !== result.ok || result.err || result.errmsg) {\n        return handleCallback(callback, toError(result));\n      }\n\n      // Create statistics value\n      const stats = {};\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\n      if (result.counts) stats['counts'] = result.counts;\n      if (result.timing) stats['timing'] = result.timing;\n\n      // invoked with inline?\n      if (result.results) {\n        // If we wish for no verbosity\n        if (options['verbose'] == null || !options['verbose']) {\n          return handleCallback(callback, null, result.results);\n        }\n\n        return handleCallback(callback, null, { results: result.results, stats: stats });\n      }\n\n      // The returned collection\n      let collection = null;\n\n      // If we have an object it's a different db\n      if (result.result != null && typeof result.result === 'object') {\n        const doc = result.result;\n        // Return a collection from another db\n        let Db = loadDb();\n        collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(\n          doc.collection\n        );\n      } else {\n        // Create a collection object that wraps the result collection\n        collection = coll.s.db.collection(result.result);\n      }\n\n      // If we wish for no verbosity\n      if (options['verbose'] == null || !options['verbose']) {\n        return handleCallback(callback, err, collection);\n      }\n\n      // Return stats as third set of values\n      handleCallback(callback, err, { collection: collection, stats: stats });\n    });\n  }\n}\n\n/**\n * Functions that are passed as scope args must\n * be converted to Code instances.\n * @ignore\n */\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  const keys = Object.keys(scope);\n  let key;\n  const new_scope = {};\n\n  for (let i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\nmodule.exports = MapReduceOperation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}