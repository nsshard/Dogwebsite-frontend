{"ast":null,"code":"'use strict'; // shared state names\n\nconst STATE_CLOSING = 'closing';\nconst STATE_CLOSED = 'closed';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected'; // An enumeration of topology types we know about\n\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n}; // An enumeration of server types we know about\n\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n}; // helper to get a server's type that works for both legacy and unified topologies\n\nfunction serverType(server) {\n  let description = server.s.description || server.s.serverDescription;\n  if (description.topologyType === TopologyType.Single) return description.servers[0].type;\n  return description.type;\n}\n\nconst TOPOLOGY_DEFAULTS = {\n  useUnifiedTopology: true,\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\nmodule.exports = {\n  STATE_CLOSING,\n  STATE_CLOSED,\n  STATE_CONNECTING,\n  STATE_CONNECTED,\n  TOPOLOGY_DEFAULTS,\n  TopologyType,\n  ServerType,\n  serverType,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom\n};","map":{"version":3,"names":["STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","TopologyType","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","ServerType","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","serverType","server","description","s","serverDescription","topologyType","servers","type","TOPOLOGY_DEFAULTS","useUnifiedTopology","localThresholdMS","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","drainTimerQueue","queue","forEach","clearTimeout","clear","clearAndRemoveTimerFrom","timer","timers","delete","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/sdam/common.js"],"sourcesContent":["'use strict';\n\n// shared state names\nconst STATE_CLOSING = 'closing';\nconst STATE_CLOSED = 'closed';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected';\n\n// An enumeration of topology types we know about\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\n// An enumeration of server types we know about\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\n\n// helper to get a server's type that works for both legacy and unified topologies\nfunction serverType(server) {\n  let description = server.s.description || server.s.serverDescription;\n  if (description.topologyType === TopologyType.Single) return description.servers[0].type;\n  return description.type;\n}\n\nconst TOPOLOGY_DEFAULTS = {\n  useUnifiedTopology: true,\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\nmodule.exports = {\n  STATE_CLOSING,\n  STATE_CLOSED,\n  STATE_CONNECTING,\n  STATE_CONNECTED,\n  TOPOLOGY_DEFAULTS,\n  TopologyType,\n  ServerType,\n  serverType,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom\n};\n"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,aAAa,GAAG,SAAtB;AACA,MAAMC,YAAY,GAAG,QAArB;AACA,MAAMC,gBAAgB,GAAG,YAAzB;AACA,MAAMC,eAAe,GAAG,WAAxB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,QADW;EAEnBC,mBAAmB,EAAE,qBAFF;EAGnBC,qBAAqB,EAAE,uBAHJ;EAInBC,OAAO,EAAE,SAJU;EAKnBC,OAAO,EAAE;AALU,CAArB,C,CAQA;;AACA,MAAMC,UAAU,GAAG;EACjBC,UAAU,EAAE,YADK;EAEjBC,MAAM,EAAE,QAFS;EAGjBC,eAAe,EAAE,iBAHA;EAIjBC,SAAS,EAAE,WAJM;EAKjBC,WAAW,EAAE,aALI;EAMjBC,SAAS,EAAE,WANM;EAOjBC,OAAO,EAAE,SAPQ;EAQjBC,OAAO,EAAE,SARQ;EASjBT,OAAO,EAAE;AATQ,CAAnB,C,CAYA;;AACA,SAASU,UAAT,CAAoBC,MAApB,EAA4B;EAC1B,IAAIC,WAAW,GAAGD,MAAM,CAACE,CAAP,CAASD,WAAT,IAAwBD,MAAM,CAACE,CAAP,CAASC,iBAAnD;EACA,IAAIF,WAAW,CAACG,YAAZ,KAA6BpB,YAAY,CAACC,MAA9C,EAAsD,OAAOgB,WAAW,CAACI,OAAZ,CAAoB,CAApB,EAAuBC,IAA9B;EACtD,OAAOL,WAAW,CAACK,IAAnB;AACD;;AAED,MAAMC,iBAAiB,GAAG;EACxBC,kBAAkB,EAAE,IADI;EAExBC,gBAAgB,EAAE,EAFM;EAGxBC,wBAAwB,EAAE,KAHF;EAIxBC,oBAAoB,EAAE,KAJE;EAKxBC,uBAAuB,EAAE;AALD,CAA1B;;AAQA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;EAC9BA,KAAK,CAACC,OAAN,CAAcC,YAAd;EACAF,KAAK,CAACG,KAAN;AACD;;AAED,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,MAAxC,EAAgD;EAC9CJ,YAAY,CAACG,KAAD,CAAZ;EACA,OAAOC,MAAM,CAACC,MAAP,CAAcF,KAAd,CAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;EACf3C,aADe;EAEfC,YAFe;EAGfC,gBAHe;EAIfC,eAJe;EAKfwB,iBALe;EAMfvB,YANe;EAOfM,UAPe;EAQfS,UARe;EASfc,eATe;EAUfK;AAVe,CAAjB"},"metadata":{},"sourceType":"script"}