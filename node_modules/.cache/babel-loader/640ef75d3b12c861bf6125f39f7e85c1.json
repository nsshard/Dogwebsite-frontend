{"ast":null,"code":"'use strict';\n\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\n\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\n\nconst errorStrictEqual = require('../utils').errorStrictEqual;\n\nconst ServerType = require('./common').ServerType;\n\nconst now = require('../../utils').now;\n\nconst WRITABLE_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.Standalone, ServerType.Mongos]);\nconst DATA_BEARING_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.RSSecondary, ServerType.Mongos, ServerType.Standalone]);\nconst ISMASTER_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'compression', 'me', 'hosts', 'passives', 'arbiters', 'tags', 'setName', 'setVersion', 'electionId', 'primary', 'logicalSessionTimeoutMinutes', 'saslSupportedMechs', '__nodejs_mock_server__', '$clusterTime'];\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n */\n\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @param {String} address The address of the server\n   * @param {Object} [ismaster] An optional ismaster response for this server\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\n   * @param {Error} [options.error] An Error used for better reporting debugging\n   * @param {any} [options.topologyVersion] The topologyVersion\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign({\n      minWireVersion: 0,\n      maxWireVersion: 0,\n      hosts: [],\n      passives: [],\n      arbiters: [],\n      tags: []\n    }, ismaster);\n    this.address = address;\n    this.error = options.error;\n    this.roundTripTime = options.roundTripTime || -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster);\n    this.topologyVersion = options.topologyVersion || ismaster.topologyVersion; // direct mappings\n\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    }); // normalize case for hosts\n\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /**\n   * @return {Boolean} Is this server available for reads\n   */\n\n\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n  /**\n   * @return {Boolean} Is this server data bearing\n   */\n\n\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /**\n   * @return {Boolean} Is this server available for writes\n   */\n\n\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : port;\n  }\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   *\n   * @param {ServerDescription} other\n   * @return {Boolean}\n   */\n\n\n  equals(other) {\n    const topologyVersionsEqual = this.topologyVersion === other.topologyVersion || compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n    return other != null && errorStrictEqual(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && this.me === other.me && arrayStrictEqual(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && (this.electionId ? other.electionId && this.electionId.equals(other.electionId) : this.electionId === other.electionId) && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n\n}\n/**\n * Parses an `ismaster` message and determines the server type\n *\n * @param {Object} ismaster The `ismaster` message to parse\n * @return {ServerType}\n */\n\n\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n/**\n * Compares two topology versions.\n *\n * @param {object} lhs\n * @param {object} rhs\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\n\n\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n\n  if (lhs.processId.equals(rhs.processId)) {\n    // TODO: handle counters as Longs\n    if (lhs.counter === rhs.counter) {\n      return 0;\n    } else if (lhs.counter < rhs.counter) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  return -1;\n}\n\nmodule.exports = {\n  ServerDescription,\n  parseServerType,\n  compareTopologyVersion\n};","map":{"version":3,"names":["arrayStrictEqual","require","tagsStrictEqual","errorStrictEqual","ServerType","now","WRITABLE_SERVER_TYPES","Set","RSPrimary","Standalone","Mongos","DATA_BEARING_SERVER_TYPES","RSSecondary","ISMASTER_FIELDS","ServerDescription","constructor","address","ismaster","options","Object","assign","minWireVersion","maxWireVersion","hosts","passives","arbiters","tags","error","roundTripTime","lastUpdateTime","lastWriteDate","lastWrite","opTime","type","parseServerType","topologyVersion","forEach","field","me","toLowerCase","map","host","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","length","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","compareTopologyVersion","setName","setVersion","electionId","primary","logicalSessionTimeoutMinutes","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","secondary","arbiterOnly","RSArbiter","lhs","rhs","processId","counter","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/sdam/server_description.js"],"sourcesContent":["'use strict';\n\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\nconst errorStrictEqual = require('../utils').errorStrictEqual;\nconst ServerType = require('./common').ServerType;\nconst now = require('../../utils').now;\n\nconst WRITABLE_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.Standalone,\n  ServerType.Mongos\n]);\n\nconst DATA_BEARING_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.RSSecondary,\n  ServerType.Mongos,\n  ServerType.Standalone\n]);\n\nconst ISMASTER_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  'compression',\n  'me',\n  'hosts',\n  'passives',\n  'arbiters',\n  'tags',\n  'setName',\n  'setVersion',\n  'electionId',\n  'primary',\n  'logicalSessionTimeoutMinutes',\n  'saslSupportedMechs',\n  '__nodejs_mock_server__',\n  '$clusterTime'\n];\n\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n */\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @param {String} address The address of the server\n   * @param {Object} [ismaster] An optional ismaster response for this server\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\n   * @param {Error} [options.error] An Error used for better reporting debugging\n   * @param {any} [options.topologyVersion] The topologyVersion\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign(\n      {\n        minWireVersion: 0,\n        maxWireVersion: 0,\n        hosts: [],\n        passives: [],\n        arbiters: [],\n        tags: []\n      },\n      ismaster\n    );\n\n    this.address = address;\n    this.error = options.error;\n    this.roundTripTime = options.roundTripTime || -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster);\n    this.topologyVersion = options.topologyVersion || ismaster.topologyVersion;\n\n    // direct mappings\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    });\n\n    // normalize case for hosts\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for reads\n   */\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /**\n   * @return {Boolean} Is this server data bearing\n   */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for writes\n   */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : port;\n  }\n\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   *\n   * @param {ServerDescription} other\n   * @return {Boolean}\n   */\n  equals(other) {\n    const topologyVersionsEqual =\n      this.topologyVersion === other.topologyVersion ||\n      compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n\n    return (\n      other != null &&\n      errorStrictEqual(this.error, other.error) &&\n      this.type === other.type &&\n      this.minWireVersion === other.minWireVersion &&\n      this.me === other.me &&\n      arrayStrictEqual(this.hosts, other.hosts) &&\n      tagsStrictEqual(this.tags, other.tags) &&\n      this.setName === other.setName &&\n      this.setVersion === other.setVersion &&\n      (this.electionId\n        ? other.electionId && this.electionId.equals(other.electionId)\n        : this.electionId === other.electionId) &&\n      this.primary === other.primary &&\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n      topologyVersionsEqual\n    );\n  }\n}\n\n/**\n * Parses an `ismaster` message and determines the server type\n *\n * @param {Object} ismaster The `ismaster` message to parse\n * @return {ServerType}\n */\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\n/**\n * Compares two topology versions.\n *\n * @param {object} lhs\n * @param {object} rhs\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n\n  if (lhs.processId.equals(rhs.processId)) {\n    // TODO: handle counters as Longs\n    if (lhs.counter === rhs.counter) {\n      return 0;\n    } else if (lhs.counter < rhs.counter) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  return -1;\n}\n\nmodule.exports = {\n  ServerDescription,\n  parseServerType,\n  compareTopologyVersion\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}