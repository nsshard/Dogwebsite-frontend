{"ast":null,"code":"'use strict';\n\nconst common = require('./common');\n\nconst BulkOperationBase = common.BulkOperationBase;\nconst Batch = common.Batch;\nconst bson = common.bson;\n\nconst utils = require('../utils');\n\nconst toError = utils.toError;\n/**\n * Add to internal list of Operations\n *\n * @ignore\n * @param {UnorderedBulkOperation} bulkOperation\n * @param {number} docType number indicating the document type\n * @param {object} document\n * @return {UnorderedBulkOperation}\n */\n\nfunction addToOperationsList(bulkOperation, docType, document) {\n  // Get the bsonSize\n  const bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false,\n    // Since we don't know what the user selected for BSON options here,\n    // err on the safe side, and check the size with ignoreUndefined: false.\n    ignoreUndefined: false\n  }); // Throw error if the doc is bigger than the max BSON size\n\n  if (bsonSize >= bulkOperation.s.maxBsonObjectSize) throw toError('document is larger than the maximum size ' + bulkOperation.s.maxBsonObjectSize); // Holds the current batch\n\n  bulkOperation.s.currentBatch = null; // Get the right type of batch\n\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentInsertBatch;\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentUpdateBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentRemoveBatch;\n  }\n\n  const maxKeySize = bulkOperation.s.maxKeySize; // Create a new batch object if we don't have a current one\n\n  if (bulkOperation.s.currentBatch == null) bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex); // Check if we need to create a new batch\n\n  if ( // New batch if we exceed the max batch op size\n  bulkOperation.s.currentBatch.size + 1 >= bulkOperation.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n  // since we can't sent an empty batch\n  bulkOperation.s.currentBatch.size > 0 && bulkOperation.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= bulkOperation.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n  bulkOperation.s.currentBatch.batchType !== docType) {\n    // Save the batch to the execution stack\n    bulkOperation.s.batches.push(bulkOperation.s.currentBatch); // Create a new batch\n\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n  } // We have an array of documents\n\n\n  if (Array.isArray(document)) {\n    throw toError('operation passed in cannot be an Array');\n  }\n\n  bulkOperation.s.currentBatch.operations.push(document);\n  bulkOperation.s.currentBatch.originalIndexes.push(bulkOperation.s.currentIndex);\n  bulkOperation.s.currentIndex = bulkOperation.s.currentIndex + 1; // Save back the current Batch to the right type\n\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentInsertBatch = bulkOperation.s.currentBatch;\n    bulkOperation.s.bulkResult.insertedIds.push({\n      index: bulkOperation.s.bulkResult.insertedIds.length,\n      _id: document._id\n    });\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentUpdateBatch = bulkOperation.s.currentBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentRemoveBatch = bulkOperation.s.currentBatch;\n  } // Update current batch size\n\n\n  bulkOperation.s.currentBatch.size += 1;\n  bulkOperation.s.currentBatch.sizeBytes += maxKeySize + bsonSize; // Return bulkOperation\n\n  return bulkOperation;\n}\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @extends BulkOperationBase\n * @property {number} length Get the number of operations in the bulk.\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\n\n\nclass UnorderedBulkOperation extends BulkOperationBase {\n  constructor(topology, collection, options) {\n    options = options || {};\n    options = Object.assign(options, {\n      addToOperationsList\n    });\n    super(topology, collection, options, false);\n  }\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.batches.length) {\n      return false;\n    }\n\n    return super.handleWriteError(callback, writeResult);\n  }\n\n}\n/**\n * Returns an unordered batch object\n * @ignore\n */\n\n\nfunction initializeUnorderedBulkOp(topology, collection, options) {\n  return new UnorderedBulkOperation(topology, collection, options);\n}\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;","map":{"version":3,"names":["common","require","BulkOperationBase","Batch","bson","utils","toError","addToOperationsList","bulkOperation","docType","document","bsonSize","calculateObjectSize","checkKeys","ignoreUndefined","s","maxBsonObjectSize","currentBatch","INSERT","currentInsertBatch","UPDATE","currentUpdateBatch","REMOVE","currentRemoveBatch","maxKeySize","currentIndex","size","maxWriteBatchSize","sizeBytes","maxBatchSizeBytes","batchType","batches","push","Array","isArray","operations","originalIndexes","bulkResult","insertedIds","index","length","_id","UnorderedBulkOperation","constructor","topology","collection","options","Object","assign","handleWriteError","callback","writeResult","initializeUnorderedBulkOp","module","exports","Bulk"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/bulk/unordered.js"],"sourcesContent":["'use strict';\n\nconst common = require('./common');\nconst BulkOperationBase = common.BulkOperationBase;\nconst Batch = common.Batch;\nconst bson = common.bson;\nconst utils = require('../utils');\nconst toError = utils.toError;\n\n/**\n * Add to internal list of Operations\n *\n * @ignore\n * @param {UnorderedBulkOperation} bulkOperation\n * @param {number} docType number indicating the document type\n * @param {object} document\n * @return {UnorderedBulkOperation}\n */\nfunction addToOperationsList(bulkOperation, docType, document) {\n  // Get the bsonSize\n  const bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false,\n\n    // Since we don't know what the user selected for BSON options here,\n    // err on the safe side, and check the size with ignoreUndefined: false.\n    ignoreUndefined: false\n  });\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= bulkOperation.s.maxBsonObjectSize)\n    throw toError('document is larger than the maximum size ' + bulkOperation.s.maxBsonObjectSize);\n  // Holds the current batch\n  bulkOperation.s.currentBatch = null;\n  // Get the right type of batch\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentInsertBatch;\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentUpdateBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentRemoveBatch;\n  }\n\n  const maxKeySize = bulkOperation.s.maxKeySize;\n\n  // Create a new batch object if we don't have a current one\n  if (bulkOperation.s.currentBatch == null)\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if (\n    // New batch if we exceed the max batch op size\n    bulkOperation.s.currentBatch.size + 1 >= bulkOperation.s.maxWriteBatchSize ||\n    // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n    // since we can't sent an empty batch\n    (bulkOperation.s.currentBatch.size > 0 &&\n      bulkOperation.s.currentBatch.sizeBytes + maxKeySize + bsonSize >=\n        bulkOperation.s.maxBatchSizeBytes) ||\n    // New batch if the new op does not have the same op type as the current batch\n    bulkOperation.s.currentBatch.batchType !== docType\n  ) {\n    // Save the batch to the execution stack\n    bulkOperation.s.batches.push(bulkOperation.s.currentBatch);\n\n    // Create a new batch\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError('operation passed in cannot be an Array');\n  }\n\n  bulkOperation.s.currentBatch.operations.push(document);\n  bulkOperation.s.currentBatch.originalIndexes.push(bulkOperation.s.currentIndex);\n  bulkOperation.s.currentIndex = bulkOperation.s.currentIndex + 1;\n\n  // Save back the current Batch to the right type\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentInsertBatch = bulkOperation.s.currentBatch;\n    bulkOperation.s.bulkResult.insertedIds.push({\n      index: bulkOperation.s.bulkResult.insertedIds.length,\n      _id: document._id\n    });\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentUpdateBatch = bulkOperation.s.currentBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentRemoveBatch = bulkOperation.s.currentBatch;\n  }\n\n  // Update current batch size\n  bulkOperation.s.currentBatch.size += 1;\n  bulkOperation.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n\n  // Return bulkOperation\n  return bulkOperation;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @extends BulkOperationBase\n * @property {number} length Get the number of operations in the bulk.\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nclass UnorderedBulkOperation extends BulkOperationBase {\n  constructor(topology, collection, options) {\n    options = options || {};\n    options = Object.assign(options, { addToOperationsList });\n\n    super(topology, collection, options, false);\n  }\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.batches.length) {\n      return false;\n    }\n\n    return super.handleWriteError(callback, writeResult);\n  }\n}\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nfunction initializeUnorderedBulkOp(topology, collection, options) {\n  return new UnorderedBulkOperation(topology, collection, options);\n}\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}