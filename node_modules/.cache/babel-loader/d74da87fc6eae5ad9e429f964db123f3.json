{"ast":null,"code":"'use strict';\n\nconst inherits = require('util').inherits;\n\nconst f = require('util').format;\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst CoreCursor = require('../cursor').CoreCursor;\n\nconst Logger = require('../connection/logger');\n\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\n\nconst MongoError = require('../error').MongoError;\n\nconst Server = require('./server');\n\nconst diff = require('./shared').diff;\n\nconst cloneOptions = require('./shared').cloneOptions;\n\nconst SessionMixins = require('./shared').SessionMixins;\n\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst BSON = retrieveBSON();\n\nconst getMMAPError = require('./shared').getMMAPError;\n\nconst makeClientMetadata = require('../utils').makeClientMetadata;\n\nconst legacyIsRetryableWriteError = require('./shared').legacyIsRetryableWriteError;\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n */\n//\n// States\n\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  }; // Get current state\n\n  var legalStates = legalTransitions[self.state];\n\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(f('Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]', self.id, self.state, newState, legalStates));\n  }\n} //\n// ReplSet instance id\n\n\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\n\nvar Mongos = function (seedlist, options) {\n  options = options || {}; // Get replSet Id\n\n  this.id = id++; // deduplicate seedlist\n\n  if (Array.isArray(seedlist)) {\n    seedlist = seedlist.reduce((seeds, seed) => {\n      if (seeds.find(s => s.host === seed.host && s.port === seed.port)) {\n        return seeds;\n      }\n\n      seeds.push(seed);\n      return seeds;\n    }, []);\n  } // Internal state\n\n\n  this.s = {\n    options: Object.assign({\n      metadata: makeClientMetadata(options)\n    }, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15\n  }; // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n\n  if (this.s.logger.isWarn() && this.s.options.socketTimeout !== 0 && this.s.options.socketTimeout < this.s.haInterval) {\n    this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts', this.s.options.socketTimeout, this.s.haInterval));\n  } // Disconnected state\n\n\n  this.state = DISCONNECTED; // Current proxies we are connecting to\n\n  this.connectingProxies = []; // Currently connected proxies\n\n  this.connectedProxies = []; // Disconnected proxies\n\n  this.disconnectedProxies = []; // Index of proxy to run operations against\n\n  this.index = 0; // High availability timeout id\n\n  this.haTimeoutId = null; // Last ismaster\n\n  this.ismaster = null; // Description of the Replicaset\n\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  }; // Highest clusterTime seen in responses from the current deployment\n\n  this.clusterTime = null; // Add event listener\n\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function () {\n    return 'mongos';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function () {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n/**\n * Emit event if it exists\n * @method\n */\n\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\n\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n/**\n * Initiate server connect\n */\n\n\nMongos.prototype.connect = function (options) {\n  var self = this; // Add any connect level options to the internal state\n\n  this.s.connectOptions = options || {}; // Set connecting state\n\n  stateTransition(this, CONNECTING); // Create server instances\n\n  var servers = this.s.seedlist.map(function (x) {\n    const server = new Server(Object.assign({}, self.s.options, x, options, {\n      reconnect: false,\n      monitoring: false,\n      parent: self\n    }));\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  }); // Emit the topology opening event\n\n  emitSDAMEvent(this, 'topologyOpening', {\n    topologyId: this.id\n  }); // Start all server connections\n\n  connectProxies(self, servers);\n};\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\n\n\nMongos.prototype.auth = function (credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\nfunction handleEvent(self) {\n  return function () {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return;\n    } // Move to list of disconnectedProxies\n\n\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this); // Emit the initial topology\n\n    emitTopologyDescriptionChanged(self); // Emit the left signal\n\n    self.emit('left', 'mongos', this); // Emit the sdam event\n\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function () {\n    var _this = this; // Destroy the instance\n\n\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self); // Move from connectingProxies\n\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    } // Check the type of server\n\n\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster(); // Is this not a proxy, remove t\n\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this); // Emit the initial topology\n\n            emitTopologyDescriptionChanged(self);\n\n            _this.destroy();\n\n            return self.emit('failed', _this);\n          }\n        } // Remove the handlers\n\n\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        } // Add stable state handlers\n\n\n        _this.on('error', handleEvent(self, 'error'));\n\n        _this.on('close', handleEvent(self, 'close'));\n\n        _this.on('timeout', handleEvent(self, 'timeout'));\n\n        _this.on('parseError', handleEvent(self, 'parseError')); // Move from connecting proxies connected\n\n\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this); // Emit the joined event\n\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s'; // We have a standalone server\n\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n\n          self.s.logger.warn(f(message, _this.name));\n        } // This is not a mongos proxy, destroy and remove it completely\n\n\n        _this.destroy(true);\n\n        removeProxyFrom(self.connectingProxies, _this); // Emit the left event\n\n        self.emit('left', 'server', _this); // Emit failed event\n\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this); // Emit the left event\n\n      self.emit('left', 'mongos', this); // Emit failed event\n\n      self.emit('failed', this);\n    } // Emit the initial topology\n\n\n    emitTopologyDescriptionChanged(self); // Trigger topologyMonitor\n\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED); // Emit the connect event\n\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(f('no mongos proxies found in seed list, did you mean to connect to a replicaset'));\n        } // Emit the error that no proxies were found\n\n\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      } // Topology monitor\n\n\n      topologyMonitor(self, {\n        firstConnect: true\n      });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers); // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function () {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      }); // Emit the initial topology\n\n      emitTopologyDescriptionChanged(self); // Add event handlers\n\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect')); // Command Monitoring events\n\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']); // Start connection\n\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  } // Start all the servers\n\n\n  servers.forEach(server => connect(server, timeoutInterval++));\n}\n\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  } // Get the currently connected Proxies\n\n\n  var connectedProxies = self.connectedProxies.slice(0); // Set lower bound\n\n  var lowerBoundLatency = Number.MAX_VALUE; // Determine the lower bound for the Proxies\n\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  } // Filter out the possible servers\n\n\n  connectedProxies = connectedProxies.filter(function (server) {\n    if (server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS && server.isConnected()) {\n      return true;\n    }\n  });\n  let proxy; // We have no connectedProxies pick first of the connected ones\n\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length]; // Update the index\n\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  } // Return the proxy\n\n\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length; // Handle events\n\n  var _handleEvent = function (self, event) {\n    return function () {\n      var _self = this;\n\n      count = count - 1; // Destroyed\n\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        } // Remove the handlers\n\n\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        } // Add stable state handlers\n\n\n        _self.on('error', handleEvent(self, 'error'));\n\n        _self.on('close', handleEvent(self, 'close'));\n\n        _self.on('timeout', handleEvent(self, 'timeout'));\n\n        _self.on('parseError', handleEvent(self, 'parseError')); // Move to the connected servers\n\n\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self); // Emit topology Change\n\n        emitTopologyDescriptionChanged(self); // Emit joined event\n\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      } // Are we done finish up callback\n\n\n      if (count === 0) {\n        callback();\n      }\n    };\n  }; // No new servers\n\n\n  if (count === 0) {\n    return callback();\n  } // Execute method\n\n\n  function execute(_server, i) {\n    setTimeout(function () {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        return;\n      } // Create a new server instance\n\n\n      var server = new Server(Object.assign({}, self.s.options, {\n        host: _server.name.split(':')[0],\n        port: parseInt(_server.name.split(':')[1], 10),\n        reconnect: false,\n        monitoring: false,\n        parent: self\n      }));\n      destroyServer(_server, {\n        force: true\n      });\n      removeProxyFrom(self.disconnectedProxies, _server); // Relay the server description change\n\n      relayEvents(server, self, ['serverDescriptionChanged']); // Emit opening server event\n\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      }); // Add temp handlers\n\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError')); // Command Monitoring events\n\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']); // Connect to proxy\n\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  } // Create new instances\n\n\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {}; // no need to set up the monitor if we're already closed\n\n  if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n    return;\n  } // Set momitoring timeout\n\n\n  self.haTimeoutId = setTimeout(function () {\n    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n      return;\n    } // If we have a primary and a disconnect handler, execute\n    // buffered operations\n\n\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    } // Get the connectingServers\n\n\n    var proxies = self.connectedProxies.slice(0); // Get the count\n\n    var count = proxies.length; // If the count is zero schedule a new fast\n\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime(); // Emit the server heartbeat start\n\n      emitSDAMEvent(self, 'serverHeartbeatStarted', {\n        connectionId: _server.name\n      }); // Execute ismaster\n\n      _server.command('admin.$cmd', {\n        ismaster: true\n      }, {\n        monitoring: true,\n        socketTimeout: self.s.options.connectionTimeout || 2000\n      }, function (err, r) {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          // Move from connectingProxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n\n          _server.destroy();\n\n          return cb(err, r);\n        } // Calculate latency\n\n\n        var latencyMS = new Date().getTime() - start; // We had an error, remove it from the state\n\n        if (err) {\n          // Emit the server heartbeat failure\n          emitSDAMEvent(self, 'serverHeartbeatFailed', {\n            durationMS: latencyMS,\n            failure: err,\n            connectionId: _server.name\n          }); // Move from connected proxies to disconnected proxies\n\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n        } else {\n          // Update the server ismaster\n          _server.ismaster = r.result;\n          _server.lastIsMasterMS = latencyMS; // Server heart beat event\n\n          emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n            durationMS: latencyMS,\n            reply: r.result,\n            connectionId: _server.name\n          });\n        }\n\n        cb(err, r);\n      });\n    } // No proxies initiate monitor again\n\n\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      } // Attempt to connect to any unknown servers\n\n\n      return reconnectProxies(self, self.disconnectedProxies, function () {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          return;\n        } // Are we connected ? emit connect event\n\n\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        } // Perform topology monitor\n\n\n        topologyMonitor(self);\n      });\n    } // Ping all servers\n\n\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function () {\n        count = count - 1;\n\n        if (count === 0) {\n          if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n            return;\n          } // Attempt to connect to any unknown servers\n\n\n          reconnectProxies(self, self.disconnectedProxies, function () {\n            if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n              return;\n            } // Perform topology monitor\n\n\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\n\n\nMongos.prototype.lastIsMaster = function () {\n  return this.ismaster;\n};\n/**\n * Unref all connections belong to this server\n * @method\n */\n\n\nMongos.prototype.unref = function () {\n  // Transition state\n  stateTransition(this, UNREFERENCED); // Get all proxies\n\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function (x) {\n    x.unref();\n  });\n  clearTimeout(this.haTimeoutId);\n};\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\n\n\nMongos.prototype.destroy = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  stateTransition(this, DESTROYING);\n\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n\n  const serverDestroyed = () => {\n    serverCount--;\n\n    if (serverCount > 0) {\n      return;\n    }\n\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', {\n      topologyId: this.id\n    });\n    stateTransition(this, DESTROYED);\n\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  } // Destroy all connecting servers\n\n\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\n\n\nMongos.prototype.isConnected = function () {\n  return this.connectedProxies.length > 0;\n};\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\n\n\nMongos.prototype.isDestroyed = function () {\n  return this.state === DESTROYED;\n}; //\n// Operations\n//\n\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops; // Pick a server\n\n  let server = pickProxy(self, options.session); // No server found error out\n\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction();\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n\n    if (!legacyIsRetryableWriteError(err, self) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    } // Pick another server\n\n\n    server = pickProxy(self, options.session); // No server found error out with original error\n\n    if (!server) {\n      return callback(err);\n    }\n\n    const newArgs = Object.assign({}, args, {\n      retrying: true\n    });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  } // increment and assign txnNumber\n\n\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  } // rerun the operation\n\n\n  server[op](ns, ops, options, handler);\n}\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.insert = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  } // Not connected but we have a disconnecthandler\n\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'insert',\n    ns,\n    ops\n  }, options, callback);\n};\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.update = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  } // Not connected but we have a disconnecthandler\n\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'update',\n    ns,\n    ops\n  }, options, callback);\n};\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.remove = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  } // Not connected but we have a disconnecthandler\n\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'remove',\n    ns,\n    ops\n  }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.command = function (ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  var self = this; // Pick a proxy\n\n  var server = pickProxy(self, options.session); // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } // No server returned we had an error\n\n\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Cloned options\n\n\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n  const willRetryWrite = !options.retrying && options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n\n    if (!legacyIsRetryableWriteError(err, self)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, {\n        retrying: true\n      });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    return callback(err);\n  }; // increment and assign txnNumber\n\n\n  if (willRetryWrite) {\n    clonedOptions.session.incrementTransactionNumber();\n    clonedOptions.willRetryWrite = willRetryWrite;\n  } // Execute the command\n\n\n  server.command(ns, cmd, clonedOptions, cb);\n};\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\n\n\nMongos.prototype.cursor = function (ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this; // Set up final cursor type\n\n  var FinalCursor = options.cursorFactory || this.s.Cursor; // Return the cursor\n\n  return new FinalCursor(topology, ns, cmd, options);\n};\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Specify a session if it is being used\n * @param {function} callback\n */\n\n\nMongos.prototype.selectServer = function (selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined') callback = selector, selector = undefined, options = {};\n  if (typeof options === 'function') callback = options, options = selector, selector = undefined;\n  options = options || {};\n  const server = pickProxy(this, options.session);\n\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\n\n\nMongos.prototype.connections = function () {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    } // Generate description\n\n\n    var description = {\n      topologyType: topology,\n      servers: []\n    }; // All proxies\n\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies); // Add all the disconnected proxies\n\n    description.servers = description.servers.concat(proxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Unknown';\n      return description;\n    })); // Add all the connected proxies\n\n    description.servers = description.servers.concat(self.connectedProxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Mongos';\n      return description;\n    })); // Get the diff\n\n    var diffResult = diff(self.topologyDescription, description); // Create the result\n\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    }; // Emit the topologyDescription change\n\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    } // Set the new description\n\n\n    self.topologyDescription = description;\n  }\n}\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\n\nmodule.exports = Mongos;","map":{"version":3,"names":["inherits","require","f","format","EventEmitter","CoreCursor","Logger","retrieveBSON","MongoError","Server","diff","cloneOptions","SessionMixins","isRetryableWritesSupported","relayEvents","BSON","getMMAPError","makeClientMetadata","legacyIsRetryableWriteError","DISCONNECTED","CONNECTING","CONNECTED","UNREFERENCED","DESTROYING","DESTROYED","stateTransition","self","newState","legalTransitions","disconnected","connecting","connected","unreferenced","destroyed","legalStates","state","indexOf","s","logger","error","id","handlers","Mongos","seedlist","options","Array","isArray","reduce","seeds","seed","find","host","port","push","Object","assign","metadata","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","BSONRegExp","Symbol","Timestamp","Cursor","cursorFactory","haInterval","disconnectHandler","index","connectOptions","debug","localThresholdMS","isWarn","socketTimeout","warn","connectingProxies","connectedProxies","disconnectedProxies","haTimeoutId","ismaster","topologyDescription","topologyType","servers","clusterTime","call","prototype","defineProperty","enumerable","get","native","logicalSessionTimeoutMinutes","emitSDAMEvent","event","description","listeners","length","emit","SERVER_EVENTS","destroyServer","server","callback","forEach","removeAllListeners","destroy","connect","map","x","reconnect","monitoring","parent","topologyId","connectProxies","auth","credentials","handleEvent","moveServerFrom","emitTopologyDescriptionChanged","address","name","handleInitialConnectEvent","_this","lastIsMaster","msg","i","on","message","hosts","removeProxyFrom","topologyMonitor","firstConnect","concat","timeoutInterval","setTimeout","once","pickProxy","session","transaction","isConnected","unpinServer","slice","lowerBoundLatency","Number","MAX_VALUE","lastIsMasterMS","filter","proxy","isActive","pinServer","from","to","splice","reconnectProxies","proxies","count","_handleEvent","_self","execute","_server","split","parseInt","force","pingServer","cb","start","Date","getTime","connectionId","command","connectionTimeout","err","r","latencyMS","durationMS","failure","result","reply","unref","clearTimeout","serverCount","serverDestroyed","isDestroyed","executeWriteOperation","args","op","ns","ops","willRetryWrite","retrying","retryWrites","inTransaction","handler","newArgs","operationId","incrementTransactionNumber","insert","add","update","remove","RETRYABLE_WRITE_OPERATIONS","isWriteCommand","some","cmd","clonedOptions","topology","newOptions","cursor","FinalCursor","selectServer","selector","undefined","connections","getDescription","type","diffResult","previousDescription","newDescription","module","exports"],"sources":["C:/Users/Administrator/Desktop/webAPI work/web/dog-website/node_modules/koa-mongo/node_modules/mongodb/lib/core/topologies/mongos.js"],"sourcesContent":["'use strict';\n\nconst inherits = require('util').inherits;\nconst f = require('util').format;\nconst EventEmitter = require('events').EventEmitter;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst Logger = require('../connection/logger');\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\nconst MongoError = require('../error').MongoError;\nconst Server = require('./server');\nconst diff = require('./shared').diff;\nconst cloneOptions = require('./shared').cloneOptions;\nconst SessionMixins = require('./shared').SessionMixins;\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\nconst relayEvents = require('../utils').relayEvents;\nconst BSON = retrieveBSON();\nconst getMMAPError = require('./shared').getMMAPError;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst legacyIsRetryableWriteError = require('./shared').legacyIsRetryableWriteError;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n */\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(\n      f(\n        'Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function(seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // deduplicate seedlist\n  if (Array.isArray(seedlist)) {\n    seedlist = seedlist.reduce((seeds, seed) => {\n      if (seeds.find(s => s.host === seed.host && s.port === seed.port)) {\n        return seeds;\n      }\n\n      seeds.push(seed);\n      return seeds;\n    }, []);\n  }\n\n  // Internal state\n  this.s = {\n    options: Object.assign({ metadata: makeClientMetadata(options) }, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15\n  };\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Description of the Replicaset\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\n\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'mongos';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n\n/**\n * Initiate server connect\n */\nMongos.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    const server = new Server(\n      Object.assign({}, self.s.options, x, options, {\n        reconnect: false,\n        monitoring: false,\n        parent: self\n      })\n    );\n\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n\n  // Start all server connections\n  connectProxies(self, servers);\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\nfunction handleEvent(self) {\n  return function() {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return;\n    }\n\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n\n    // Destroy the instance\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster();\n\n      // Is this not a proxy, remove t\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n            // Emit the initial topology\n            emitTopologyDescriptionChanged(self);\n            _this.destroy();\n            return self.emit('failed', _this);\n          }\n        }\n\n        // Remove the handlers\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _this.on('error', handleEvent(self, 'error'));\n        _this.on('close', handleEvent(self, 'close'));\n        _this.on('timeout', handleEvent(self, 'timeout'));\n        _this.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move from connecting proxies connected\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n        // Emit the joined event\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n          // We have a standalone server\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n\n          self.s.logger.warn(f(message, _this.name));\n        }\n\n        // This is not a mongos proxy, destroy and remove it completely\n        _this.destroy(true);\n        removeProxyFrom(self.connectingProxies, _this);\n        // Emit the left event\n        self.emit('left', 'server', _this);\n        // Emit failed event\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n\n    // Trigger topologyMonitor\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(\n            f('no mongos proxies found in seed list, did you mean to connect to a replicaset')\n          );\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, { firstConnect: true });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      });\n\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  servers.forEach(server => connect(server, timeoutInterval++));\n}\n\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  }\n\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function(server) {\n    if (\n      server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS &&\n      server.isConnected()\n    ) {\n      return true;\n    }\n  });\n\n  let proxy;\n\n  // We have no connectedProxies pick first of the connected ones\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length];\n    // Update the index\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  }\n\n  // Return the proxy\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function() {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        }\n\n        // Remove the handlers\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _self.on('error', handleEvent(self, 'error'));\n        _self.on('close', handleEvent(self, 'close'));\n        _self.on('timeout', handleEvent(self, 'timeout'));\n        _self.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move to the connected servers\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self);\n        // Emit topology Change\n        emitTopologyDescriptionChanged(self);\n        // Emit joined event\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback();\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.name.split(':')[0],\n          port: parseInt(_server.name.split(':')[1], 10),\n          reconnect: false,\n          monitoring: false,\n          parent: self\n        })\n      );\n\n      destroyServer(_server, { force: true });\n      removeProxyFrom(self.disconnectedProxies, _server);\n\n      // Relay the server description change\n      relayEvents(server, self, ['serverDescriptionChanged']);\n\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      });\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Connect to proxy\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // no need to set up the monitor if we're already closed\n  if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n    return;\n  }\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function() {\n    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n      return;\n    }\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\n\n      // Execute ismaster\n      _server.command(\n        'admin.$cmd',\n        {\n          ismaster: true\n        },\n        {\n          monitoring: true,\n          socketTimeout: self.s.options.connectionTimeout || 2000\n        },\n        function(err, r) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n            _server.destroy();\n            return cb(err, r);\n          }\n\n          // Calculate latency\n          var latencyMS = new Date().getTime() - start;\n\n          // We had an error, remove it from the state\n          if (err) {\n            // Emit the server heartbeat failure\n            emitSDAMEvent(self, 'serverHeartbeatFailed', {\n              durationMS: latencyMS,\n              failure: err,\n              connectionId: _server.name\n            });\n            // Move from connected proxies to disconnected proxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          } else {\n            // Update the server ismaster\n            _server.ismaster = r.result;\n            _server.lastIsMasterMS = latencyMS;\n\n            // Server heart beat event\n            emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n              durationMS: latencyMS,\n              reply: r.result,\n              connectionId: _server.name\n            });\n          }\n\n          cb(err, r);\n        }\n      );\n    }\n\n    // No proxies initiate monitor again\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function() {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          return;\n        }\n\n        // Are we connected ? emit connect event\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function() {\n        count = count - 1;\n\n        if (count === 0) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            return;\n          }\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function() {\n            if (\n              self.state === DESTROYED ||\n              self.state === DESTROYING ||\n              self.state === UNREFERENCED\n            ) {\n              return;\n            }\n\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  stateTransition(this, DESTROYING);\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n  const serverDestroyed = () => {\n    serverCount--;\n    if (serverCount > 0) {\n      return;\n    }\n\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n    stateTransition(this, DESTROYED);\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  // Destroy all connecting servers\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.connectedProxies.length > 0;\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\n//\n// Operations\n//\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  // Pick a server\n  let server = pickProxy(self, options.session);\n  // No server found error out\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction();\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    }\n\n    // Pick another server\n    server = pickProxy(self, options.session);\n\n    // No server found error out with original error\n    if (!server) {\n      return callback(err);\n    }\n\n    const newArgs = Object.assign({}, args, { retrying: true });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // rerun the operation\n  server[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self, options.session);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n\n  const willRetryWrite =\n    !options.retrying &&\n    options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, { retrying: true });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    return callback(err);\n  };\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    clonedOptions.session.incrementTransactionNumber();\n    clonedOptions.willRetryWrite = willRetryWrite;\n  }\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, cb);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Specify a session if it is being used\n * @param {function} callback\n */\nMongos.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function')\n    (callback = options), (options = selector), (selector = undefined);\n  options = options || {};\n\n  const server = pickProxy(this, options.session);\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      servers: []\n    };\n\n    // All proxies\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies);\n\n    // Add all the disconnected proxies\n    description.servers = description.servers.concat(\n      proxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Unknown';\n        return description;\n      })\n    );\n\n    // Add all the connected proxies\n    description.servers = description.servers.concat(\n      self.connectedProxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Mongos';\n        return description;\n      })\n    );\n\n    // Get the diff\n    var diffResult = diff(self.topologyDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    }\n\n    // Set the new description\n    self.topologyDescription = description;\n  }\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"],"mappings":"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C;IACD,CA/C0D,CAiD3D;;;IACA5J,IAAI,CAAC8D,mBAAL,GAA2Ba,WAA3B;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA2H,MAAM,CAACC,OAAP,GAAiBvL,MAAjB"},"metadata":{},"sourceType":"script"}